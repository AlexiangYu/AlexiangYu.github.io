<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alexaing</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-07-30T04:42:43.296Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Alexiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js相关</title>
    <link href="http://example.com/2024/07/28/Node-js%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2024/07/28/Node-js%E7%9B%B8%E5%85%B3/</id>
    <published>2024-07-28T12:33:26.000Z</published>
    <updated>2024-07-30T04:42:43.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>早期JS: 全局污染和依赖管理混乱</p><h3 id="Commonjs标准"><a href="#Commonjs标准" class="headerlink" title="Commonjs标准"></a>Commonjs标准</h3><p>主要在Node.js中实现模块化，在浏览器中需要用webpack编译打包处理（或Browserify实现）</p><ul><li>每一个 <code>.js</code> 文件都是一个单独的模块</li><li>核心变量: module、exports、require</li><li>对代码用函数包装</li><li>运行时同步加载</li></ul><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>为<code>module.exports</code>赋值，可以只导出一个类或函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">sayName</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入形参exports，添加属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = <span class="string">`《Node.js实践》`</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">author</span> = <span class="string">&#x27;AlexYu&#x27;</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exports是传入到当前模块内的一个对象，不能直接赋值</span></span><br></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>require 加载文件：dfs，缓存避免重复加载、循环引用</p><p>顺序：当前目录node_modules -&gt; 上级目录的node_modules -&gt; index.js ，index.json ，index.node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayName = <span class="built_in">require</span>(<span class="string">&#x27;./hello.js&#x27;</span>)</span><br><span class="line"><span class="title function_">sayName</span>()</span><br></pre></td></tr></table></figure><h3 id="ES6标准"><a href="#ES6标准" class="headerlink" title="ES6标准"></a>ES6标准</h3><ul><li>静态模块化，提前在编译时加载</li><li>命令 <code>export</code> 用于暴露接口， <code>import</code> 用于引入模块</li><li>运行时异步加载</li><li>代码中直接导入导出模块</li></ul><h4 id="命名导出-导入"><a href="#命名导出-导入" class="headerlink" title="命名导出&#x2F;导入"></a>命名导出&#x2F;导入</h4><ul><li>import { } 内部的变量名称，要与 export { } 完全匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sayName</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Node.js实践&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; a, b &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sayName, a, b &#125; <span class="keyword">from</span> <span class="string">&#x27;./hello.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">sayName</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="number">1</span>, b);</span><br></pre></td></tr></table></figure><h4 id="默认导出-导入"><a href="#默认导出-导入" class="headerlink" title="默认导出&#x2F;导入"></a>默认导出&#x2F;导入</h4><ul><li>export default 导出模块的默认接口，import 导入时可以省略接口名称</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&#x27;./exp_defualt.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)    <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27;, fn: [Function: fn] &#125;</span></span><br><span class="line">obj.<span class="title function_">fn</span>()           <span class="comment">// Hello John</span></span><br></pre></td></tr></table></figure><h4 id="混合导出-导入"><a href="#混合导出-导入" class="headerlink" title="混合导出&#x2F;导入"></a>混合导出&#x2F;导入</h4><ul><li>同时使用 export default 和 export 导入多个属性</li><li>重命名导入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;c, d&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> obj, &#123;c, d&#125; <span class="keyword">from</span> <span class="string">&#x27;./exp_defualt.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)    <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27;, fn: [Function: fn] &#125;</span></span><br><span class="line">obj.<span class="title function_">fn</span>()           <span class="comment">// Hello John</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c, d)   <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// as 重命名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> O <span class="keyword">from</span> <span class="string">&#x27;./exp_defualt.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(O) <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27;, fn: [Function: fn], c: 110, d: 120 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h4><p>语法：<code>import(module)</code></p><ul><li>运行时动态导入模块，避免打包体积过大</li><li>返回 Promise 对象，可以使用 then() 方法获取模块的接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&#x27;./hello.js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Accepting the updated module!&#x27;</span>);</span><br><span class="line">    <span class="comment">// 重新导入模块</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The updated module:&#x27;</span>, <span class="variable language_">module</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;p&gt;早期JS: 全局污染和依赖管理混乱&lt;/p&gt;
&lt;h3 id=&quot;Commonjs标准&quot;&gt;&lt;a href=&quot;#Commonjs标准&quot; cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue用法</title>
    <link href="http://example.com/2024/07/25/Vue%E7%94%A8%E6%B3%95/"/>
    <id>http://example.com/2024/07/25/Vue%E7%94%A8%E6%B3%95/</id>
    <published>2024-07-25T02:47:32.000Z</published>
    <updated>2024-08-04T18:41:23.070Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><ul><li>父 -&gt; 子: props</li><li>子 -&gt; 父: $emit</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">APP组件</span><br><span class="line"><span class="comment">&lt;!-- 向子组件添加属性来传值，监听自定义事件接收 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">update:msg</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&#x27;Hello, parent!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;<span class="comment">// 回调的方法，形参为传回的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeMsg</span>(<span class="params">newMsg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">msg</span> = newMsg</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span> <span class="comment">&lt;!-- 可直接使用props --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>更新父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!-- 触发父组件的事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;child&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;<span class="comment">// 通过props接收</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="string">&#x27;Hello, child!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeMsg</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:msg&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>)<span class="comment">// $emit + 事件名，传回的数据</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="eventBus-任意组件传值"><a href="#eventBus-任意组件传值" class="headerlink" title="eventBus: 任意组件传值"></a>eventBus: 任意组件传值</h4><ul><li>通过<code>this.$bus.$on</code>接收</li><li>通过<code>this.$bus.$emit</code>发送</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意组件发送</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;update:msg&#x27;</span>, <span class="string">&#x27;Hello, any component!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;update:msg&#x27;</span>, <span class="function">(<span class="params">newMsg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">msg</span> = newMsg</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="一个祖先对任意后代注入"><a href="#一个祖先对任意后代注入" class="headerlink" title="一个祖先对任意后代注入"></a>一个祖先对任意后代注入</h4><ul><li>provide: 向后代提供数据</li><li>inject: 接收数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">ancestor组件</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">progeny组件</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; city &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 直接使用inject的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;child&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inject</span>: [<span class="string">&#x27;city&#x27;</span>],<span class="comment">// 注入provide的数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">city</span>)<span class="comment">// 打印provide的数据</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vuex-全局状态管理"><a href="#Vuex-全局状态管理" class="headerlink" title="Vuex: 全局状态管理"></a>Vuex: 全局状态管理</h3><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h4 id="V-model封装原理"><a href="#V-model封装原理" class="headerlink" title="V-model封装原理"></a>V-model封装原理</h4><p><code>:value</code>与<code>@input</code>实现绑定属性+监听事件的语法糖。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg = $event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>子组件中数据在props中，不能直接用<code>v-model</code>。但父组件中可<code>v-model</code>绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BaseSelect</span> <span class="attr">v-model</span>=<span class="string">&quot;selectId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">BaseSelect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">BaseSelect</span> <span class="keyword">from</span> <span class="string">&#x27;./components/BaseSelect.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">selectId</span>: <span class="string">&#x27;102&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">BaseSelect</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">:value</span>=<span class="string">&quot;selectId&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;selectCity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;102&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;103&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;104&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;105&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">selectId</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">selectCity</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changeCity&#x27;</span>, e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a><code>.sync</code> 修饰符</h4><p>父组件中使用<code>.sync</code>修饰符，实现双向绑定。</p><p>事件名为<code>update:xxx</code>。props值不必为<code>value</code>时使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- isShow.sync  =&gt; :isShow=&quot;isShow&quot; @update:isShow=&quot;isShow=$event&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseDialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">BaseDialog</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inputChangeComp</span>(<span class="params">e</span>) &#123;  <span class="comment">// 子组件中</span></span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:visible&#x27;</span>, e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>父组件中使用<code>&lt;slot&gt;</code>标签，子组件中使用<code>slot</code>属性，将内容插入到插槽位置。</p><p><strong>组件内使用ref获取元素&#x2F;组件实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// $refs只会在当前组件查找盒子，而querySelector 会查找项目中所有的元素</span></span><br><span class="line">    <span class="comment">// 等价于 var myChart = echarts.init(document.querySelector(&#x27;.base-chart-box&#x27;))</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">baseChartBox</span>)</span><br><span class="line">    myChart.<span class="title function_">setOption</span>(&#123;    <span class="comment">// 绘制图表</span></span><br><span class="line">      <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div class=&quot;base-chart-box&quot; ref=&quot;baseChartBox&quot;&gt;子组件&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>$nextTick</strong></p><p>需要等到dom更新后，才能获取元素的引用，使用<code>$nextTick</code>方法，在下一个事件循环开始时执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;  <span class="comment">// 等待dom更新后，获取输入框的引用</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// setTimeout(()=&gt; &#123;        效果相同</span></span><br><span class="line"><span class="comment">//   this.$refs.inp.focus();</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><p>自定义指令</p><ul><li>全局注册：<code>Vue.directive(&#39;xxx&#39;, &#123;&#125;)</code></li><li>局部注册：<code>directives: &#123;&#125;</code></li></ul><p>传递指令的值：<code>binding.value</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: &#123;</span><br><span class="line">      inserted (el, binding) &#123;</span><br><span class="line">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div v-color=&quot;&#x27;</span>red<span class="string">&#x27;&quot;&gt;tex&lt;/div&gt;&#x27;</span>  <span class="comment">// 指令的值为字符串格式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;组件通信&quot;&gt;&lt;a href=&quot;#组件通信&quot; class=&quot;headerlink&quot; title=&quot;组件通信&quot;&gt;&lt;/a&gt;组件通信&lt;/h3&gt;&lt;h4 id=&quot;父子组件通信&quot;&gt;&lt;a href=&quot;#父子组件通信&quot; class=&quot;headerlink&quot; title=&quot;父子组件通</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基础-网络相关</title>
    <link href="http://example.com/2024/06/04/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2024/06/04/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</id>
    <published>2024-06-04T10:31:01.000Z</published>
    <updated>2024-07-27T03:40:15.029Z</updated>
    
    <content type="html"><![CDATA[<p>一切往事皆在梦中，</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一切往事皆在梦中，&lt;/p&gt;
&lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 笔记</title>
    <link href="http://example.com/2024/05/30/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/05/30/JavaScript%E7%AC%94%E8%AE%B0/</id>
    <published>2024-05-30T09:22:51.000Z</published>
    <updated>2024-07-18T01:40:21.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一种脚本语言，可用于HTML和Web，更可广泛用于服务器等领域。</p><p>组成：</p><p><strong>ECMAScript</strong> 核心语法</p><p><strong>Web APIs</strong> DOM（文档对象模型）+BOM</p><h3 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h3><ul><li>内部JS：<code>&lt;script&gt;</code>写在<code>&lt;body&gt;</code>最后  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- body content here --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;Hello, JS!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>外部JS：单独引入<code>.js</code>文件  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- body content here --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>内联JS：标签内部  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World!&#x27;)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&#x2F;输出"></a>输入&#x2F;输出</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;写入文档&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印日志&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;弹出提示框&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&quot;输入框&quot;</span>, <span class="string">&quot;默认值&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;p&gt;你输入的内容是：&quot;</span> + a + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>; </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;p&gt;我的年龄是<span class="subst">$&#123;age&#125;</span>岁&lt;/p&gt;`</span>);   <span class="comment">//模板字符串</span></span><br></pre></td></tr></table></figure><h3 id="let，var，-const区别"><a href="#let，var，-const区别" class="headerlink" title="let，var， const区别"></a>let，var， const区别</h3><ol><li>作用域：</li></ol><ul><li>var：函数作用域，在声明它的函数内部有效。</li><li>let：块级作用域，即在声明它的<code>&#123; &#125;</code>块（如 if 语句块、for 循环块等）内有效。</li></ul><ol start="2"><li>变量提升：</li></ol><ul><li>var：会发生变量提升，即在变量声明之前就可以访问到变量（但值为 undefined）</li><li>let：没有变量提升，在声明之前访问会报错。</li></ul><p>var可重复声明</p><p>常量const：必须赋值，不可修改</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>添加</strong><ol><li>push(el1, el2)：添加元素到尾部，返回<strong>新的长度</strong></li><li>unshift(el)：添加到头部</li></ol></li><li><strong>删除</strong><ol><li>pop()：删除最后一个元素，返回<strong>该元素</strong></li><li>shift()：删除第一个元素</li><li>splice(start, count&#x3D;1, …, (el1)…)：指定开始位置，移除个数，替换元素</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span> ,<span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="string">&#x27;Dave&#x27;</span>, <span class="string">&#x27;Eve&#x27;</span>))    <span class="comment">// 7</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [0, 1, 2, &#x27;Alex&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;Dave&#x27;, &#x27;Eve&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>())   <span class="comment">// remove the first element</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;Jane&#x27;</span>)    <span class="comment">// replace &#x27;Alex&#x27; with &#x27;Jane&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)    <span class="comment">// [0, 1, &#x27;Jane&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;Dave&#x27;, &#x27;Eve&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><code>map(func)</code>：映射，返回新数组</li><li><code>filter(func)</code>：过滤，返回新数组</li><li><code>reduce((prev, curr) =&gt; &#123;... &#125;, initial)</code>：聚合，返回单个值</li><li><code>sort(func)</code>：排序，返回新数组</li><li><code>reverse()</code>：反转，返回新数组</li><li><code>slice(start, end)</code>：切片，返回新数组</li><li><code>concat(arr1, arr2,...)</code>：合并，返回新数组</li><li><code>join</code>：连结成字符串</li></ul><p>展开运算符： 数组变成多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)); <span class="comment">// Output: 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);   <span class="comment">// [3, 4, 5] 返回true的元素才会被保留</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>)); <span class="comment">// Output: 15</span></span><br></pre></td></tr></table></figure><p><strong>遍历</strong></p><ul><li><code>forEach(func)</code>：遍历数组，不返回新数组</li><li><code>for...of</code>：遍历数组，返回新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [un, deux, trois, quatre, cinq] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(un, deux, trois, quatre, cinq); <span class="comment">// Output: 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>弱数据类型：在程序运行时才确定</p><ul><li><strong>基本数据类型：</strong> 存储的值本身<ol><li>Number</li><li>String  <code>.trim()</code> 去掉前后空格</li><li>Boolean</li><li>null</li><li>undefined</li><li>Symbol</li></ol></li><li><strong>引用数据类型：</strong> 可变<ol><li>Object</li><li>Array</li><li>Function</li><li>Date</li><li>RegExp 正则表达式</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="comment">// Object</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]; <span class="comment">// Array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123; <span class="comment">// Function</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// Date</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/hello/i</span>; <span class="comment">// RegExp</span></span><br></pre></td></tr></table></figure><p><strong>类型判断</strong></p><p>typeof 运算符&#x2F;函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);  <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);  <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);   <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><strong>关于null与undefined</strong></p><p>null是已赋值空类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>+<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>+<span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>+<span class="literal">null</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>类型转换</strong></p><ol><li>隐式转换: 运算，拼接</li><li><strong>显示转换</strong>：手动</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">let</span> ans1 = <span class="title class_">Number</span>(str) + <span class="number">1</span> <span class="comment">// 124</span></span><br><span class="line"><span class="keyword">let</span> ans2 = +str + <span class="number">1</span> <span class="comment">// 124 隐式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = +<span class="title function_">prompt</span>(<span class="string">&quot;请输入你的年龄：&quot;</span>); <span class="comment">// number</span></span><br></pre></td></tr></table></figure><ul><li>parseInt()：只保留整数</li><li>parseFloat()：保留小数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;89.65px&quot;</span>))    <span class="comment">// 89</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;12.98px&quot;</span>))  <span class="comment">// 12.98</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li><code>==</code> 值相等</li><li><code>===</code> 值、类型都相等</li><li><code>!==</code> 不全等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="string">&quot;2&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="string">&quot;2&quot;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> === <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === <span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> === <span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="literal">true</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="literal">true</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="string">&quot;true&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="string">&quot;true&quot;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="string">&quot;&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === <span class="string">&quot;&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>建议用 <code>===</code> 判断</p><p>NaN不等于任何值</p><p><strong>三元运算符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">10</span>, num2 = <span class="number">20</span>;</span><br><span class="line">num1&gt;num2 ? <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;num1&#125;</span>大于<span class="subst">$&#123;num2&#125;</span>`</span>) : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;num1&#125;</span>不大于<span class="subst">$&#123;num2&#125;</span>`</span>);     <span class="comment">// 10不大于20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&quot;Enter a:&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>( a&lt;<span class="number">10</span> ?  <span class="number">0</span>+a : a)    <span class="comment">//if a is less than 10, add 0 before it</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>声明：<code>function f(param = default) &#123; return val &#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addTwo</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">addTwo</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// Output: 5</span></span><br></pre></td></tr></table></figure><p><code>this</code> 指向调用它的对象，严格模式下无调用者：undefined</p><p><strong>回调函数</strong>：作为参数被传递的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(call, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);   <span class="comment">// 仅一次性执行</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p><code>let fn = function(param) &#123; body &#125;</code></p><p><strong>立即执行</strong></p><p><code>(function()&#123; &#125;)()</code> 或 <code>(function()&#123; &#125;())</code></p><p>需要分号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y) &#125;(<span class="number">2</span>, <span class="number">7</span>)); <span class="comment">// Output: 9</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><code>let fn = (param) =&gt; &#123; body &#125;</code></p><p>仅有一个参数&#x2F;语句，可省略括号&#x2F;return</p><p>无this：指向父级作用域（全局window）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; x+<span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>))  <span class="comment">// Output: 3</span></span><br></pre></td></tr></table></figure><p>用于返回对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = uname =&gt; (&#123; <span class="attr">name</span>: uname, <span class="attr">age</span>: <span class="number">25</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">fn</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);    <span class="comment">// Output: &#123; name: &quot;John&quot;, age: 25 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><p>用<code>...args</code>表示，放在最后…不写就是arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// Output: 9</span></span><br></pre></td></tr></table></figure><p><strong>参数解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y) <span class="comment">// Output: 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = &#123;<span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age) <span class="comment">// Output: Alex 25</span></span><br></pre></td></tr></table></figure><h3 id="动态指向函数"><a href="#动态指向函数" class="headerlink" title="动态指向函数"></a>动态指向函数</h3><p>手动指定函数中的 this</p><ul><li>call() 与 apply() 类似，但第一个参数为调用者对象 <code>func.call(thisArg, args...)</code></li><li>apply() 形参为数组 <code>func.apply(thisArg, [argsArray])</code></li><li>bind() 返回一个新的函数，可以指定参数 <code>const boundFunc = func.bind(thisArg, args...)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">call</span>(person1)); <span class="comment">// 输出: Hello, Alice</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">call</span>(person2)); <span class="comment">// 输出: Hello, Bob</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr), <span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)); <span class="comment">// Output: 5 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greetPerson = greeting.<span class="title function_">bind</span>(person1); <span class="comment">// 绑定 person1 的 this 到 greeting 函数上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greetPerson</span>()); <span class="comment">// Output: Hello, Alice</span></span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li><code>throw</code> 手动抛出异常，终止程序执行；要配合ERROR对象使用</li><li><code>try...catch</code> 捕获异常（由浏览器或其他代码抛出）拦截但不中断程序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Cannot divide by zero&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">divide</span>(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;    <span class="comment">// 无论是否有异常都会执行</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Finally block&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>debugger</code> 断点调试，在浏览器中运行</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>无序的数据集合</p><ul><li><strong>属性</strong>：属性名+值 成对出现 用<code>,</code>分隔</li><li><strong>方法</strong>：函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">  <span class="attr">u_name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">u_name</span> + <span class="string">&quot; and I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">stu.<span class="title function_">greet</span>(); <span class="comment">// Output: Hello, my name is John and I am 25 years old.</span></span><br><span class="line"></span><br><span class="line">stu.<span class="property">address</span> = <span class="string">&quot;123 Main St&quot;</span>;</span><br><span class="line"><span class="keyword">delete</span> stu.<span class="property">age</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu); <span class="comment">// Output: &#123;name: &quot;John&quot;, address: &quot;123 Main St&quot;&#125;</span></span><br></pre></td></tr></table></figure><ol><li>增加新属性&#x2F;修改属性：<code>obj.attr = val</code></li><li>删除：<code>delete obj.attr</code></li></ol><p>查询可用 <code>obj[&#39;attr&#39;]</code> 属性名为字符串 attr为变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;o-name&#x27;</span>: <span class="string">&#x27;Object 1&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;o-name&#x27;</span>]); <span class="comment">// Output: Object 1</span></span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>创建多个对象，相同属性 <strong>没有Class…</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name = <span class="string">&quot;John&quot;</span>, age</span>) &#123;      <span class="comment">// Constructor function：Capitalize first letter of each word </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">numberOfPeople</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">numberOfPeople</span> = <span class="number">0</span>;       <span class="comment">// Static property: Number of instances created</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reportNumberOfPeople</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Total number of people: <span class="subst">$&#123;Person.numberOfPeople&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="literal">undefined</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// Output: John</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">reportNumberOfPeople</span>(); <span class="comment">// Output: Total number of people: 1</span></span><br></pre></td></tr></table></figure><p><strong>静态成员&#x2F;方法</strong></p><p>写在构造函数外面，所有实例共享</p><p>常用静态方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Mary&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2)); <span class="comment">// Output: [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj2)); <span class="comment">// Output: [&quot;Mary&quot;, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, &#123; <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;);   <span class="comment">// Copy all properties from one object to obj2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// Output: &#123; name: &#x27;Mary&#x27;, age: 25, gender: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h4><p>构造函数的属性 指向实例：<br>所有实例共享，所有实例都可以访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Sta</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Sta</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;     <span class="comment">// prototype defines method for all instances</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span> + <span class="number">3</span>;      <span class="comment">// this refers to the instance 实例对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yzx = <span class="keyword">new</span> <span class="title class_">Sta</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yzx.<span class="title function_">sum</span>()); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><strong>constructor属性：</strong> 反过来指向构造函数</p><p><strong>原型链:</strong> 基于构造函数原型的继承链；调用方法时，逐级再往上找</p><ul><li><p><code>yzx.__proto__ === Sta.prototype</code></p></li><li><p><code>Sta.prototype.constructor === Sta</code></p></li><li><p><code>Sta.prototype.__proto__ === Object.prototype</code></p></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>通过原型继承的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ears</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mouth</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// Woman.prototype inherits from Person.prototype</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span>;</span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">baby</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Have a baby&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w); <span class="comment">// Woman &#123;eyes: 2, ears: 2, mouth: 1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">__proto__</span>); <span class="comment">// Person &#123;constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure><p><code>instanceof</code> 运算符：检测对象是否在某个构造函数的原型链上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yzx <span class="keyword">instanceof</span> <span class="title class_">Sta</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Sta</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><code>for (let key in obj)</code> 语法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> stu) &#123;  <span class="comment">// Iterate over the object&#x27;s properties</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;: &quot;</span> + stu[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// name: John</span></span><br><span class="line"><span class="comment">// age: 25</span></span><br><span class="line"><span class="comment">// address: 123 Main St </span></span><br></pre></td></tr></table></figure><h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><p>同名变量赋值 <code>旧变量名：新变量名</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: user, age&#125; = &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user, age); <span class="comment">// Output: John 25</span></span><br></pre></td></tr></table></figure><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><ul><li>浅拷贝：仅复制一层，不包含后代元素</li><li>深拷贝：复制所有后代元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">obj</span>) &#123;            <span class="comment">// 递归实现</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj === <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj)</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key))</span><br><span class="line">            res[key] = <span class="title function_">copy</span>(obj[key]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res.<span class="property">key</span> = obj[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = _.<span class="title function_">cloneDeep</span>(obj1);    <span class="comment">// lodash.js库实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));   <span class="comment">// JSON 实现深拷贝</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>日期对象</strong></p><p>获取 <code>let date = new Date()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2021-01-01 12:00:00 AM UTC +00:00&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleDateString</span>()); <span class="comment">// &quot;1/1/2021&quot;</span></span><br></pre></td></tr></table></figure><p>时间戳：毫秒，since 1970-01-01</p><h2 id="WebAPIs"><a href="#WebAPIs" class="headerlink" title="WebAPIs"></a>WebAPIs</h2><p>用<code>const</code>声明变量（对象）</p><ol><li>DOM树：树结构表达 HTML 文档<ul><li>根节点为document对象</li></ul></li><li>DOM对象：包含所有属性、事件等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(div)</span><br></pre></td></tr></table></figure><h3 id="获取DOM元素"><a href="#获取DOM元素" class="headerlink" title="获取DOM元素"></a>获取DOM元素</h3><p>返回匹配指定CSS选择器的第一个元素：<code>querySelector(&#39;nav&#39;)</code></p><p>返回伪数组，可以遍历；<code>document.querySelectorAll()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>)  <span class="comment">// get element by id</span></span><br><span class="line"><span class="keyword">const</span> n2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;#&#x27;</span>)  <span class="comment">// get all elements by class name</span></span><br><span class="line"><span class="keyword">const</span> n3 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;n&#x27;</span>)  <span class="comment">// get all elements by tag name</span></span><br></pre></td></tr></table></figure><h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><ul><li><code>innerHTML</code>：会解析HTML标签</li><li><code>innerText</code>：仅文本字符串</li><li><code>className</code>：更改CSS类</li><li><code>classLis</code>：<strong>追加&#x2F;删</strong>CSS类</li></ul><p>H5自定义属性 <code>data-xxx</code> DOM 中dateset对象</p><pre><code>&lt;p id=&quot;nav&quot; data-id=&quot;77&quot;&gt;Navigation&lt;/p&gt;const nav = document.getElementById(&#39;nav&#39;)console.log(nav.dataset.id)   // 77 get data-id attribute value</code></pre><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>添加方法 <code>addEventListener(event, func)</code></p><p>另一种写法 <code>.onclick</code> 无捕获</p><p><strong>事件类型</strong></p><ol><li>鼠标<ul><li><code>click</code> 点击</li><li><code>mouseenter</code> 经过</li><li><code>mouseleave</code> 离开</li><li><code>mouseover</code> 和 <code>mouseout</code> 有冒泡效果（不推荐）</li></ul></li><li>焦点<ul><li><code>focus</code> 获得</li><li><code>blur</code> 失去</li></ul></li><li>键盘<ul><li><code>keydown</code> 按下</li><li><code>keyup</code> 弹起</li></ul></li><li>文本<ul><li><code>text</code> 文本输入</li></ul></li></ol><p><strong>事件对象</strong>：事件触发的信息，func第一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b3.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)   <span class="comment">// event object</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Enter&#x27;</span>)    <span class="comment">//按回车</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>属性</p><ul><li>type: 事件类型</li><li>key: 按下的键</li></ul><p><strong>环境对象</strong>：this 变量 指向调用它的元素&#x2F;对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b3.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)    <span class="comment">// button element &lt;button id=&quot;b3&quot;&gt;Click me&lt;/button&gt;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>阶段：捕获+<strong>冒泡</strong>（默认）</p><p>捕获顺序：Document -&gt; Super_box -&gt;Sub-content 从外到内</p><p>不加 <code>true</code> 则冒泡，顺序相反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;super&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sub-content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> superBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.super&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sub = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.sub&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Document clicked&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">superBox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Super-box clicked&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">sub.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Sub-content clicked&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><strong>阻止冒泡</strong>：避免影响父级元素</p><p>修改子类 <code>.stopPropagation</code> 后，仅有Sub-content事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sub.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Sub-content clicked&#x27;</span>)</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()   <span class="comment">// stop event bubbling</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>.preventDefault()</code> 阻止默认行为</p><p><strong>解除绑定</strong></p><ul><li><code>on-click = null</code> </li><li><code>removeEventListener(event, func)</code> 不能是匿名函数</li></ul><p><strong>委托</strong></p><p>冒泡到父元素，减少注册次数</p><p>真正的触发元素：<code>e.target</code> 事件对象</p><p><strong>页面事件</strong></p><p>页面动作，执行回调函数</p><ul><li><code>load</code>：页面加载</li><li><code>scroll</code>：滚动</li><li><code>resize</code>：窗口尺寸变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Page loaded&#x27;</span>)          <span class="comment">// window load event</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM content loaded&#x27;</span>)   <span class="comment">// DOM fully loaded</span></span><br><span class="line">&#125;)                              <span class="comment">//faster than window.onload</span></span><br><span class="line"></span><br><span class="line">img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Image loaded&#x27;</span>)        <span class="comment">// 等待图片加载完成</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Window scrollX <span class="subst">$&#123;<span class="variable language_">window</span>.scrollX&#125;</span> scrollY <span class="subst">$&#123;<span class="variable language_">window</span>.scrollY&#125;</span>`</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Document scrollX <span class="subst">$&#123;<span class="variable language_">document</span>.documentElement.scrollLeft&#125;</span> scrollY <span class="subst">$&#123;<span class="variable language_">document</span>.documentElement.scrollTop&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取元素尺寸</p><ul><li><code>clientWidth</code> 和 <code>clientHeight</code>：border之内的宽高 可更改</li><li><code>offsetHeight</code> 包括border 只读</li></ul><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><p>节点：&lt;元素&gt;</p><p><strong>基于关系查找节点</strong></p><ul><li>父节点：<code>.parentNode</code></li><li>子节点：<code>.children</code> 包含所有节点的伪数组</li><li>姐妹节点<ul><li><code>.previousElementSibling</code> 上一个</li><li><code>.nextElementSibling</code>下一个</li></ul></li></ul><p><strong>创建、追加节点</strong> <code>createElement()</code></p><pre><code>const dd = document.createElement(&#39;div&#39;);dd.innerHTML = &#39;dd&#39;;superDiv.appendChild(dd);      //到最后的子元素superDiv.insertBefore(dd, superDiv.children[1]);</code></pre><p><strong>克隆节点</strong> <code>.cloneNode(true)</code> 深&#x2F;浅克隆（是否包含后代元素）</p><p><strong>删除节点</strong> 经过父元素</p><pre><code>superDiv.removeChild(superDiv.children[0]); // remove first child</code></pre><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><code>location</code>：URL地址<ul><li><code>search</code> 参数，<code>?</code>后面部分</li><li><code>hash</code> 哈希，<code>#</code>后面部分</li><li><code>reload()</code> 刷新</li></ul></li><li><code>navigator</code>：浏览器平台信息</li><li><code>history</code>：历史操作<ul><li>back()：后退</li><li>forward()：前进</li><li>go(n)：进&#x2F;退n步</li></ul></li></ul><p><strong>localStorage</strong>本地存储</p><p>键值对；仅字符串</p><p>对象转换成JSON：<code>JSON.stringify(obj)</code></p><ul><li>setItem()：增&#x2F;改</li><li>removeItem()：删</li><li>log()：查</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>); <span class="comment">// https://www.example.com/path/to/page.html</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// value</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// remove ite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="keyword">const</span> person = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// Alex</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>Asynchronous JavaScript and XML 局部更新</p><ul><li><code>fetch()</code>：异步请求，返回Promise对象</li><li><code>XMLHttpRequest</code>：同步&#x2F;异步请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>);</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request failed.  Returned status of&#x27;</span>+ xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>基于Promise的HTTP客户端，支持浏览器和Node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">   .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">   .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>异步操作的完成状态，不可变</p><ul><li>待定：（初始状态）<code>pending</code></li><li>成功：<code>resolve(value)</code></li><li>失败：<code>reject(error)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="comment">// promise对象</span></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* success */</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// failure</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><p><code>.then()</code> 返回一个新的Promise对象，串联下一环任务，避免嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简洁的Promise异步：<code>async</code>关键字，可以用<code>await</code>等待结果：会阻塞后面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure><h4 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h4><ul><li><code>Promise.all()</code>：等待所有Promise都成功</li><li><code>Promise.race()</code>：等待第一个Promise成功</li><li><code>Promise.resolve()</code>：将现有值转换为Promise</li><li><code>Promise.reject()</code>：创建失败的Promise</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>阻止频繁触发函数，禁用一段时间，延迟执行</p><p>loDash库实现：<code>_.debounce(func, wait, [options])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(func , wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>单位时间执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeout;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">500</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;一种脚本语言，可用于HTML和Web，更可广泛用于服务器等领域。&lt;/p&gt;
&lt;p&gt;组成：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ECMAScript&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="http://example.com/2024/05/18/Python%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/05/18/Python%E7%AC%94%E8%AE%B0/</id>
    <published>2024-05-18T12:29:55.000Z</published>
    <updated>2024-07-18T01:44:33.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>解释器</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;hello, python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li>int</li><li>float</li><li>string</li></ul><p>查看类型：<code>type(8963) = int_type</code></p><p><strong>注解</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">b: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>] = <span class="number">1.2</span></span><br></pre></td></tr></table></figure><p>联合类型注解：int 或 float</p><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>命名只能出现：</p><ol><li>英文</li><li>中文（不推荐）</li><li>数字（不位于开头）</li><li>下划线</li></ol><ul><li>不能是关键字</li><li><strong>大小写敏感</strong></li></ul><p>规范：<br>下划线_小写英文</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>&#x2F;&#x2F; ：整除 <code>11/2 == 5</code></li><li>** ：指数 <code>2**3 == 8</code></li><li>可使用<code>a+=b</code>简写</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>定义方式： 单引号，双引号，三引号（支持换行）</p><p><strong>转义字符：</strong> <code>\&quot;</code> 引号解除引用</p><p>拼接：<code>+</code>号</p><p><strong>格式化</strong> <code>%s</code> 占位符</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">114514</span></span><br><span class="line">name = <span class="string">&quot;Tim&quot;</span></span><br><span class="line">message = <span class="string">&quot;Today I am %d years elder than %s&quot;</span> %(age, name)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>快速写法 <code>f&quot;内容&#123;变量&#125;&quot;</code>：不限数据类型，不控制精度<br> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Alex&quot;</span></span><br><span class="line">year = <span class="number">1789</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我是<span class="subst">&#123;name&#125;</span>, 出生于<span class="subst">&#123;year&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p><h4 id="精度控制"><a href="#精度控制" class="headerlink" title="精度控制"></a>精度控制</h4><p><code>%m.nf</code> m：控制宽度；n控制小数精度，<strong>四舍五入</strong>。</p><h2 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&#x2F;输出"></a>输入&#x2F;输出</h2><p>中断，从键盘输入： <code>name = input(&quot;Enter your name:&quot;)</code></p><h2 id="条件-循环"><a href="#条件-循环" class="headerlink" title="条件&#x2F;循环"></a>条件&#x2F;循环</h2><p>bool数据类型：True&#x2F;False</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b1 = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b1))     <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>比较运算符：&#x3D;&#x3D;, !&#x3D;, &lt;, &gt;&#x3D;</p><p>逻辑否定: <code>if not A:</code></p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>格式（缩进）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter your age&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a1 &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adult only:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(a1-<span class="number">18</span>)</span><br><span class="line"><span class="keyword">elif</span> a1 &gt; <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your are too old&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your are too young&quot;</span>)</span><br></pre></td></tr></table></figure><p>多个组合：<code>elif</code></p><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slogan = <span class="string">&quot;Free China&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> slogan:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>range语句：</p><ul><li><code>range(num)</code>: 序列, 从0到num-1的整数</li><li><code>range(num1, num2, step)</code>: 该序列从num1开始，到num2结束（不包括num2），步长为step．</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 13</span></span><br></pre></td></tr></table></figure><p><strong>临时变量作用域</strong>: 循环外部也可以用, 有warning</p><h4 id="跳过-中断"><a href="#跳过-中断" class="headerlink" title="跳过&#x2F;中断"></a>跳过&#x2F;中断</h4><ul><li><code>continue</code> 中断, 进入下一次循环</li><li><code>break</code> 结束循环</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h4 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">x, y</span>):</span><br><span class="line">    body</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">one = function(a, b)</span><br></pre></td></tr></table></figure><p>默认返回值: None, 类型: &lt;class ‘NoneType’&gt; <strong>假</strong></p><p>例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_len</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    求字符串长度的函数</span></span><br><span class="line"><span class="string">    :param data: 传入参数字符串</span></span><br><span class="line"><span class="string">    :return: 返回结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;We have <span class="subst">&#123;n&#125;</span> letter(s) in <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_len(<span class="string">&quot;eraser&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_len(<span class="string">&quot;administration&quot;</span>)))</span><br></pre></td></tr></table></figure><p>说明文档 <strong>docstrings</strong>: 多行注释,自动生成: <code>:param data:</code> <code>:return: </code></p><p>函数内全局变量赋值: 用<code>globa</code>关键字</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(): </span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>多返回值</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_test())</span><br><span class="line"><span class="comment"># (1, 2)</span></span><br></pre></td></tr></table></figure><p>类型： <code>&lt;class &#39;tuple&#39;&gt;</code></p><h2 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h2><ul><li>位置参数：根据定义的参数个数、位置一致</li><li>关键字参数：key&#x3D;value 无顺序 *args</li><li>参数缺省：定义默认值，<strong>位置在最后</strong></li><li>不定长参数：<ul><li>*args  一个元组</li><li>**kwarg 键值对 参数组成字典</li></ul></li><li>调用时：<ul><li>*容器 unpack成位置参数</li><li>**容器 字典-&gt; 关键字参数</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_test2</span>(<span class="params">name, num, isTrue=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>, the num is <span class="subst">&#123;num&#125;</span> and it&#x27;s <span class="subst">&#123;isTrue&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func_test2(<span class="string">&quot;Tom&quot;</span>, isTrue=<span class="literal">False</span>, num=<span class="number">114154</span>)</span><br><span class="line"></span><br><span class="line">func_test2(<span class="string">&quot;Jey&quot;</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test3</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The args is <span class="subst">&#123;args&#125;</span>, the K-W args is <span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func_test3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, stu_name=<span class="string">&quot;Alex&quot;</span>, age=<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Aniki</span>(<span class="params">a, *b, **c</span>):</span><br><span class="line">    z = [a, b, c]</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="comment"># a:一个位置参数 b:元组 c:所有键值对</span></span><br><span class="line"></span><br><span class="line">Aniki(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;b&quot;</span>, x=<span class="string">&quot;123&quot;</span>, y=<span class="string">&quot;456&quot;</span>)</span><br><span class="line"><span class="comment"># [1, (2, &#x27;b&#x27;), &#123;&#x27;x&#x27;: &#x27;123&#x27;, &#x27;y&#x27;: &#x27;456&#x27;&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="强制位参数"><a href="#强制位参数" class="headerlink" title="强制位参数"></a>强制位参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, /, c, d, *, e, f</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c, d, e, f)</span><br></pre></td></tr></table></figure><p>形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>关键字 lambda <strong>临时使用一次</strong></p><p><code>引用 = lambda 参数列表:表达式</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x*x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在一个函数内部定义另外一个函数，并且把这个函数对象作为返回值</p><p><strong>需要使用外层函数的变量（包括参数）</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">increment</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x:x+n</span><br><span class="line"></span><br><span class="line">f=increment(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">10</span>))    <span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p><code>nonlocal</code> 外部变量</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>给函数增加新功能，不改变原函数</p><p>目标函数前 <code>@outer_decorator</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):    <span class="comment"># 装饰器函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):    <span class="comment"># 装饰器包裹函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)    <span class="comment"># 调用被装饰函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator    </span><span class="comment"># 装饰器调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="string">&quot;Tom&quot;</span>)    <span class="comment"># 输出 Before function call Hello Tom After function call</span></span><br></pre></td></tr></table></figure><p><strong>多个装饰器</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call 2&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call 2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="meta">@my_decorator2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="string">&quot;Tom&quot;</span>)    <span class="comment"># 输出 Before function call 2 Before function call Hello Tom After function call 2 After function call 2</span></span><br></pre></td></tr></table></figure><h2 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h2><p>各种数据结构</p><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h4><p><code>my_list = [&#39;Alex&#39;, &#39;Bob&#39;, True, [1, 2, 3]]</code></p><ul><li>元素可以<strong>异类型</strong>, 支持嵌套, <strong>可重复</strong></li><li><strong>有序</strong>: 下标索引 0, 1, 2, 3……</li><li>下标索引(反向) ……-3, -2, -1</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(my_list[<span class="number">1</span>], my_list[-<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line"><span class="comment"># Bob 1</span></span><br></pre></td></tr></table></figure><p><strong>方法</strong></p><ol><li><strong>查询下标</strong>: 返回索引, 不存在则报错</li><li><strong>修改元素</strong>: 指定下标</li><li><strong>插入元素</strong>: 指定下标, 指定元素</li><li><strong>追加</strong>: 元素(容器)放到尾部 extend([29, 11])</li><li><strong>删除</strong>: <ul><li>del</li><li>pop() 默认最后一个元素</li><li>remove(a) 从前到后, 仅删一个</li></ul></li><li><strong>统计</strong>: count(元素)</li><li><strong>统计总数</strong>: len(my_list)</li><li><strong>清空</strong>: clear()</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">index = my_list.index(<span class="string">&quot;Alex&quot;</span>)     <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">my_list[<span class="number">0</span>] = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"></span><br><span class="line">my_list.insert(<span class="number">2</span>, <span class="string">&quot;Charlie&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_list.append(<span class="string">&#x27;final&#x27;</span>)</span><br><span class="line">my_list.extend(list2)</span><br><span class="line"><span class="comment"># [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, 2022, True, [1, 2, 3], &#x27;final&#x27;, 1949, 1989, 2019]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> list2[<span class="number">2</span>]    <span class="comment"># [1949, 1989]</span></span><br><span class="line"></span><br><span class="line">elem = my_list.pop(<span class="number">3</span>)    <span class="comment"># 2022</span></span><br><span class="line"></span><br><span class="line">my_list.remove(<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, [1, 2, 3], &#x27;final&#x27;, 1949, 1989, 2019]</span></span><br><span class="line"></span><br><span class="line">list2.insert(<span class="number">1</span>, <span class="number">1989</span>)</span><br><span class="line">dup = list2.count(<span class="number">1989</span>)    <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">len</span>(my_list)    <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">my_list.clear()</span><br><span class="line"><span class="comment"># my_list == []</span></span><br></pre></td></tr></table></figure><p><strong>迭代</strong></p><p>while循环:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(my_list):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;my_list[i]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>for循环(依次序): </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="built_in">print</span>(ele)</span><br></pre></td></tr></table></figure><h4 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h4><p><strong>不可修改</strong>的list</p><p><code>my_tuple = (1, &quot;Hello&quot;, True)</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1 = <span class="built_in">tuple</span>()</span><br><span class="line">t2 = ((), )</span><br></pre></td></tr></table></figure><ul><li>但其中有list可以对内容赋值</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t3 = (<span class="number">1</span>, <span class="string">&quot;NM$L&quot;</span>, [<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Bob&quot;</span>])</span><br><span class="line">t3[-<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="comment"># (1, &#x27;NM$L&#x27;, [&#x27;Alice&#x27;, &#x27;Bob&#x27;])</span></span><br></pre></td></tr></table></figure><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h4><p>任意数量的字符 <strong>不可修改</strong></p><p><code>my_str = &quot;fight for freedom&quot; </code></p><ol><li><strong>替换</strong>: replace(“s0”, “s1”)   s0替换为s1，得到新字符串</li><li><strong>分隔</strong>: split(“s2”) 以s2为间隔切分，装入list中</li><li><strong>规整</strong>: strip(“ “) 去除首尾空格&#x2F;指定字符串</li><li>查找子串出现次数</li><li>获取长度</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;fight for freedom&quot;</span></span><br><span class="line"></span><br><span class="line">new_slogan = my_str.replace(<span class="string">&quot;for&quot;</span>, <span class="string">&quot;with&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_slogan)</span><br><span class="line"><span class="comment"># fight with freedom 替换内容</span></span><br><span class="line"></span><br><span class="line">str_list = my_str.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_list)</span><br><span class="line"><span class="comment"># [&#x27;fight&#x27;, &#x27;for&#x27;, &#x27;freedom&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_str.strip(<span class="string">&#x27;dom&#x27;</span>))</span><br><span class="line"><span class="comment"># fight with free</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="序列-切片"><a href="#序列-切片" class="headerlink" title="序列-切片"></a>序列-切片</h4><p>取出子序列：<code>序列[起始下标:结束下标:步长]</code></p><p>步长为负：反向取</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str9 = <span class="string">&quot;cdefgab&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str9[::<span class="number">2</span>])</span><br><span class="line"><span class="comment"># cegb</span></span><br></pre></td></tr></table></figure><h4 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h4><p>多个数据：无序 <strong>去重</strong> 可修改</p><p><code>my_set = &#123;&quot;Alex&quot;, &quot;Bob&quot;, &quot;Alex&quot;&#125;</code></p><ol><li><strong>添加元素</strong> add(el)</li><li><strong>移除</strong> remove(el)</li><li><strong>随机取出</strong> pop()</li><li><strong>清空</strong> clear()</li><li><strong>取差集</strong> set1.difference(set2) 得到新集合，为set1有 set2没有的</li><li><strong>交集</strong> set1.union(set2)</li><li>元素数量 len(my_set)</li><li>for 遍历</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alex&quot;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;</span><br><span class="line">my_set.add(<span class="number">564</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># element = my_set.pop()</span></span><br><span class="line"><span class="comment"># print(element)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_set.difference(set2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># my_set.difference_update(set2)</span></span><br><span class="line"><span class="comment"># print(my_set)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_set.union(set2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_set.clear()</span><br></pre></td></tr></table></figure><h4 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h4><p>key-value <strong>键值对</strong> </p><p>原生：通过key值找value <strong>key唯一</strong> </p><p><code>my_dict = &#123;&quot;Alex&quot;: 564, &quot;Bob&quot;: 8963, &quot;Charlie&quot;: 1918&#125;</code></p><p>value可嵌套</p><ol><li><strong>新增&#x2F;更新</strong> dict[‘A’] &#x3D; 123</li><li><strong>删除</strong> pop(‘B’)</li><li><strong>清空</strong> clear()</li><li><strong>取全部key</strong> keys() 是list</li><li><strong>遍历</strong> for</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&quot;Alex&quot;</span>: <span class="number">564</span>, <span class="string">&quot;Bob&quot;</span>: <span class="number">8963</span>, <span class="string">&quot;Charlie&quot;</span>: <span class="number">1918</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&quot;Alex&quot;</span>])</span><br><span class="line"><span class="comment"># 564</span></span><br><span class="line"></span><br><span class="line">stu_dict = &#123;<span class="string">&quot;Alex&quot;</span>: &#123;<span class="string">&quot;ch&quot;</span>: <span class="number">99</span>, <span class="string">&quot;Math&quot;</span>: <span class="number">101</span>, <span class="string">&quot;English&quot;</span>: <span class="number">120</span>&#125;, <span class="string">&quot;Bob&quot;</span>: &#123;<span class="string">&quot;ch&quot;</span>: <span class="number">101</span>, <span class="string">&quot;Math&quot;</span>: <span class="number">111</span>, <span class="string">&quot;English&quot;</span>: <span class="number">121</span>&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(stu_dict[<span class="string">&quot;Alex&quot;</span>][<span class="string">&quot;ch&quot;</span>])</span><br><span class="line"><span class="comment"># 99</span></span><br><span class="line"></span><br><span class="line">my_dict[<span class="string">&quot;Daniel&quot;</span>] = <span class="number">116</span></span><br><span class="line"><span class="built_in">print</span>(my_dict)</span><br><span class="line"><span class="built_in">print</span>(my_dict.pop(<span class="string">&quot;Alex&quot;</span>))</span><br><span class="line"><span class="comment"># 564</span></span><br><span class="line"></span><br><span class="line">keys = <span class="built_in">list</span>(my_dict.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="built_in">print</span>(keys)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> my_dict:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>: <span class="subst">&#123;my_dict[k]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="容器通用操作"><a href="#容器通用操作" class="headerlink" title="容器通用操作"></a>容器通用操作</h4><ul><li><strong>元素个数</strong> len(my_list)</li><li><strong>最大&#x2F;小元素</strong> max(my_dict)</li><li><strong>类型转换</strong> 不能转换成字典 list(my_set)</li><li><strong>排序</strong> sorted(my_list, [顺序])<ul><li>返回list</li><li>降序 <code>reverse=True</code></li></ul></li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>open函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;file_test&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数mode:</p><ul><li>‘r’: 只读，指针在文件开头</li><li>‘w’: （创建）并写入，若文件不存在则覆盖</li><li>‘a’: 追加，文件不存则创建</li></ul><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = f.read(<span class="number">10</span>)</span><br><span class="line">content = f.readlines() <span class="comment"># 读取全部内容；一个列表，元素为每行内容</span></span><br></pre></td></tr></table></figure><p>read()参数：</p><ul><li>数据长度（字节）</li><li>缺省为全部读取</li></ul><p>readlines()：</p><ol><li>读取全部内容</li><li>一个列表，元素为每行内容</li></ol><p>readline()</p><ul><li>一次仅读一行</li></ul><p><strong>for 循环读取</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;./file_test&#x27;</span>, <span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>临时变量 <code>l</code></p><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><p>flush 刷新缓冲区：主存-&gt;磁盘</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f = open(&#x27;./file_test&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for i in range(10):</span></span><br><span class="line"><span class="comment">#     f.write(f&#x27;hello world &#123; i &#125;\n&#x27;)</span></span><br><span class="line"><span class="comment"># f.flush()</span></span><br><span class="line"><span class="comment"># f.close()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./file_test&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        f.write(<span class="string">f&#x27;hello world <span class="subst">&#123;i&#125;</span>\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>解除占用</p><p><code>f.close()</code></p><p><strong>with open 语法</strong></p><p>执行完自动关闭</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./file_test&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.readlines()</span><br></pre></td></tr></table></figure><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>try&#x2F;except 语句</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;执行的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;处理异常的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常&quot;</span>)</span><br></pre></td></tr></table></figure><p>多个&#x2F;特定异常：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;执行的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;处理异常的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finished, goodbye&quot;</span>)</span><br></pre></td></tr></table></figure><p>顶级异常: <strong>Exception</strong></p><p>从内向外传递，每层都可捕获</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p> <code>import</code> 模块名</p><p>模块的名称：<code>__name__</code>内置变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>限制可被 import * 的内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&quot;mun&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br></pre></td></tr></table></figure><p>package.module</p><p>具有__init__.py 的文件</p><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><ul><li>成员变量</li><li>成员方法 (self, )</li></ul><p><strong>私有成员</strong>：<code>__private_method</code> 两个下划线开头</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>内置的方法：魔术方法</p><p>赋值：自动执行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, </span>):</span><br><span class="line">    self.data = []</span><br><span class="line">    self.name = name</span><br></pre></td></tr></table></figure><p>重写str：一个对象成为<code>print()</code>函数参数输出的内容</p><p>print 输出的默认是内存地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="keyword">return</span> <span class="string">f&quot;This is a xxx object!&quot;</span></span><br></pre></td></tr></table></figure><p>重写对象之比较大小</p><ul><li><code>__lt__</code>：&lt;</li><li><code>__le__</code>：&lt;&#x3D;</li><li><code>__eq__</code>：&#x3D;&#x3D;</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>可多继承</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>(BaseClass1, BaseClass2):</span><br><span class="line"><span class="comment"># 父类方法名：左边最优先</span></span><br></pre></td></tr></table></figure><p><code>pass</code> 补全 空的代码块</p><p>可在子类中复写</p><p>调用父类成员：<code>super().method()</code> 或 <code>BaseClass.method(self)</code></p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>父类引用子类对象，调用子类方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;解释器&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://example.com/2024/05/14/My-New-Post/"/>
    <id>http://example.com/2024/05/14/My-New-Post/</id>
    <published>2024-05-14T04:24:07.000Z</published>
    <updated>2024-05-14T06:56:58.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="This-is-my-new-post"><a href="#This-is-my-new-post" class="headerlink" title="This is my new post"></a>This is my new post</h3><p>This is the content of my new post.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;This-is-my-new-post&quot;&gt;&lt;a href=&quot;#This-is-my-new-post&quot; class=&quot;headerlink&quot; title=&quot;This is my new post&quot;&gt;&lt;/a&gt;This is my new post&lt;/h3&gt;&lt;p&gt;Th</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2024/05/12/hello-world/"/>
    <id>http://example.com/2024/05/12/hello-world/</id>
    <published>2024-05-12T04:58:31.517Z</published>
    <updated>2024-05-12T04:58:31.517Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
