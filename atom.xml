<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alexiang&#39;s Blog</title>
  
  <subtitle>A little bit of everything</subtitle>
  <link href="https://alexiangyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://alexiangyu.github.io/"/>
  <updated>2025-01-06T16:22:10.632Z</updated>
  <id>https://alexiangyu.github.io/</id>
  
  <author>
    <name>Alexiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最大子段和</title>
    <link href="https://alexiangyu.github.io/2025/01/06/lc/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    <id>https://alexiangyu.github.io/2025/01/06/lc/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/</id>
    <published>2025-01-06T15:59:26.000Z</published>
    <updated>2025-01-06T16:22:10.632Z</updated>
    
    <content type="html"><![CDATA[<p><del>在洛谷做的第一道题qwq</del></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个长度为 $n$ 的序列 $a$，选出其中连续且非空的一段使得这段和最大。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是一个整数，表示序列的长度 $n$。</p><p>第二行有 $n$ 个整数，第 $i$ 个整数表示序列的第 $i$ 个数字 $a_i$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数表示答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2 -4 3 -1 2 -4 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h4 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h4><p>选取 $[3, 5]$ 子段 ${3, -1, 2}$，其和为 $4$。</p><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li>对于 $40%$ 的数据，保证 $n \leq 2 \times 10^3$。</li><li>对于 $100%$ 的数据，保证 $1 \leq n \leq 2 \times 10^5$，$-10^4 \leq a_i \leq 10^4$。</li></ul><hr><h2 id="我的答案"><a href="#我的答案" class="headerlink" title="我的答案"></a>我的答案</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">int</span> n, j, sum, maxx;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;maxx);</span><br><span class="line">sum=maxx;</span><br><span class="line">    <span class="keyword">while</span>(--n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;j);</span><br><span class="line">sum=sum&gt;<span class="number">0</span>?sum:<span class="number">0</span>;</span><br><span class="line">sum+=j;</span><br><span class="line">maxx=maxx&gt;sum?maxx:sum;</span><br><span class="line">&#125;   <span class="comment">//贪心，如果负了就舍去 </span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,maxx))&amp;<span class="number">0</span>;<span class="comment">//输出并return 0 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;del&gt;在洛谷做的第一道题qwq&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给出一个长度为 $n$ 的序列 $a$，选出其中连续且非空的一</summary>
      
    
    
    
    <category term="算法题" scheme="https://alexiangyu.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="动态规划" scheme="https://alexiangyu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="前缀和" scheme="https://alexiangyu.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    <category term="分治" scheme="https://alexiangyu.github.io/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>题解</title>
    <link href="https://alexiangyu.github.io/2025/01/06/lc/t0/"/>
    <id>https://alexiangyu.github.io/2025/01/06/lc/t0/</id>
    <published>2025-01-06T15:41:39.000Z</published>
    <updated>2025-01-06T15:47:02.909Z</updated>
    
    <content type="html"><![CDATA[<p>testaaaa</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;testaaaa&lt;/p&gt;
</summary>
      
    
    
    
    <category term="算法题" scheme="https://alexiangyu.github.io/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库系统</title>
    <link href="https://alexiangyu.github.io/2024/11/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    <id>https://alexiangyu.github.io/2024/11/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-11-17T08:05:11.000Z</published>
    <updated>2024-11-18T10:23:35.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CAP-定理"><a href="#CAP-定理" class="headerlink" title="CAP 定理"></a>CAP 定理</h3><p>在分布式系统中，不可能同时满足一致性（Consistency），可用性（Availability）和分区容错性（Partition tolerance），最多只能同时做到两个。</p><ul><li>Consistency（一致性）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。</li><li>Availability（可用性）：在集群中任意节点故障时，仍然可以提供服务。</li><li>Partition tolerance（分区容错性）：分布式系统在遇到网络分区故障时，仍然能够继续运行。</li></ul><h3 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h3><p>BASE 理论是对 CAP 理论的一种扩展，是 NoSQL 数据库通常选择的理论。</p><ul><li>Basically Available（基本可用）：不保证一致性，但保证可用性。</li><li>Soft state（软状态）：允许系统中的数据存在中间状态，并不保证数据的强一致性。</li><li>Eventually consistent（最终一致性）：系统中的数据经过一段时间的同步后，最终达到一致的状态。</li></ul><h3 id="典型问题"><a href="#典型问题" class="headerlink" title="典型问题"></a>典型问题</h3><ul><li>幂等性（Idempotence）某个操作可以执行多次，但执行的效果与执行一次是相同的。</li><li>互斥性（Mutual Exclusion）主要涉及在多个进程或线程并发执行时，对于共享资源的访问控制。互斥性确保在同一时刻只有一个进程能够访问共享资源，从而避免由于并发操作而导致的数据不一致或资源冲突。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;CAP-定理&quot;&gt;&lt;a href=&quot;#CAP-定理&quot; class=&quot;headerlink&quot; title=&quot;CAP 定理&quot;&gt;&lt;/a&gt;CAP 定理&lt;/h3&gt;&lt;p&gt;在分布式系统中，不可能同时满足一致性（Consistency），可用性（Availability）和分区容错</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用LangChain构建LLMs应用</title>
    <link href="https://alexiangyu.github.io/2024/11/09/%E4%BD%BF%E7%94%A8LangChain%E6%9E%84%E5%BB%BALLMs%E5%BA%94%E7%94%A8/"/>
    <id>https://alexiangyu.github.io/2024/11/09/%E4%BD%BF%E7%94%A8LangChain%E6%9E%84%E5%BB%BALLMs%E5%BA%94%E7%94%A8/</id>
    <published>2024-11-09T07:37:33.000Z</published>
    <updated>2025-01-06T06:34:55.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LangChain功能总结"><a href="#LangChain功能总结" class="headerlink" title="LangChain功能总结"></a>LangChain功能总结</h2><ol><li>Model I&#x2F;O </li><li>RAG</li><li>Agent</li><li>Chain (LCEL)</li><li>Memory</li><li>Callbacks</li></ol><p><strong>使用 LCEL</strong></p><p>构造链 LangChain Expression Language 声明式表达方式，轻松组合多个步骤</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chain = prompt | model | output_parser</span><br><span class="line">result = chain.invoke(&#123;<span class="string">&quot;flower&quot;</span>: <span class="string">&quot;玫瑰&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本质上就是对各种大模型提供的API的套壳，是为了方便我们使用这些API，搭建起来的一些框架、模块和接口。</p><blockquote><p>LangChain是一个基于大语言模型（LLMs）用于构建端到端语言模型应用的框架，它可以让开发者使用语言模型来实现各种复杂的任务，例如文本到图像的生成、文档问答、聊天机器人等。LangChain提供了一系列工具、套件和接口，可以简化创建由LLMs和聊天模型提供支持的应用程序的过程。</p></blockquote><p><img src="/image/ff.webp" alt="alt text"></p><h2 id="Model-I-O-过程"><a href="#Model-I-O-过程" class="headerlink" title="Model I&#x2F;O 过程"></a>Model I&#x2F;O 过程</h2><p>输入提示（Format）-&gt; 调用模型（Predict）-&gt; 输出解析（Parse）</p><ol><li>提示模板：使用模型的第一个环节是把提示信息输入到模型中，你可以创建LangChain模板，根据实际需求动态选择不同的输入，针对特定的任务和应用调整输入。</li><li>语言模型：LangChain允许你通过通用接口来调用语言模型。这意味着无论你要使用的是哪种语言模型，都可以通过同一种方式进行调用，这样就提高了灵活性和便利性。</li><li>输出解析：LangChain还提供了从模型输出中提取信息的功能。通过输出解析器，你可以精确地从模型的输出中获取需要的信息，而不需要处理冗余或不相关的数据，更重要的是还可以把大模型给回的非结构化文本，转换成程序可以处理的结构化数据。</li></ol><p>LangChain中支持的三大类语言模型:</p><ol><li>大语言模型（LLM） ，即Text Model，这些模型将文本字符串作为输入，并返回文本字符串作为输出。</li><li>聊天模型（Chat Model），主要代表Open AI的ChatGPT系列模型。这些模型通常由语言模型支持，但它们的 API 更加结构化。具体来说，这些模型将聊天消息列表作为输入，并返回聊天消息。</li><li>文本嵌入模型（Embedding Model），这些模型将文本作为输入并返回浮点数列表，也就是Embedding。而文本嵌入模型如OpenAI的text-embedding-ada-002。文本嵌入模型负责把文档存入向量数据库。</li></ol><p>LangChain Agent（代理）实例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---- Part 0 导入所需要的类</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BlipProcessor, BlipForConditionalGeneration</span><br><span class="line"><span class="keyword">from</span> langchain.tools <span class="keyword">import</span> BaseTool</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- Part I 初始化图像字幕生成模型</span></span><br><span class="line"><span class="comment"># 指定要使用的工具模型（HuggingFace中的image-caption模型）</span></span><br><span class="line">hf_model = <span class="string">&quot;Salesforce/blip-image-captioning-large&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在初始化图像字幕生成模型...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化处理器和工具模型</span></span><br><span class="line"><span class="comment"># 预处理器将准备图像供模型使用</span></span><br><span class="line">processor = BlipProcessor.from_pretrained(hf_model)</span><br><span class="line"><span class="comment"># 然后我们初始化工具模型本身</span></span><br><span class="line">model = BlipForConditionalGeneration.from_pretrained(hf_model)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;初始化图像字幕生成模型成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- Part II 定义图像字幕生成工具类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageCapTool</span>(<span class="title class_ inherited__">BaseTool</span>):</span><br><span class="line">    name = <span class="string">&quot;Image captioner&quot;</span></span><br><span class="line">    description = <span class="string">&quot;使用该工具可以生成图片的文字描述，需要传入图片的URL.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_run</span>(<span class="params">self, url: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="comment"># 下载图像并将其转换为PIL对象</span></span><br><span class="line">        image = Image.<span class="built_in">open</span>(requests.get(url, stream=<span class="literal">True</span>).raw).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        <span class="comment"># 预处理图像</span></span><br><span class="line">        inputs = processor(image, return_tensors=<span class="string">&quot;pt&quot;</span>)</span><br><span class="line">        <span class="comment"># 生成字幕</span></span><br><span class="line">        out = model.generate(**inputs, max_new_tokens=<span class="number">200</span>)</span><br><span class="line">        <span class="comment"># 获取字幕</span></span><br><span class="line">        caption = processor.decode(out[<span class="number">0</span>], skip_special_tokens=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> caption</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_arun</span>(<span class="params">self, query: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;This tool does not support async&quot;</span>)</span><br><span class="line"></span><br><span class="line">agent = initialize_agent(</span><br><span class="line">    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">    tools=[ImageCapTool()],</span><br><span class="line">    llm=ChatOpenAI( model=os.environ.get(<span class="string">&quot;LLM_MODEL_4K_FUNCTION_CALL&quot;</span>), temperature=<span class="number">0</span>),</span><br><span class="line">    verbose=<span class="literal">True</span>,</span><br><span class="line">    handle_parsing_errors=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">img_url = <span class="string">&quot;https://youimg1.c-ctrip.com/target/100v1d000001ej8qh6217.jpg&quot;</span></span><br><span class="line">agent.run(<span class="built_in">input</span>=<span class="string">f&quot;<span class="subst">&#123;img_url&#125;</span>\n请创作合适的中文推广文案&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://python.langchain.com/docs/get_started">API 文档</a></p><h3 id="提示工程"><a href="#提示工程" class="headerlink" title="提示工程"></a>提示工程</h3><p>好的提示（其实也就是好的问题或指示啦），肯定能够让你在调用语言模型的时候事半功倍。</p><blockquote><p>GPT 最佳实践: </p><ol><li>写清晰的指示</li><li>给模型提供参考（也就是示例）</li><li>将复杂任务拆分成子任务</li><li>给GPT时间思考</li><li>使用外部工具</li><li>反复迭代问题</li></ol></blockquote><p>LangChain 提供了多个类和函数，也为各种应用场景设计了很多内置模板，使构建和使用提示变得容易。</p><blockquote><p>LangChain的优势所在：我们只需要定义一次模板，就可以用它来生成各种不同的提示。</p><p><code>PromptTemplate</code> 的 <code>from_template</code> 方法就是将一个原始的模板字符串转化为一个更丰富、更方便操作的 <code>PromptTemplate</code> 对象，这个对象就是LangChain中的提示模板。<br>LangChain中，<code>SemanticSimilarityExampleSelector</code> 对象可以根据语义相似性选择最相关的示例， <code>example_selector</code> 会根据语义的相似度（余弦相似度）找到最相似的示例</p></blockquote><p>提示框架：指令 + 上下文 + 提示输入 + 输出指示器</p><p>GPT-3模型，作为一个大型的自我监督学习模型，通过提升模型规模，实现了出色的<strong>Few-Shot</strong>学习性能。</p><p><img src="/image/357e9ca0ce2b4699a24e3fe512c047ca.webp" alt="alt text"></p><h4 id="使用-Chain-of-Thought"><a href="#使用-Chain-of-Thought" class="headerlink" title="使用 Chain of Thought"></a>使用 Chain of Thought</h4><p>《自我一致性提升了语言模型中的思维链推理能力》：如果生成一系列的中间推理步骤，就能够显著提高大型语言模型进行复杂推理的能力。</p><blockquote><p>Few-Shot CoT 简单的在提示中提供了一些链式思考示例（Chain-of-Thought Prompting），足够大的语言模型的推理能力就能够被增强。简单说，就是给出一两个示例，然后在示例中写清楚推导的过程。</p></blockquote><p>提供思考示例：问题理解 -&gt; 信息搜索 -&gt; 决策制定 -&gt; 生成结果列表</p><blockquote><p>Few-Shot CoT，指的就是在带有示例的提示过程中，加入思考的步骤，从而引导模型给出更好的结果。而 Zero-Shot CoT，就是直接告诉模型要一步一步地思考，慢慢地推理。</p></blockquote><blockquote><p>CoT 应当被用于 20B 以上参数规模的模型之中，并且模型的训练数据应当于任务问题相关且彼此相互有较强的联结。 首从工程的角度而言，CoT 的适用场景抽象一下可以被归纳为三点，分别是使用大模型（1），任务需要复杂推理（2），参数量的增加无法使得模型性能显著提升（3）。此外，现有的论文实验也表明，CoT 更加适合复杂的推理任务，比如计算或编程，不太适用于简单的单项选择、序列标记等任务之中，并且 CoT 并不适用于那些参数量较小的模型（20B以下），在小模型中使用 CoT 非常有可能会造成机器幻觉等等问题。 而从理论角度，一篇来自斯坦福的论文《Why think step-by-step? reasoning emerges from the locality of experience》揭示了<strong>当大模型的训练数据表现出了变量的局部簇结构（Local Clusters of Variables）</strong>时，CoT 将会展现极好的效果。而变量的局部簇主要指训练数据中变量之间有着强的相互作用，相互影响的关系。</p></blockquote><p>需要深度推理的复杂任务：dfs思维树（Tree of Thoughts，ToT）</p><blockquote><p>请你模拟三位出色、逻辑性强的专家合作回答一个问题。每个人都详细地解释他们的思考过程，考虑到其他人之前的解释，并公开承认错误。在每一步，只要可能，每位专家都会在其他人的思考基础上进行完善和建设，并承认他们的贡献。他们继续，直到对问题有一个明确的答案。为了清晰起见，您的整个回应应该是一个Markdown表格。   问题是…</p></blockquote><h3 id="调用-OpenAI-API"><a href="#调用-OpenAI-API" class="headerlink" title="调用 OpenAI API"></a>调用 OpenAI API</h3><ul><li>Text模型：<code>prompt</code> 与 <code>max_tokens</code> 参数控制生成的文本长度。简洁。</li><li>Chat模型：消息角色：<ul><li><code>system</code>：系统消息主要用于设定对话的背景或上下文。这可以帮助模型理解它在对话中的角色和任务。系统消息通常在对话开始时给出。</li><li><code>user</code>：用户消息是从用户或人类角色发出的。它们通常包含了用户想要模型回答或完成的请求。</li><li><code>assistant</code>：助手消息是模型的回复。发送多轮对话中新的对话请求时，可以通过助手消息提供先前对话的上下文。在对话的最后一条消息应始终为用户消息。</li></ul></li></ul><p>响应对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;chatcmpl-2nZI6v1cW9E3Jg4w2Xtoql0M3XHfH&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;object&#x27;</span>: <span class="string">&#x27;chat.completion&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;created&#x27;</span>: <span class="number">1677649420</span>,</span><br><span class="line"> <span class="string">&#x27;model&#x27;</span>: <span class="string">&#x27;gpt-4&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;usage&#x27;</span>: &#123;<span class="string">&#x27;prompt_tokens&#x27;</span>: <span class="number">56</span>, <span class="string">&#x27;completion_tokens&#x27;</span>: <span class="number">31</span>, <span class="string">&#x27;total_tokens&#x27;</span>: <span class="number">87</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;choices&#x27;</span>: [</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;assistant&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;你的花店可以叫做&quot;花香四溢&quot;。&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">    <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span>: <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>text</code>：生成的文本。</li><li><code>finish_reason</code>：模型停止生成的原因，可能的值包括 stop（遇到了停止标记）、length（达到了最大长度）或 temperature（根据设定的温度参数决定停止）。</li><li><code>created</code>：生成响应的时间戳。</li></ul><p>使用OpenAI API</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.environ[&quot;OPENAI_API_KEY&quot;] = &#x27;你的OpenAI API Key&#x27;</span></span><br><span class="line"><span class="comment"># os.environ[&quot;OPENAI_BASE_URL&quot;] = &#x27;OpenAI 的 API URL&#x27;</span></span><br><span class="line"></span><br><span class="line">client = OpenAI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># text = client.invoke(&quot;请给我写一句情人节红玫瑰的中文宣传语&quot;)</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=os.environ.get(<span class="string">&quot;LLM_MODELEND&quot;</span>),</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a creative AI.&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请给我的花店起个名&quot;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    temperature=<span class="number">0.8</span>,</span><br><span class="line">    max_tokens=<span class="number">600</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p>通过 LangChain 调用</p><p>我们只需要定义一次模板，更简洁。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.schema <span class="keyword">import</span> HumanMessage, SystemMessage</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.environ[&quot;OPENAI_API_KEY&quot;] = &#x27;你的OpenAI API Key&#x27;</span></span><br><span class="line"><span class="comment"># os.environ[&quot;OPENAI_BASE_URL&quot;] = &#x27;OpenAI 的 API URL&#x27;</span></span><br><span class="line"></span><br><span class="line">chat = ChatOpenAI(model=os.environ.get(<span class="string">&quot;LLM_MODELEND&quot;</span>), temperature=<span class="number">0.8</span>, max_tokens=<span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">messages = [</span><br><span class="line">    SystemMessage(content=<span class="string">&quot;你是一个很棒的智能助手&quot;</span>),</span><br><span class="line">    HumanMessage(content=<span class="string">&quot;请给我的猫起个名&quot;</span>),</span><br><span class="line">]</span><br><span class="line">response = chat(messages)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><p><strong>预训练+微调的大模型应用模式</strong>：高效、扩展性</p><blockquote><p>微调（Fine-tuning）：对模型的头部或者部分参数根据自己的需要进行适应性的调整，这通常涉及在相对较小的有标注数据集上进行有监督学习，让模型适应特定任务的需求。<br>微调过程相比于从头训练一个模型要快得多，且需要的数据量也要少得多。</p></blockquote><ul><li>预训练：在大规模无标注文本数据上进行模型的训练，学习基本的特征和模式。</li><li>微调：快速地根据特定任务进行优化，使用标注好的数据集，以便模型能针对特定任务进行优化和调整。</li></ul><p>从HuggingFace下载并导入模型使用</p><h3 id="输出解析"><a href="#输出解析" class="headerlink" title="输出解析"></a>输出解析</h3><p>得到清晰的数据结构，方便将解析好的数据存入CSV文档。</p><p>输出解析器类要实现两个核心方法：</p><ul><li><code>get_format_instructions</code>：这个方法需要返回一个字符串，用于指导如何格式化语言模型的输出，告诉它应该如何组织并构建它的回答。</li><li><code>parse</code>：这个方法接收一个字符串（也就是语言模型的输出）并将其解析为特定的数据结构或格式。这一步通常用于确保模型的输出符合我们的预期，并且能够以需要的形式进行后续处理。</li><li><code>parse_with_prompt</code>：这个方法接收一个字符串（也就是语言模型的输出）和一个提示（用于生成这个输出的提示），并将其解析为特定的数据结构。这样，你可以根据原始提示来修正或重新解析模型的输出，确保输出的信息更加准确和贴合要求。</li></ul><blockquote><p>用 <code>output_parser.parse(output)</code> 把模型输出的文案解析成之前定义好的数据格式，也就是一个Python字典，这个字典中包含了 <code>description</code> 和 <code>reason</code> 这两个字段的值。</p></blockquote><p><strong>使用 Pydantic（JSON）解析器</strong>: 数据验证、数据转换</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># os.environ[&quot;OPENAI_API_KEY&quot;] = &#x27;Your OpenAI API Key&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型实例</span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">model = ChatOpenAI(</span><br><span class="line">    model=os.environ.get(<span class="string">&quot;LLM_MODELEND&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------Part 2</span></span><br><span class="line"><span class="comment"># 创建一个空的DataFrame用于存储结果</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(columns=[<span class="string">&quot;flower_type&quot;</span>, <span class="string">&quot;price&quot;</span>, <span class="string">&quot;description&quot;</span>, <span class="string">&quot;reason&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line">flowers = [<span class="string">&quot;玫瑰&quot;</span>, <span class="string">&quot;百合&quot;</span>, <span class="string">&quot;康乃馨&quot;</span>]</span><br><span class="line">prices = [<span class="string">&quot;50&quot;</span>, <span class="string">&quot;30&quot;</span>, <span class="string">&quot;20&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们想要接收的数据格式</span></span><br><span class="line"><span class="keyword">from</span> pydantic.v1 <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlowerDescription</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    flower_type: <span class="built_in">str</span> = Field(description=<span class="string">&quot;鲜花的种类&quot;</span>)</span><br><span class="line">    price: <span class="built_in">int</span> = Field(description=<span class="string">&quot;鲜花的价格&quot;</span>)</span><br><span class="line">    description: <span class="built_in">str</span> = Field(description=<span class="string">&quot;鲜花的描述文案&quot;</span>)</span><br><span class="line">    reason: <span class="built_in">str</span> = Field(description=<span class="string">&quot;为什么要这样写这个文案&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------Part 3</span></span><br><span class="line"><span class="comment"># 创建输出解析器</span></span><br><span class="line"><span class="keyword">from</span> langchain.output_parsers <span class="keyword">import</span> PydanticOutputParser</span><br><span class="line"></span><br><span class="line">output_parser = PydanticOutputParser(pydantic_object=FlowerDescription)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输出格式指示</span></span><br><span class="line">format_instructions = output_parser.get_format_instructions()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出格式：&quot;</span>, format_instructions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------Part 4</span></span><br><span class="line"><span class="comment"># 创建提示模板</span></span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> PromptTemplate</span><br><span class="line"></span><br><span class="line">prompt_template = <span class="string">&quot;&quot;&quot;您是一位专业的鲜花店文案撰写员。</span></span><br><span class="line"><span class="string">对于售价为 &#123;price&#125; 元的 &#123;flower&#125; ，您能提供一个吸引人的简短中文描述吗？</span></span><br><span class="line"><span class="string">&#123;format_instructions&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据模板创建提示，同时在提示中加入输出解析器的说明</span></span><br><span class="line">prompt = PromptTemplate.from_template(</span><br><span class="line">    prompt_template, partial_variables=&#123;<span class="string">&quot;format_instructions&quot;</span>: format_instructions&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印提示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提示：&quot;</span>, prompt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------Part 5</span></span><br><span class="line"><span class="keyword">for</span> flower, price <span class="keyword">in</span> <span class="built_in">zip</span>(flowers, prices):</span><br><span class="line">    <span class="comment"># 根据提示准备模型的输入</span></span><br><span class="line">    <span class="built_in">input</span> = prompt.<span class="built_in">format</span>(flower=flower, price=price)</span><br><span class="line">    <span class="comment"># 打印提示</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;提示：&quot;</span>, <span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模型的输出</span></span><br><span class="line">    output = model.predict(<span class="built_in">input</span>)</span><br><span class="line">    <span class="comment"># 解析模型的输出</span></span><br><span class="line">    parsed_output = output_parser.parse(output)</span><br><span class="line">    parsed_output_dict = parsed_output.<span class="built_in">dict</span>()  <span class="comment"># 将Pydantic格式转换为字典</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将解析后的输出添加到DataFrame中</span></span><br><span class="line">    df.loc[<span class="built_in">len</span>(df)] = parsed_output.<span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出的数据：&quot;</span>, df.to_dict(orient=<span class="string">&quot;records&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>自动修复解析器 <code>OutputFixingParser</code>：调用了原有的PydanticOutputParser，如果失败，它会将格式错误的输出以及格式化的指令传递给大模型，并要求LLM进行相关的修复。</li><li>重试解析器 <code>RetryWithErrorOutputParser</code>：利用大模型的推理能力根据原始提示找回相关信息。</li></ul><p>文档：LangChain中的各种 <a href="https://link.juejin.cn/?target=https://python.langchain.com/docs/modules/model_io/output_parsers/">Output Parsers</a></p><h2 id="Chain"><a href="#Chain" class="headerlink" title="Chain"></a>Chain</h2><blockquote><p>LangChain通过设计好的接口，实现一个具体的链的功能。例如，LLM链（LLMChain）能够接受用户输入，使用 PromptTemplate 对其进行格式化，然后将格式化的响应传递给 LLM。这就相当于把整个 Model I&#x2F;O 的流程封装到链里面；多个链组可以合在一起。</p></blockquote><p>多种类型的预置链：</p><ol><li><strong>LLMChain</strong>：这是最简单的链，主要用于处理基本的对话任务、文本生成等。它将输入文本传递给模型并输出结果。</li><li><strong>SequentialChain</strong>：将多个链顺序调用。每个链的输出可以作为下一个链的输入。</li><li><strong>TransformChain</strong>：对输入进行格式转换、分化</li><li><strong>RouterChain</strong>：根据输入的条件，选择不同的链。</li></ol><p><code>LLMChain</code> 围绕着语言模型推理功能又添加了一些功能，整合了 <code>PromptTemplate</code>、语言模型（LLM或聊天模型）和 <code>Output Parser</code>，相当于把Model I&#x2F;O放在一个链中整体操作。它使用提示模板格式化输入，将格式化的字符串传递给 LLM，并返回 LLM 输出。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入所需的库</span></span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> PromptTemplate, OpenAI, LLMChain</span><br><span class="line"><span class="comment"># 原始字符串模板</span></span><br><span class="line">template = <span class="string">&quot;&#123;flower&#125;的花语是?&quot;</span></span><br><span class="line"><span class="comment"># 创建模型实例</span></span><br><span class="line">llm = OpenAI(temperature=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 创建LLMChain</span></span><br><span class="line">llm_chain = LLMChain(</span><br><span class="line">    llm=llm,</span><br><span class="line">    prompt=PromptTemplate.from_template(template))</span><br><span class="line"><span class="comment"># 调用LLMChain，返回结果</span></span><br><span class="line">result = llm_chain(<span class="string">&quot;玫瑰&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>路由链：构造提示信息，来引导大模型查看用户输入的问题并确定问题的类型的。</p><p><code>MultiPromptChain</code> 类把前几个链整合在一起，实现路由功能。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建多提示链</span></span><br><span class="line"><span class="keyword">from</span> langchain.chains.router <span class="keyword">import</span> MultiPromptChain</span><br><span class="line">chain = MultiPromptChain(</span><br><span class="line">    router_chain=router_chain,</span><br><span class="line">    destination_chains=chain_map,</span><br><span class="line">    default_chain=default_chain,</span><br><span class="line">    verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ConversationChain"><a href="#ConversationChain" class="headerlink" title="ConversationChain"></a>ConversationChain</h3><p>包含AI前缀与人类前缀的对话摘要格式，这个对话格式和记忆机制结合得非常紧密。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 打印对话的模板</span><br><span class="line">The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know. # 减少幻觉</span><br><span class="line"></span><br><span class="line">Current conversation:</span><br><span class="line">&#123;history&#125;</span><br><span class="line">Human: &#123;input&#125;</span><br><span class="line">AI:</span><br></pre></td></tr></table></figure><ul><li><code>&#123;history&#125;</code> 是存储会话记忆的地方，也就是人类和人工智能之间对话历史的信息。</li><li><code>&#123;input&#125;</code> 是新输入的地方，你可以把它看成是和ChatGPT对话时，文本框中的输入。</li></ul><p>加入记忆功能：<code>conversation = ConversationChain(llm=llm, memory=ConversationBufferMemory())</code> 。聊天历史信息，都被传入了ConversationChain的提示模板中的 {history} 参数，构建出了包含聊天记录的新的提示输入。</p><ul><li><code>ConversationBufferWindowMemory</code>：缓冲窗口记忆，它的思路就是只保存最新最近的几次人类和AI的互动。因此，它在之前的“缓冲记忆”基础上增加了一个窗口值 <code>k</code>。这意味着我们只保留一定数量的过去互动，然后“忘记”之前的互动。</li><li><code>ConversationSummaryMemory</code>：使用LLM将对话历史进行汇总，然后再传递给 {history} 参数。这种方法旨在通过对之前的对话进行汇总来避免长对话过度使用Token。</li><li><code>ConversationSummaryBufferMemory</code>：混合记忆模型，当最新的对话文字长度在300字之内的时候，LangChain会记忆原始对话内容；当对话文字超出了这个参数的长度，那么模型就会把所有超过预设长度的内容进行总结。</li></ul><p><img src="/image/c56yyd7eb61637687de448512yy426ea.webp" alt="alt text"></p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>与外部环境交互，将额外信息合并到推理中。</p><ul><li>大模型：提供逻辑的引擎，负责生成预测和处理输入。</li><li>与之交互的外部工具：可能包括数据清洗工具、搜索引擎、应用程序等。</li><li>控制交互的<strong>代理</strong>：调用适当的外部工具，并管理整个交互过程的流程。</li></ul><h4 id="ReAct框架"><a href="#ReAct框架" class="headerlink" title="ReAct框架"></a>ReAct框架</h4><p>Reasoning-Acting框架：指导大语言模型推理和行动的一种思维框架。</p><p>行动 -&gt; 观察 -&gt; 思考 -&gt; 行动</p><p>《ReAct：在语言模型中协同推理和行动》：</p><blockquote><p>大语言模型可以通过生成推理痕迹和任务特定行动来实现更大的协同作用。<br>Reasoning包括了对当前环境和状态的观察，并生成推理轨迹。这使模型能够诱导、跟踪和更新操作计划，甚至处理异常情况。Acting在于指导大模型采取下一步的行动，比如与外部源（如知识库或环境）进行交互并且收集信息，或者给出最终答案。</p></blockquote><p><img src="/image/56fbe79e086052895f301383c27f4a0c.webp" alt="ReAct 思维链条"></p><blockquote><p>在链中，一系列操作被硬编码（在代码中）。在代理中，LLM被用作推理引擎来确定要采取哪些操作以及按什么顺序执行这些操作。</p></blockquote><p>思考框架：</p><blockquote><p>Use the following format:\n\n （指导模型使用下面的格式）<br>Question: the input question you must answer\n （问题）<br>Thought: you should always think about what to do\n （思考）<br>Action: the action to take, should be one of [Search, Calculator]\n （行动）<br>Action Input: the input to the action\n （行动的输入）<br>Observation: the result of the action\n… （观察：行动的返回结果）<br>(this Thought&#x2F;Action&#x2F;Action Input&#x2F;Observation can repeat N times)\n （上面这个过程可以重复多次）<br>Thought: I now know the final answer\n （思考：现在我知道最终答案了）<br>Final Answer: the final answer to the original input question\n\n （最终答案）</p></blockquote><p>根据现有知识解决不了，下一步行动是需要选择工具箱中的搜索工具：</p><blockquote><p>text: I need to find the current market price of roses and then calculate the new price with a 15% markup.\n （Text：问题文本）<br>Action: Search\n （行动：搜索）<br>Action Input: “Average price of roses” （行动的输入：搜索玫瑰平均价格）</p></blockquote><p>计算：</p><blockquote><p>AgentAction(tool&#x3D;’Calculator’, tool_input&#x3D;’80.16 * 1.15’, log&#x3D;’ I need to calculate the new price with a 15% markup.\nAction: Calculator\nAction Input: 80.16 * 1.15’)</p></blockquote><p>最后，AgentExcutor的plan方法返回一个 <code>AgentFinish</code> 实例，这表示代理经过对输出的检查，其内部逻辑判断出任务已经完成，思考和行动的循环要结束了。</p><blockquote><p>Thought: I now know the final answer. </p></blockquote><ul><li><p><strong>结构化工具对话代理</strong>（Structured Tool Chat）是一种通过预先设定的结构与用户进行交互的工具，可以有效引导对话的主题和内容。</p><ul><li>文件管理工具集</li><li>Web 浏览器工具集<ul><li><code>PlayWright</code> 工具包</li></ul></li></ul></li><li><p><strong>自主询问搜索代理</strong>（Self-Ask with Search）利用一种叫做 “Follow-up Question（追问）”加“Intermediate Answer（中间答案）”的技巧，来辅助大模型寻找事实性问题的过渡性答案，从而引出最终答案。</p><ul><li>逐步逼近，以自己提问并搜索：<code>使用玫瑰作为国花的国家的首都是哪里? = 使用玫瑰作为国花的国家？ + 都铎王朝的首都在哪里？</code></li></ul></li><li><p><strong>计划与执行代理</strong>（Plan and Execute）是指能够根据用户的需求制定计划，并执行相应操作的工具，帮助用户实现特定的目标或任务。</p><ul><li>首先，制定一个计划，并将整个任务划分为更小的子任务；然后按照该计划执行子任务。<ul><li>计划由一个LLM代理（负责推理）完成。</li><li>执行由另一个LLM代理（负责调用工具）完成。</li></ul></li></ul></li></ul><h4 id="使用-arXiv-工具"><a href="#使用-arXiv-工具" class="headerlink" title="使用 arXiv 工具"></a>使用 arXiv 工具</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> load_tools, initialize_agent, AgentType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型和工具</span></span><br><span class="line">llm = ChatOpenAI(temperature=<span class="number">0.0</span>, model=os.environ.get(<span class="string">&quot;LLM_MODELEND&quot;</span>))</span><br><span class="line">tools = load_tools([<span class="string">&quot;arxiv&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化链</span></span><br><span class="line">agent_chain = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行链</span></span><br><span class="line">agent_chain.run(<span class="string">&quot;介绍一下2005.14165这篇论文的创新点?&quot;</span>)</span><br><span class="line"><span class="comment"># Thought: 论文的创新点是在少样本学习设置下测试了 GPT-3 的性能，发现扩大语言模型的规模可以极大地提高任务无关的少样本性能，有时甚至可以与之前最先进的微调方法竞争。</span></span><br></pre></td></tr></table></figure><p><a href="https://python.langchain.com/docs/integrations/tools/">LangChain中集成的所有工具</a></p><h2 id="RAG-应用架构"><a href="#RAG-应用架构" class="headerlink" title="RAG 应用架构"></a>RAG 应用架构</h2><blockquote><p><code>Retrieval-Augmented Generation</code>，即检索增强生成，它结合了检索和生成的能力，为文本序列生成任务引入外部知识。RAG将传统的语言生成模型与大规模的外部知识库相结合，使模型在生成响应或文本时可以动态地从这些知识库中检索相关信息。</p></blockquote><p>数据源 - 大模型应用 - 用例</p><p>数据处理管道（Pipeline）</p><ol><li>Loading：文档加载器把 Documents 加载为以LangChain能够读取的形式。</li><li>Splitting：文本分割器把 Documents 切分为指定大小的分割，我把它们称为“文档块”或者“文档片”。</li><li>Storage：将上一步中分割好的“文档块”以“嵌入”（Embedding）的形式存储到向量数据库（Vector DB）中，形成一个个的“嵌入片”。</li><li>Retrieval：应用程序从存储中检索分割后的文档（例如通过比较余弦相似度，找到与输入问题类似的嵌入片）。</li><li>Synthesis：把问题和相似的嵌入片传递给语言模型（LLM），使用包含问题和检索到的分割的提示生成答案。</li></ol><p>我们使用了 <code>OpenAIEmbeddings</code> 来生成嵌入，然后使用 <code>Qdrant</code> 这个向量数据库来存储嵌入</p><p>词嵌入（Word Embedding）：将文本编码成向量。</p><blockquote><p>LangChain中的 <code>Embeddings</code> 类是设计用于与文本嵌入模型交互的类。这个类为所有这些提供者提供标准接口。</p></blockquote><ol><li><code>embed_documents</code> 方法，为文档创建嵌入。接收多个文本作为输入，意味着你可以一次性将多个文档，即被搜索的内容，转换为它们的向量表示。</li><li><code>embed_query</code> 方法，为查询创建嵌入。只接收一个文本作为输入，通常是用户的搜索查询。</li></ol><h3 id="存储嵌入"><a href="#存储嵌入" class="headerlink" title="存储嵌入"></a>存储嵌入</h3><p><code>CacheBackedEmbeddings</code>：将嵌入缓存在键值存储中。</p><p><strong>通过向量数据库（Vector Store）来保存</strong></p><p>非结构化查询：</p><p>通过向量存储检索器 <code>VectorstoreIndexCreator</code> 创建索引，在索引的 <code>query</code> 方法中，通过 <code>vectorstore</code> 类的 <code>as_retriever</code> 方法完成检索任务。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入文档加载器模块，并使用 TextLoader 来加载文本文件</span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line">loader = TextLoader(<span class="string">&#x27;LangChainSamples/OneFlower/易速鲜花花语大全.txt&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 VectorstoreIndexCreator 来从加载器创建索引</span></span><br><span class="line"><span class="keyword">from</span> langchain.indexes <span class="keyword">import</span> VectorstoreIndexCreator</span><br><span class="line">index = VectorstoreIndexCreator().from_loaders([loader])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义查询字符串, 使用创建的索引执行查询</span></span><br><span class="line">query = <span class="string">&quot;玫瑰花的花语是什么？&quot;</span></span><br><span class="line">result = index.query(llm, query)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 打印查询结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"><span class="comment"># 进行文本分割</span></span><br><span class="line">text_splitter = CharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> Qdrant</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带有 Qdrant 的向量索引创建器</span></span><br><span class="line">index_creator = VectorstoreIndexCreator(</span><br><span class="line">    vectorstore_cls=Qdrant,</span><br><span class="line">    embedding,</span><br><span class="line">    text_splitter=CharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">0</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>一种高效地管理和定位文档信息的方法，确保每个文档具有唯一标识并便于检索。</p><blockquote><p>LangChain 利用了记录管理器（RecordManager）来跟踪哪些文档已经被写入向量存储。</p><p>在进行索引时，API 会对每个文档进行哈希处理，确保每个文档都有一个唯一的标识。这个哈希值不仅仅基于文档的内容，还考虑了文档的元数据。确保了即使文档经历了多次转换或处理，也能够精确地跟踪它的状态和来源，确保文档数据被正确管理和索引。</p></blockquote><p><a href="https://python.langchain.com/docs/how_to/indexing/">LangChain中 Indexing 的说明</a></p><h3 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h3><p>检索：</p><ul><li>MRR (Mean Reciprocal Rank)：平均倒数排名，是衡量检索结果质量的指标。相关结果首次出现的位置</li><li>Hit rate：检索到的文档中，正确答案的比例。</li><li>NDCG (Normalized Discounted Cumulative Gain)：归一化折扣累积增益，是衡量检索结果质量的指标。</li></ul><p>生成：</p><ul><li>BLEU (Bilingual Evaluation Understudy)：双语评估，是衡量生成结果质量的指标。</li><li>ROUGE (Recall-Oriented Understanding Evaluation)：重叠式理解评估，是衡量生成结果质量的指标。<ul><li>Rouge-L: L 表示最大匹配长度，衡量生成结果与参考答案的相似度。</li><li>Rouge-1: 单词匹配度。</li><li>Rouge-2: 短语匹配度。</li></ul></li></ul><h2 id="Agent-框架"><a href="#Agent-框架" class="headerlink" title="Agent 框架"></a>Agent 框架</h2><p>让ChatGPT自己生成这些引导文本</p><h4 id="模拟代理"><a href="#模拟代理" class="headerlink" title="模拟代理"></a>模拟代理</h4><p><strong>CAMEL 交流式代理</strong></p><p>交流式代理 + 角色扮演 + 启示式提示 <code>inception prompting</code></p><p>明确的交互规范，如一次只能给出一个指令，解决方案必须具有详细的解释。使用 “Solution: ” 开始输出解决方案，等等。有助于保持对话的清晰性和高效性。</p><blockquote><p>CAMEL中提示的设计更加复杂和细致，更像是一种交互协议或规范。这种设计在一定程度上提高了AI与AI之间自主合作的能力，并能更好地模拟人类之间的交互过程。</p></blockquote><p><a href="https://arxiv.org/pdf/2303.17760">CAMEL：用于大规模语言模型社会的“心智”探索的交流式代理</a></p><h4 id="自主代理"><a href="#自主代理" class="headerlink" title="自主代理"></a>自主代理</h4><p>能够在无需外部干预的情况下自主运行，这在真实世界的应用中具有巨大的价值。</p><ul><li><code>Auto-GPT</code>: 自动链接多个任务。多步提示过程，将目标分解为子任务。</li><li><code>BabyAGI</code>: 自动生成和执行任务，而且还可以根据完成的任务结果生成新任务，并且可以实时确定任务的优先级。</li><li><code>HuggingGPT</code>: 自动生成计划，并处理多个复杂的AI任务。允许HuggingGPT持续接入。</li></ul><p>BabyAGI 完成任务过程：</p><blockquote><p>向系统提出一个目标之后，它将不断优先考虑需要实现或完成的任务，以实现该目标。具体来说，系统将形成任务列表，从任务列表中拉出优先级最高的第一个任务，使用 OpenAI API 根据上下文将任务发送到执行代理并完成任务，一旦这些任务完成，它们就会被存储在内存（或者Pinecone这类向量数据库）中，然后，根据目标和上一个任务的结果创建新任务并确定优先级。 </p></blockquote><p><img src="/image/07cbca8cfff33ffa231830eff145556c.webp" alt="alt text"></p><p>HuggingGPT: Solving AI Tasks with ChatGPT and its Friends in Hugging Face</p><p>使其能够根据用户请求自动生成计划，并使用外部模型，从而整合多模态感知能力，并处理多个复杂的AI任务。此外，这种流程还允许HuggingGPT持续从任务特定的专家模型中吸收能力，从而实现可增长和可扩展的AI能力。</p><h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2><ul><li><p><a href="https://arxiv.org/abs/2010.10439v2">开放式表格与文本问题回答</a>，Chen, W., Chang, M.-W., Schlinger, E., Wang, W., &amp; Cohen, W. W. (2021). Open Question Answering over Tables and Text. ICLR 2021.</p></li><li><p>Open AI的GPT-3模型：<a href="https://proceedings.neurips.cc/paper_files/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf">大模型是少样本学习者</a>, Brown, T. B., Mann, B., Ryder, N., Subbiah, M., Kaplan, J., Dhariwal, P., … &amp; Agarwal, S. (2020). Language models are few-shot learners. arXiv preprint arXiv:2005.14165.</p></li><li><p><a href="https://arxiv.org/abs/2109.01652">微调后的语言模型是零样本学习者</a>, Wei, J., Bosma, M., Zhao, V. Y., Guu, K., Yu, A. W., Lester, B., Du, N., Dai, A. M., &amp; Le, Q. V. (2022). Finetuned Language Models Are Zero-Shot Learners. Proceedings of the International Conference on Learning Representations (ICLR 2022).</p></li><li><p><a href="https://arxiv.org/abs/2202.12837">对示例角色的重新思考：是什么使得上下文学习有效？</a>, Min, S., Lyu, X., Holtzman, A., Artetxe, M., Lewis, M., Hajishirzi, H., &amp; Zettlemoyer, L. (2022). Rethinking the Role of Demonstrations: What Makes In-Context Learning Work? Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP 2022).</p></li><li><p>2022 年，在 Google 发布的论文 <a href="https://arxiv.org/pdf/2201.11903">Chain-of-Thought Prompting Elicits Reasoning in Large Language Models</a>中首次提出思维链（Chain of Thought），Wang, X., Wei, J., Schuurmans, D., Le, Q., Chi, E., Narang, S., Chowdhery, A., &amp; Zhou, D. (2023). Self-Consistency Improves Chain of Thought Reasoning in Language Models. Proceedings of the International Conference on Learning Representations (ICLR). arXiv preprint arXiv:2203.11171.</p></li><li><p><a href="https://arxiv.org/pdf/2305.10601">论文，思维之树：使用大型语言模型进行深思熟虑的问题解决</a>，Yao, S., Yu, D., Zhao, J., Shafran, I., Griffiths, T. L., Cao, Y., &amp; Narasimhan, K. (2023). Tree of Thoughts: Deliberate Problem Solving with Large Language Models. arXiv preprint arXiv:2305.10601.</p></li><li><p><a href="https://arxiv.org/abs/2210.03629">ReAct：在语言模型中协同推理和行动</a>，Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K., &amp; Cao, Y. (2023). ReAct: Synergizing Reasoning and Acting in Language Models. arXiv preprint arXiv:2210.03629</p></li><li><p><a href="https://arxiv.org/abs/2303.09014">ART：大型语言模型的自动多步推理和工具使用</a>，Paranjape, B., Lundberg, S., Singh, S., Hajishirzi, H., Zettlemoyer, L., &amp; Ribeiro, M. T. (2023). ART: Automatic multi-step reasoning and tool-use for large language models. arXiv preprint arXiv:2303.09014.</p></li><li><p><a href="https://arxiv.org/abs/2305.04091">“计划与解决”提示：通过大型语言模型改进Zero-Shot链式思考推理</a> Wang, L., Xu, W., Lan, Y., Hu, Z., Lan, Y., Lee, R. K.-W., &amp; Lim, E.-P. (2023). Plan-and-Solve Prompting: Improving Zero-Shot Chain-of-Thought Reasoning by Large Language Models. arXiv preprint arXiv:2305.04091.</p></li><li><p><a href="https://arxiv.org/pdf/2205.11916">Large Language Models are Zero-Shot Reasoners</a></p></li><li><p>论文 <a href="https://link.juejin.cn/?target=https://arxiv.org/pdf/2303.17580.pdf" title="https://arxiv.org/pdf/2303.17580.pdf">HuggingGPT: Solving AI Tasks with ChatGPT and its Friends in Hugging Face</a></p></li><li><p><a href="https://arxiv.org/abs/2312.10997">Retrieval-Augmented Generation for Large Language Models: A Survey</a></p></li><li><p><a href="https://arxiv.org/pdf/2305.14283">Query Rewriting for Retrieval-Augmented Large Language Models</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LangChain功能总结&quot;&gt;&lt;a href=&quot;#LangChain功能总结&quot; class=&quot;headerlink&quot; title=&quot;LangChain功能总结&quot;&gt;&lt;/a&gt;LangChain功能总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Model I&amp;#x2F;O &lt;/li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>理解与使用CSS</title>
    <link href="https://alexiangyu.github.io/2024/11/08/%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8CSS/"/>
    <id>https://alexiangyu.github.io/2024/11/08/%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8CSS/</id>
    <published>2024-11-08T06:34:44.000Z</published>
    <updated>2025-01-05T11:40:04.835Z</updated>
    
    <content type="html"><![CDATA[<p>Cascading Style Sheet，层叠样式表: 渲染外观</p><p>W3C标准: <a href="https://www.w3.org/Style/CSS/">https://www.w3.org/Style/CSS/</a></p><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ul><li><p><strong>内嵌式</strong>: style标签中, 位置在<code>&lt;head&gt;</code>内</p><p>当前页面 小案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>外联式</strong>: 单独.css文件中</p><p>作用多个页面 较大项目</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>行内式</strong>: 在标签的属性里</p><p>仅一个标签：配合js使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blue; font-size: 20px;&quot;</span>&gt;</span>div content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>属性名: 属性值;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#one</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font</span>: <span class="number">2em</span> sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p 标签选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>div 类选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>div 标签选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>标签选择器：<code>p &#123; &#125;</code> 选择<strong>所有此类标签</strong>, 无论多少层嵌套</li><li>类选择器：<code>.red &#123; &#125;</code> 类名可重复 多个类名用空格隔开</li><li>id选择器：<code>#one &#123; &#125;</code> 唯一对应id，仅选中一个标签</li><li>属性选择器：<code>E[att] &#123; &#125;</code> 具有 att 特性的 E 元素<ul><li><code>E[att=val] &#123; &#125;</code> att 值为 val 的元素</li><li><code>E[att~=val]</code> , <code>E[att|=&quot;val&quot;]</code>, <code>E[att^=&quot;val&quot;]</code>, <code>E[att$=&quot;val&quot;]</code>, <code>E[att*=&quot;val&quot;]</code></li></ul></li><li>通配符：<code>* &#123; &#125;</code> 选择所有元素</li><li>后代选择器：<code>pn child &#123; &#125;</code> 对于<strong>所有后代</strong> 空格隔开<ul><li>子代：<code>pn&gt;son &#123; &#125;</code> 仅选儿子</li></ul></li><li>兄弟选择器：<code>E~F &#123; &#125;</code> E 之后的所有 F 兄弟元素<ul><li>相邻：<code>E+F &#123; &#125;</code> E 之后的第一个 F 元素，如果 F 元素不是 E 元素的后一个兄弟元素，则选择不成功。</li></ul></li><li>并集：<code>.red, .two &#123; &#125;</code> 逗号隔开</li><li>交集：<code>p.red &#123; &#125;</code> 无空格分隔</li></ul><p>伪类: <code>:hover</code> 鼠标悬浮状态</p><p>简写：<strong>emmet语法</strong></p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>样式表来源<ul><li>浏览器默认 &lt; 用户样式 &lt; 作者样式（主要的） &lt; 作者样式 <code>!important</code> &lt; 浏览器默认 <code>!important</code> &lt; 浏览器默认 <code>!important</code></li></ul></li><li>选择器优先级<ul><li>内联 &gt; id &gt; class &#x3D; attribute &#x3D; pseudo-class &gt; type &#x3D; pseudo-element</li></ul></li><li>源码位置<ul><li>最后声明的生效</li><li>与 <code>class=&quot;red green&quot;</code> 引用顺序无关</li></ul></li></ol><p>少用 <code>id</code> 与 <code>!important</code></p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><ul><li>内容区：内容 + 内边距 + 边框 + 外边距</li></ul><blockquote><p>只有 margintop 和 marginbottom 可以为负值，其他的都不能为负值。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  三角形  */</span></span><br><span class="line"><span class="selector-class">.triangle-bottom</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  固定比例矩形  */</span></span><br><span class="line"><span class="selector-class">.ratio-box</span>&#123;</span><br><span class="line">    <span class="comment">/* 新特性写法 */</span></span><br><span class="line">    <span class="comment">/* aspect-ratio: 4 / 3;</span></span><br><span class="line"><span class="comment">    background-color: greenyellow; */</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">background-color</span>: cadetblue;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 是父元素宽度的75% */</span></span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 渐变边框 */</span></span><br><span class="line"><span class="selector-class">.awesome-border</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box,border-box;</span><br><span class="line">    <span class="attribute">background-origin</span>: padding-box,border-box;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,<span class="number">#fff</span>,<span class="number">#fff</span>),<span class="built_in">linear-gradient</span>(<span class="number">135deg</span>,<span class="number">#e941ab</span>,<span class="number">#a557ef</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>box-sizing: border-box;</code> 宽度计算包含边框宽度</li><li><code>box-sizing: content-box;</code> 宽度计算不包含边框宽度</li></ul><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h4 id="常规流"><a href="#常规流" class="headerlink" title="常规流"></a>常规流</h4><p>默认情况下，浏览器会从上到下、从左到右地排列块级元素和行内元素。</p><p>相邻的块级元素之间会自动产生垂直间距（margin），这称为“外边距合并（margin collapsing）”。</p><ul><li>块级元素：独占一行，宽度默认100%，高度默认由内容撑开。<ul><li>包括 <code>&lt;div&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code></li><li><code>display: block;</code></li><li>环境：BFC（Block Formatting Context）</li></ul></li><li>行内元素：水平排列，高度默认由内容撑开<ul><li>包括 <code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code></li><li><code>display: inline;</code></li><li>环境：IFC（Inline Formatting Context）</li></ul></li></ul><p>外边距塌陷：两个相邻&#x2F;嵌套&#x2F;空的块级元素的外边距相遇时，它们的外边距会合并取其中较大的一个值，而不是叠加。通过添加 <code>Padding</code> 或 <code>Border</code> 解决，或设置父元素为BFC。</p><p>内联格式中 <code>line-height</code> 和 height 设置为相同的高度实现对齐</p><p>各种内联元素对比：</p><ul><li><code>inline</code>: <code>&lt;span&gt;</code> 的默认样式，不接受宽度和高度（由内容决定），不换行。</li><li><code>inline-block</code>: 可以设置宽高（默认由内容撑开），不换行。可以与 inline 元素在同一行排列，控制其上下边距。</li><li><code>block</code>: 有换行，默认宽度100%，高度默认由内容撑开。</li></ul><p>行内元素对齐方式：</p><ul><li><code>text-align: baseline;</code>: 基线</li><li><code>text-align: middle;</code>: 居中</li></ul><h4 id="Flexbox-弹性盒子"><a href="#Flexbox-弹性盒子" class="headerlink" title="Flexbox 弹性盒子"></a>Flexbox 弹性盒子</h4><p>一维布局：灵活的响应式设计。</p><ul><li>容器：<code>display: flex;</code></li><li>子元素：<code>display: flex;</code> 或 <code>display: inline-flex;</code></li></ul><h4 id="grid-二维网格"><a href="#grid-二维网格" class="headerlink" title="grid 二维网格"></a>grid 二维网格</h4><p>基于布局，适合复杂的较大页面。</p><p><code>display: grid</code>; 或 <code>display: inline-grid;</code></p><ul><li>创建网格：<code>grid-template-columns: 1fr 1fr;</code></li><li>子元素：<code>grid-column: 1 / 3;</code></li></ul><p>网格线：</p><ul><li><code>grid-column-start</code></li><li><code>grid-column-end</code></li><li><code>grid-row-start</code></li><li><code>grid-row-end</code></li><li><code>grid-column</code></li><li><code>grid-row</code></li><li><code>grid-area</code></li></ul><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p><code>position</code> 属性</p><ul><li><code>static</code> 默认值，元素出现在正常的流中。</li><li><code>relative</code> 相对定位，相对于元素本身进行定位。</li><li><code>absolute</code> 绝对定位，相对于最近的已定位祖先元素。</li><li><code>fixed</code> 固定定位，相对于浏览器窗口进行定位， 不受滚动影响。</li><li><code>sticky</code> 粘性定位，相对于最近的已定位祖先元素，当元素进入视口时，固定在顶部或底部。</li></ul><h4 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h4><p>staking context：将元素沿着垂直屏幕的虚构的 Z 轴排开。</p><ul><li>可包含在其他层叠上下文中。</li><li>独立于兄弟元素，只考虑子元素。</li><li>子元素的z-index无法超越父元素的z-index显示顺序。</li></ul><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout/Introduction_to_formatting_contexts">渲染过程</a></p><p>形成条件：</p><ul><li>文档根元素 <code>&lt;html&gt;</code>。</li><li><code>position: relative;</code> 或 <code>position: absolute;</code> 的元素, z-index 值不为默认值。</li><li><code>position: fixed;</code>, <code>position: sticky;</code> 的元素。</li><li><code>flex</code>, <code>grid</code></li><li><code>opacity</code> 值小于 1 的元素。</li><li>具有 <code>transform</code>, <code>filter</code>, <code>backdrop-filter</code>, <code>perspective</code>, <code>clip-path</code>, <code>mask</code>, <code>isolation</code> 属性的元素。</li></ul><p>同一个层叠上下文内，元素间也有顺序:<br><img src="/cfea9c5cd49944f89ff52845563233f1~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.webp" alt="alt text"></p><blockquote><p>使用 CSS 变量或预处理语言的变量来管理 z-index 的值。将预设间隔设置为 10 或 100，以便后续便于插入。</p></blockquote><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>计算布局 -&gt; 绘制 -&gt; 合成</p><p>触发 reflow 的情况：</p><ol><li>修改 DOM 元素</li><li>更改样式</li><li>调整浏览器窗口大小</li></ol><p>需要 CPU 负责重新计算元素的大小、位置和布局。应该尽量不触发。</p><p><strong>合成层（Composition Layers）</strong></p><p>由GPU处理，将多个图层合成一个独立的图层中：减少绘制次数，提升渲染效率。</p><p>使用 transform、opacity 等属性时，变化只需要由GPU重绘合成层中单独的图层，在后台运行。</p><p><a href="https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome/">关于GPU硬件加速渲染详解</a></p><h4 id="transform-变形"><a href="#transform-变形" class="headerlink" title="transform 变形"></a>transform 变形</h4><p>2d</p><p>3D变形</p><p>在线试一试： <a href="https://codepen.io/yao-mo/pen/YzjYLeO">codepen.io&#x2F;yao-mo&#x2F;pen&#x2F;…</a></p><h4 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h4><p><code>property</code> 过渡属性 + <code>duration</code> 过渡时间 + <code>timing-function</code> 过渡函数 + <code>delay</code> 延迟时间</p><p>三种过渡函数：</p><ul><li><code>linear</code> 线性</li><li>贝塞尔曲线<ul><li><code>ease</code> 缓动 </li><li><code>ease-in-out</code></li><li><code>cubic-bezier(n,n,n,n)</code> 自定义</li></ul></li><li><code>steps(n, start|end)</code> 分段函数阶跃</li></ul><h4 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h4><p>animation 属性参考：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation">developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;…</a></p><p>关键帧</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="comment">/* 开始状态 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="comment">/* 结束状态 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>animation-name</code>: 关键帧名称</li><li><code>animation-duration</code>: 持续时间</li><li><code>animation-timing-function</code>: 节奏</li><li><code>animation-delay</code>: 延迟开始时间</li><li><code>animation-iteration-count</code>: 重复次数</li><li><code>animation-direction</code>: 反向&#x2F;交替</li><li><code>animation-fill-mode</code>: 执行前后样式</li><li><code>animation-play-state</code>: 运行状态</li></ul><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><p>原则：</p><ul><li>优先选用流式布局，如百分比、<code>flex</code>、 <code>grid</code>等</li><li>使用响应式图片，匹配尺寸，节省带宽</li><li>使用媒体查询为不同的设备类型做适配</li><li>给移动端设备设置简单、统一的视口</li><li>使用相对长度，<code>em</code>、<code>rem</code>、<code>vw</code> 做为长度度量</li></ul><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>根据不同的设备特性（如屏幕大小、分辨率、方向等）应用不同的样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="comment">/* 针对屏幕宽度大于768px的设备 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">    <span class="comment">/* 针对屏幕宽度小于768px的设备 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1023px</span>) &#123;</span><br><span class="line">    <span class="comment">/* 针对屏幕宽度介于768px和1023px之间的设备 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="comment">/* 针对屏幕宽度大于1024px的设备 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-device-width</span>: <span class="number">1024px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">    <span class="comment">/* 针对竖屏设备 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-device-width</span>: <span class="number">1024px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">    <span class="comment">/* 针对横屏设备 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵循cascading层叠覆盖原则，尽量将一般样式放在前面，特定样式放在后面。</p><h4 id="像素与尺寸设计"><a href="#像素与尺寸设计" class="headerlink" title="像素与尺寸设计"></a>像素与尺寸设计</h4><p>确保阅读体验是相对一致</p><ul><li>视觉尺寸：1px &#x3D; 1&#x2F;96英寸</li><li>CSS像素：1px &#x3D; 0.75pt</li><li>设备像素比：DPR &#x3D; 设备像素&#x2F;CSS像素</li></ul><p>移动端设备viewport的适配:</p><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p><ul><li><code>em</code> 表示相对于使用它的元素的字体大小。</li><li><code>rem</code> 为相对于根元素（<code>&lt;html&gt;</code>）的字体大小。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1em = 16px */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 根元素字体大小 */</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.element</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>; <span class="comment">/* 该元素的字体大小为 32px (16px * 2) */</span>  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.child</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>; <span class="comment">/* 该元素的字体大小仍然为 32px */</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.paragraph</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>; <span class="comment">/* 1em = 16px */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0.5em</span>; <span class="comment">/* 0.5em = 8px */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5em</span>; <span class="comment">/* 24px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置rem为视口宽度的10%，等比缩放。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setRem</span>(<span class="params">ratio</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rem = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span> / ratio;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>vw</code> 视窗宽度的百分比，视窗宽度为视口宽度的100%。<code>vh</code> 视窗高度的百分比。</li></ul><h2 id="CSS-工程化"><a href="#CSS-工程化" class="headerlink" title="CSS 工程化"></a>CSS 工程化</h2><p>语言增强-CSS预处理器</p><ul><li>自定义变量</li><li>嵌套选择器、作用域</li><li>循环、条件语句、定义函数</li><li>mixins、继承</li></ul><h4 id="CSS-模块化"><a href="#CSS-模块化" class="headerlink" title="CSS 模块化"></a>CSS 模块化</h4><p>BEM命名法 <code>block__element--modifier</code>：</p><ul><li>Element：模块的组成部分，如header__title、container__item等</li><li>Block：模块的名称，如header、container等</li><li>Modifier：模块的状态或属性，如header–fixed、container–center等</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组件 */</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子组件 */</span></span><br><span class="line"><span class="selector-class">.header__title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修饰符 */</span></span><br><span class="line"><span class="selector-class">.header--fixed</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS in JS: 将应用的CSS样式写在JavaScript文件里面，利用js动态生成css。</p><p>unique classname</p><p>styled component 机制：第二个 classname 作为唯一类名（hash 值），写入 class.</p><ul><li>首屏渲染、无多余css阻塞</li></ul><h4 id="原子化-CSS"><a href="#原子化-CSS" class="headerlink" title="原子化 CSS"></a>原子化 CSS</h4><ul><li>工具库优先</li><li>组合使用</li><li>简单的类名</li></ul><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p>AST抽象语法树格式化网址：<a href="https://astexplorer.net/">astexplorer.net&#x2F;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cascading Style Sheet，层叠样式表: 渲染外观&lt;/p&gt;
&lt;p&gt;W3C标准: &lt;a href=&quot;https://www.w3.org/Style/CSS/&quot;&gt;https://www.w3.org/Style/CSS/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;引入方</summary>
      
    
    
    
    <category term="web前端" scheme="https://alexiangyu.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>代码杂谈</title>
    <link href="https://alexiangyu.github.io/2024/11/06/%E4%BB%A3%E7%A0%81%E6%9D%82%E8%B0%88/"/>
    <id>https://alexiangyu.github.io/2024/11/06/%E4%BB%A3%E7%A0%81%E6%9D%82%E8%B0%88/</id>
    <published>2024-11-06T04:03:14.000Z</published>
    <updated>2025-01-06T06:53:12.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><ul><li>命令式编程：语句为基本单位，执行指令的步骤。<ul><li>面向过程：自顶向下、过程结构化。以函数、过程、模块为基本特征。</li><li>面向对象：便于修改和扩展，以类、继承、多态、依赖注入为基本特征。（五大原则）</li></ul></li><li>声明式编程：以数据为中心，以表达式为基本单位，以声明式的方式描述程序。<ul><li>函数式：函数是第一公民，使用纯函数、闭包、Factor、柯里化等。</li><li>响应式：以数据流为中心。以异步、事件驱动、数据流驱动的方式编程。</li></ul></li></ul><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>e.g. 把运算过程定义为不同的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="title function_">subtract</span>(<span class="title function_">multiply</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>);</span><br></pre></td></tr></table></figure><ol><li>函数被视为一等公民</li><li>只使用表达式、把I&#x2F;O限制到最小</li><li>不可变性、无状态</li><li>纯函数</li><li>引用透明</li></ol><h3 id="函子（Functor）"><a href="#函子（Functor）" class="headerlink" title="函子（Functor）"></a>函子（Functor）</h3><p>定义：一个函子是一个容器，里面封装了一个值，并提供一个映射函数。可以把一个函数作用到容器里面的值上，得到一个新的容器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Num</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (v) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = v</span><br><span class="line">    &#125;      </span><br><span class="line"><span class="comment">//    add5 () &#123;</span></span><br><span class="line"><span class="comment">//        return  new Num( this.value + 5)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    map (fn) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Num</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">value</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add5</span> = x =&gt; x + <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">double</span> = x =&gt; x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Num</span>(<span class="number">2</span>)</span><br><span class="line">num.<span class="title function_">map</span>(add5).<span class="title function_">map</span>(double)   <span class="comment">// 14</span></span><br></pre></td></tr></table></figure><p>封住了一个方法 <code>Functor.of</code> 用来创建 <code>Functor</code> 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Functor</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value ;</span><br><span class="line">    &#125;      </span><br><span class="line">    map (fn) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">value</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Functor</span>.<span class="property">of</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Functor</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Functor</span>.<span class="title function_">of</span>(<span class="number">5</span>).<span class="title function_">map</span>(add5).<span class="title function_">map</span>(double)</span><br></pre></td></tr></table></figure><h2 id="编译与解释"><a href="#编译与解释" class="headerlink" title="编译与解释"></a>编译与解释</h2><p>指令 -&gt; 机器语言</p><p><code>x+y</code> -&gt; 词法分析(lexer) -&gt; Token: <code>[x, +, y]</code> -&gt; 语法分析(parser) -&gt; AST: <code>[+, [x, y]]</code> -&gt; 语义分析(semantic analysis) -&gt; <code>[+, [Num(2), Num(3)]]</code> -&gt; 解释&#x2F;代码生成 -&gt; <code>Num(5)</code> -&gt; 运行</p><ul><li>Parser_LL(1)：左递归下降解析器</li><li>Parser_LR(1)：线性规约解析器</li><li>Parser_LALR：预测分析表法</li></ul><h2 id="前端设计"><a href="#前端设计" class="headerlink" title="前端设计"></a>前端设计</h2><p>明暗模式切换：less 变量，设定全局属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (newTheme === <span class="string">&#x27;dark&#x27;</span>) </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;arco-theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;arco-theme&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>ConfigProvider</code> 组件：全局默认配置，包括主题、国际语言、尺寸等。</p><h4 id="lodash"><a href="#lodash" class="headerlink" title="lodash"></a>lodash</h4><ul><li>工具函数库</li><li>集合处理</li><li>数组处理</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>匹配字符串模式的工具，可以用来查找、替换、验证和拆分文本。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;pytpyppyyyppy&quot;</span></span><br><span class="line">res = re.findall(<span class="string">&quot;py&quot;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(res, <span class="built_in">len</span>(res))         <span class="comment"># [&#x27;py&#x27;, &#x27;py&#x27;, &#x27;py&#x27;, &#x27;py&#x27;] 4</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">&quot;py&quot;</span>, s))     <span class="comment"># &lt;re.Match object; span=(0, 2), match=&#x27;py&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">r = <span class="string">&#x27;^[0-9a-zA-Z]&#123;6,10&#125;$&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;12345666&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(r, s))      <span class="comment"># [&#x27;123456&#x27;]</span></span><br><span class="line"></span><br><span class="line">r_mail = <span class="string">r&#x27;(^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$)&#x27;</span>    <span class="comment"># 匹配邮箱</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r_mail, <span class="string">&#x27;xxx@sb.com&#x27;</span>))     <span class="comment"># &lt;re.Match object; span=(0, 10), match=&#x27;xxx@sb.com&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r_mail, <span class="string">&#x27;abc@com&#x27;</span>))        <span class="comment"># None</span></span><br></pre></td></tr></table></figure><p><strong>元字符</strong></p><p>单字符：</p><ul><li><code>.</code>：匹配任何单个字符，除了 <code>\n</code>。</li><li><code>[]</code>：括号中的任何单个字符。例如，<code>[abc]</code> 匹配 <code>a</code>、<code>b</code> 或 <code>c</code>。</li><li><code>^</code>：脱字号，表示其以外的字符。例如，<code>[^abc]</code> 匹配除了 <code>a</code>、<code>b</code> 和 <code>c</code> 以外的任何字符。</li><li><code>\d</code>：任意数字，等价于 <code>[0-9]</code>。</li><li><code>\D</code>：任意非数字字符，等价于 <code>[^0-9]</code>。</li><li><code>\s</code>：任意空白字符，等价于 <code>[\t\n\r\f\v]</code>。</li><li><code>\S</code>：任意非空白字符，等价于 <code>[^\t\n\r\f\v]</code>。</li><li><code>\w</code>：任意字母、数字或下划线，等价于 <code>[a-zA-Z0-9_]</code>。</li><li><code>\W</code>：任意非字母、数字或下划线字符，等价于 <code>[^a-zA-Z0-9_]</code>。</li></ul><p>边界匹配：</p><ul><li><code>\b</code>：单词边界，<code>\w</code> 和 <code>\W</code> 之间的位置。</li><li><code>\B</code>：非单词边界。</li><li><code>^</code>：行首。</li><li><code>$</code>：行尾。</li></ul><p>分组匹配：</p><ul><li><code>|</code>：或。</li><li><code>(...)</code>：捕获组。</li><li><code>(?:...)</code>：非捕获组。</li><li><code>(?P&lt;name&gt;...)</code>：命名组。</li><li><code>(?#...)</code>：注释。</li><li><code>(?=...)</code>：肯定预测先行断言。</li><li><code>(?!...)</code>：否定预测先行断言。</li><li><code>(?&lt;=...)</code>：正向肯定回顾预测。</li><li><code>(?&lt;!...)</code>：正向否定回顾预测。</li><li><code>(?imx)</code>：设置匹配模式，<code>i</code> 忽略大小写，<code>m</code> 多行模式，<code>x</code> 忽略空白。</li><li><code>(?-imx)</code>：取消匹配模式。</li><li><code>(?#...)</code>：注释。</li></ul><p>数量匹配：</p><ul><li><code>*</code>：匹配零个或多个。</li><li><code>+</code>：一个或多个。</li><li><code>?</code>：零个或一个。</li><li><code>&#123;m&#125;</code>：出现m次。</li><li><code>&#123;m,&#125;</code>：至少出现m次。</li><li><code>&#123;m,n&#125;</code>：m到n个。</li><li><code>&#123;m,n&#125;?</code>：m到n个，非贪婪模式。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;g[a-z]+d&#x27;</span>, <span class="built_in">str</span>))     <span class="comment"># [&#x27;gadxxgodwwgeed&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;g[a-z]+?d&#x27;</span>, <span class="built_in">str</span>))    <span class="comment"># [&#x27;gad&#x27;, &#x27;god&#x27;, &#x27;geed&#x27;]</span></span><br></pre></td></tr></table></figure><p>非贪婪匹配：<code>[a-z]+?</code>，限定符后面加上问号 <code>?</code>，表示匹配尽可能少的字符。</p><p>修饰符：</p><ul><li><code>re.I</code>：忽略大小写。</li><li><code>re.M</code>：多行模式。</li><li><code>re.S</code>：匹配任意字符，包括换行符。</li><li><code>re.X</code>：使用更加精细的语法。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配数字</span></span><br><span class="line">pattern = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">result = re.findall(pattern, <span class="string">&#x27;123 456 789&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [&#x27;123&#x27;, &#x27;456&#x27;, &#x27;789&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配中文</span></span><br><span class="line">pattern = <span class="string">r&#x27;[\u4e00-\u9fa5]+&#x27;</span></span><br><span class="line">result = re.findall(pattern, <span class="string">&#x27;你好，世界！&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [&#x27;你好&#x27;, &#x27;世界&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配邮箱</span></span><br><span class="line">pattern = <span class="string">r&#x27;\w+@\w+\.\w+&#x27;</span></span><br><span class="line">result = re.findall(pattern, <span class="string">&#x27;abc@123.com def@456.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [&#x27;abc@123.com&#x27;, &#x27;def@456.com&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配日期</span></span><br><span class="line">pattern = <span class="string">r&#x27;\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;&#x27;</span></span><br><span class="line">result = re.findall(pattern, <span class="string">&#x27;2021-10-10 2022-01-01&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># [&#x27;2021-10-10&#x27;, &#x27;2022-01-01&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;编程范式&quot;&gt;&lt;a href=&quot;#编程范式&quot; class=&quot;headerlink&quot; title=&quot;编程范式&quot;&gt;&lt;/a&gt;编程范式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命令式编程：语句为基本单位，执行指令的步骤。&lt;ul&gt;
&lt;li&gt;面向过程：自顶向下、过程结构化。以函数、过程、模块</summary>
      
    
    
    
    <category term="代码基础" scheme="https://alexiangyu.github.io/categories/%E4%BB%A3%E7%A0%81%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>CRDT协同方案分析</title>
    <link href="https://alexiangyu.github.io/2024/10/11/CRDT%E5%8D%8F%E5%90%8C%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/"/>
    <id>https://alexiangyu.github.io/2024/10/11/CRDT%E5%8D%8F%E5%90%8C%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/</id>
    <published>2024-10-11T13:04:09.000Z</published>
    <updated>2024-11-24T12:35:31.539Z</updated>
    
    <content type="html"><![CDATA[<p>convergent or commutative replicated data type：用于在分布式系统中实现一致性数据结构。</p><ul><li>无锁并发控制，后端解决冲突</li><li>支持离线编辑</li><li>无需中心化服务器，P2P 即可实现多端协同</li><li>达成最终强一致性，但不保证实时一致</li></ul><p><a href="https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf">CRDT定义、证明 2011</a></p><p><a href="https://inria.hal.science/inria-00555588/document">CRDT的原理与实现</a></p><ul><li><p>CRDT 通过数据结构来保证最终一致性</p><ul><li>Operation-based</li><li>State-based</li></ul></li><li><p>OT 的基本策略则是协商，动态调整</p></li><li><p>op1 &#x3D; moveRow(0, 1)</p></li><li><p>op2 &#x3D; updateCell(0, 0, ‘xxxx’)</p></li><li><p>op2’ &#x3D; updateCell(0, 1, ‘xxxx’) &#x3D; transform(op1, op2)</p></li></ul><h2 id="协同编辑"><a href="#协同编辑" class="headerlink" title="协同编辑"></a>协同编辑</h2><ul><li>状态&#x2F;操作</li></ul><p>op: insert, delete, update</p><p>indexedDB 过程数据</p><ul><li>冲突解决：同一内容，追加&#x2F;副本</li><li>弱网：数据初始化，同步</li></ul><p>OT(Operational Transformation)：获取操作 -&gt; 加入队列 -&gt; 同步 -&gt; 冲突解决 -&gt; 应用操作</p><p>CRDT(Conflict-free Replicated Data Types)：去中心化，离线编辑<br>定义op队列，确定每个副本的状态</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;convergent or commutative replicated data type：用于在分布式系统中实现一致性数据结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无锁并发控制，后端解决冲突&lt;/li&gt;
&lt;li&gt;支持离线编辑&lt;/li&gt;
&lt;li&gt;无需中心化服务器，P2P 即可实现多</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TS与ES6+</title>
    <link href="https://alexiangyu.github.io/2024/09/12/TS%E4%B8%8EES6/"/>
    <id>https://alexiangyu.github.io/2024/09/12/TS%E4%B8%8EES6/</id>
    <published>2024-09-12T08:16:26.000Z</published>
    <updated>2025-01-04T16:47:54.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>JavaScript 的超集，<strong>面向对象</strong>、类型检测等</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> message: <span class="built_in">string</span></span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="keyword">new</span> <span class="title class_">Greeting</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">g.<span class="title function_">greet</span>();  <span class="comment">// Output: &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts    <span class="comment"># 编译成js文件</span></span><br><span class="line">node hello.js   </span><br></pre></td></tr></table></figure><p>在node中运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node hello.ts</span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><table><thead><tr><th>数据类型</th><th>关键字</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>布尔值</td><td>boolean</td><td>true&#x2F;false</td><td><code>let isDone: boolean = true</code></td></tr><tr><td>数字</td><td>number</td><td>整数或双精度64位浮点数</td><td><code>let decimal: number = 6;</code></td></tr><tr><td>字符串</td><td>string</td><td>文本</td><td><code>let greeting: string = &quot;Hello, world!&quot;;</code></td></tr><tr><td>任意值</td><td>any</td><td>可以赋予任意类型</td><td><code>let variable: any = &quot;Hello, world!&quot;;</code></td></tr><tr><td>空值</td><td>void</td><td>没有返回值的函数</td><td></td></tr><tr><td>Never</td><td>never</td><td>会抛出异常或死循环的函数返回值</td><td></td></tr><tr><td>Null</td><td>null</td><td>空对象引用</td><td></td></tr><tr><td>Undefined</td><td>undefined</td><td>未定义的值</td><td></td></tr><tr><td>复杂类型</td><td></td><td></td><td></td></tr><tr><td>数组</td><td>Array</td><td>有序的集合，不限制长度、元素类型</td><td><code>let numbers: number[] = [1, 2, 3];</code></td></tr><tr><td>对象</td><td>Object</td><td>任意属性的集合</td><td></td></tr><tr><td>函数</td><td>Function</td><td>接受参数并返回值</td><td></td></tr><tr><td>元组</td><td>Tuple</td><td>相比数组，有固定对应位置类型和长度</td><td><code>let tuple: [string, number] = [&quot;hello&quot;, 123];</code></td></tr><tr><td>枚举</td><td>enum</td><td>定义数值集合</td><td></td></tr></tbody></table><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>用 <code>type</code> 关键字，自定义一个（复杂）类型，方便重复使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Alex</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alex&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Bob</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><blockquote><p>字面量类型：右值，表示一组固定的值 <code>const str2: &#39;Hello TS&#39; = &#39;Hello TS&#39;</code> 更高效（无需编译转换）</p></blockquote><p>关键字 <code>enum</code>定义数值集合，可以用数字或字符串作为值</p><ul><li>原理：将枚举类型编译成对象，对象属性名为枚举值，属性值为对应值</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span>, <span class="title class_">Down</span>, <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125;    <span class="comment">// 定义枚举类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;&#125;    <span class="comment">// 参数为枚举类型</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Left</span>) <span class="comment">// call</span></span><br></pre></td></tr></table></figure><p>编译后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Direction</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;     <span class="comment">// 自调用函数</span></span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>] = <span class="string">&quot;UP&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Down&quot;</span>] = <span class="string">&quot;DOWN&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Left&quot;</span>] = <span class="string">&quot;LEFT&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Right&quot;</span>] = <span class="string">&quot;RIGHT&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));  <span class="comment">// Direction: &#123; Up: &#x27;UP&#x27;, Down: &#x27;DOWN&#x27;, Left: &#x27;LEFT&#x27;, Right: &#x27;RIGHT&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方向：&quot;</span> + direction);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);  <span class="comment">// 方向：UP</span></span><br></pre></td></tr></table></figure><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><p>通过管道 <code>|</code> 将变量设置多种类型，其中任意一种。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">string</span>|<span class="built_in">number</span>|<span class="built_in">boolean</span>)[] = [<span class="string">&quot;hello&quot;</span>, <span class="number">123</span>, <span class="literal">true</span>]</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&quot;world&quot;</span>);  <span class="comment">// OK</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="literal">null</span>);     <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h4 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h4><p>通过 <code>&amp;</code> 将变量设置多种类型，所有类型都必须满足。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greetPerson</span>(<span class="params">person: Person &amp; &#123; gender: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;person.name&#125;</span>! You are <span class="subst">$&#123;person.age&#125;</span> years old. You are a <span class="subst">$&#123;person.gender&#125;</span>.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">john</span>: <span class="title class_">Person</span> &amp; &#123; <span class="attr">gender</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greetPerson</span>(john);</span><br></pre></td></tr></table></figure><p>同名属性类型冲突处理：视为联合类型</p><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>若自动推断出来的类型是 <code>number|undefined</code>，可以自己断言明确变量类型</p><p>将一个变量或表达式转换为另一种类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换 HTMLElement | null，获得href属性</span></span><br><span class="line"><span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLAnchorElement</span></span><br><span class="line">consl.<span class="title function_">log</span>(aLink.<span class="property">href</span>)</span><br></pre></td></tr></table></figure><h4 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h4><p>通过 <code>typeof</code> 关键字，判断变量是否属于某种类型。</p><p>在类型上下位中，引用变量的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isNumber</span>(<span class="params">value: <span class="built_in">any</span></span>): value is <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isNumber</span>(x) &amp;&amp; <span class="title function_">isNumber</span>(y)) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Both arguments must be numbers.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h3><p>一种类型的值是否可以被视为另一种类型的值？</p><blockquote><p>TS 属于Structural Type System（结构化类型系统）：<br>结构（属性和方法）相同的类型之间兼容</p></blockquote><p><strong>对象&#x2F;接口</strong>：X是Y的子集 -&gt; X兼容Y</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point2D</span> &#123; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">Point2D</span> = <span class="keyword">new</span> <span class="title class_">Point3D</span>()   <span class="comment">// 成员多的可以赋值给少的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> P2D &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="variable constant_">P2D</span> = <span class="keyword">new</span> <span class="title class_">Point3D</span>()   <span class="comment">// 接口同理</span></span><br></pre></td></tr></table></figure><p><strong>函数</strong>：类型相同</p><ul><li>X参数比Y多 -&gt; X兼容Y</li><li>返回值：同 对象的兼容性</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F3</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F4</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> = f1</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f7</span>: <span class="variable constant_">F7</span> = <span class="attr">f8</span>: <span class="variable constant_">F8</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>参数 + 返回值</strong> 的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myAdd = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x+y;</span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>参数名后添加 <code>?</code>，表示参数可选。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span>, age?: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (age) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>! You are <span class="subst">$&#123;age&#125;</span> years old.`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet2</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span> = <span class="number">18</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>! You are <span class="subst">$&#123;age&#125;</span> years old.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;Alex&quot;</span>, <span class="number">30</span>); <span class="comment">// Hello, Alex! You are 30 years old.</span></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&quot;Ben&quot;</span>);     <span class="comment">// Hello, Ben!</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">greet2</span>(<span class="string">&quot;Chloe&quot;</span>); <span class="comment">// Hello, Chloe! You are 18 years old.</span></span><br></pre></td></tr></table></figure><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        result += numbers[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// Output: 6</span></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><strong>属性 + 方法</strong> 的类型</p><ul><li>一行内写多个：加 <code>;</code> 分隔</li><li>方法可用箭头函数形式</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="attr">sayHi</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>; <span class="title function_">greet</span>(<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">name</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myAxios</span>(<span class="params">config: &#123; url: <span class="built_in">string</span>; method?: <span class="built_in">string</span> &#125;</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>为了给对象指定类型，实现复用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123; <span class="comment">// 定义接口</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口和类型别名对比</strong></p><ul><li>接口仅为对象指定类型</li><li>类型别名可以给任意（复杂）类型起别名</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IPerson</span> = &#123;    <span class="comment">// 定义类型别名</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象类和接口的区别</strong></p><ul><li>继承：一个类只能继承一个抽象类，可以实现多个接口。</li><li>抽象类可以包含一些具体的方法（有实现），可以有构造函数和成员变量。接口（Interface）仅定义结构，不能包含任何实现。接口的所有属性和方法默认为抽象的，不能有构造函数。</li><li>接口不能使用访问修饰符，所有属性和方法默认是 public</li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>不仅是class, 还作为一种类型存在</p><ul><li><code>public</code> 默认，外部可访问</li><li><code>private</code> 私有，外部不可访问</li><li><code>protected</code> 受保护，外部不可访问，子类可访问</li><li><code>readonly</code> 只读属性，仅在构造函数中初始化赋值<ul><li>需供明确的类型</li><li>接口中也能用</li></ul></li><li><code>static</code> 静态属性，类中所有实例共享</li><li><code>abstract</code> 抽象类，不能实例化，子类必须实现抽象方法</li></ul><p>声明成员方法： <code>sayHi (params) &#123;xxx&#125;</code> 不用关键字</p><p>存取器: <code>get</code> 和 <code>set</code> 方法，用于访问和修改属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">// 默认不加的为public</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span> <span class="comment">//私有成员，外部无法访问</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">gender</span>: <span class="built_in">boolean</span> <span class="comment">// 外部无法访问，子类可以访问</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">rid</span>: <span class="built_in">number</span> <span class="comment">// 只能在构造函数中初始化</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, rid: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = <span class="literal">true</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rid</span> = rid</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="attr">msg</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, <span class="subst">$&#123;msg&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="attr">identity</span>: <span class="built_in">string</span> = <span class="string">&#x27;student&#x27;</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">gender</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">15</span>, <span class="number">123</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tom)    <span class="comment">// &#123; name: &#x27;tom&#x27;, age: 15, gender: true, identity:&#x27;student&#x27;, rid: 123 &#125;</span></span><br><span class="line">tom.<span class="title function_">sayHi</span>(<span class="string">&#x27;hello&#x27;</span>)  <span class="comment">// Output: I am tom, hello</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> num = <span class="number">0</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="property">num</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is eating`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">sleep</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is sleeping`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;wangcai&#x27;</span>)</span><br><span class="line">dog.<span class="title function_">eat</span>()  <span class="comment">// Output: wangcai is eating</span></span><br><span class="line">dog.<span class="title function_">sleep</span>()  <span class="comment">// Output: wangcai is sleeping</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property">num</span>)  <span class="comment">// Output: 1</span></span><br></pre></td></tr></table></figure><h4 id="继承与实现"><a href="#继承与实现" class="headerlink" title="继承与实现"></a>继承与实现</h4><ul><li><code>extends</code> 继承父类</li><li><code>implements</code> 实现接口</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Singale</span> &#123;</span><br><span class="line">  <span class="title function_">sing</span>(): <span class="built_in">void</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prompt</span> <span class="keyword">implements</span> <span class="title class_">Singale</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;CNM&#x27;</span></span><br><span class="line">  <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;阿米诺斯&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法拓展"><a href="#方法拓展" class="headerlink" title="方法拓展"></a>方法拓展</h4><ul><li><code>Object.assign()</code> 合并对象</li><li><code>Object.create()</code> 创建对象</li><li><code>Object.getOwnPropertyDescriptor()</code> 获取属性描述符</li><li><code>Object.getOwnPropertyNames()</code> 获取所有属性名</li><li><code>Object.getOwnPropertySymbols()</code> 获取所有 Symbol 属性名</li><li><code>Object.getPrototypeOf()</code> 获取原型对象</li><li><code>Object.setPrototypeOf()</code> 设置原型对象</li><li><code>Object.is()</code> 判断两个值是否相等</li><li><code>Object.keys()</code> 获取对象所有可枚举属性名</li><li><code>Object.values()</code> 获取对象所有可枚举属性值</li><li><code>Object.entries()</code> 获取对象所有可枚举属性名和值</li><li><code>Object.fromEntries()</code> 从键值对数组创建对象</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">grade</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">student</span>: <span class="title class_">Student</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(person, &#123; <span class="attr">grade</span>: <span class="number">3</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student)  <span class="comment">// Output: &#123; name: &#x27;Alex&#x27;, age: 18, grade: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Alex&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)  <span class="comment">// Output: &#123; name: &#x27;Alex&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(desc)  <span class="comment">// Output: &#123; value: &#x27;Alex&#x27;, writable: true, enumerable: true, configurable: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names)  <span class="comment">// Output: [ &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols)  <span class="comment">// Output: []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proto)  <span class="comment">// Output: &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(student, obj2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(student))  <span class="comment">// Output: &#123; name: &#x27;Alex&#x27;, age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">1</span>, <span class="number">1</span>))  <span class="comment">// Output: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>))  <span class="comment">// Output: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys)  <span class="comment">// Output: [ &#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values)  <span class="comment">// Output: [ &#x27;Alex&#x27;, 18, &#x27;female&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(entries)  <span class="comment">// Output: [ [ &#x27;name&#x27;, &#x27;Alex&#x27; ], [ &#x27;age&#x27;, 18 ], [ &#x27;gender&#x27;, &#x27;female&#x27; ] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alex&#x27;</span>], [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4)  <span class="comment">// Output: &#123; name: &#x27;Alex&#x27;, age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Excluded</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OmitPerson</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="title class_">Excluded</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person2</span>: <span class="title class_">OmitPerson</span> = &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2)  <span class="comment">// Output: &#123; gender: &#x27;female&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Extracted</span> = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ExtractPerson</span> = <span class="title class_">Extract</span>&lt;<span class="title class_">Person</span>, <span class="title class_">Extracted</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person3</span>: <span class="title class_">ExtractPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person3)  <span class="comment">// Output: &#123; name: &#x27;Alex&#x27;, age: 18 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NonNullablePerson</span> = <span class="title class_">NonNullable</span>&lt;<span class="title class_">Person</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person4</span>: <span class="title class_">NonNullablePerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person4)  <span class="comment">// Output: &#123; name: &#x27;Alex&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>允许函数、类、接口、类型别名，实现复用，在定义时使用类型参数。</p></blockquote><p><code>&lt;T&gt;</code> 定义一个类型变量，调用时指定类型（可自动推断）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(output)   <span class="comment">// Output: hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: T[] = []</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">item: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(): T | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">pop</span>())  <span class="comment">// Output: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">pop</span>())  <span class="comment">// Output: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">pop</span>())  <span class="comment">// Output: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">pop</span>())  <span class="comment">// Output: undefined</span></span><br></pre></td></tr></table></figure><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><ul><li>创建具有 <code>length</code> 属性的约束接口 <code>ILength</code></li><li>函数的参数类型使用 <code>extends</code> 关键字添加约束，要求<strong>返回类型 <code>T</code> 必须具有相应属性</strong></li><li>第二个类型变量 <code>Key</code>，受 <code>T</code> 约束，即只能是 <code>Type</code> 所有键中的任意一个，或者说只能访问对象中存在的属性</li></ul><blockquote><p><code>keyof</code> 关键字接收一个对象类型，生成其键名称（可能是字符串或数字）的联合类型</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILength</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getLength&lt;T <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getLength</span>(<span class="string">&#x27;hello&#x27;</span>))  <span class="comment">// Output: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getLength</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]))  <span class="comment">// Output: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getLength</span>(&#123; <span class="attr">length</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span> &#125;))  <span class="comment">// Output: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getLength</span>(<span class="number">123</span>))  <span class="comment">// Error: Type &#x27;number&#x27; is not assignable to type &#x27;ILength&#x27;.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getProp&lt;<span class="title class_">Type</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getProp</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;, <span class="string">&#x27;age&#x27;</span>)  <span class="comment">// 18</span></span><br><span class="line"><span class="title function_">getProp</span>(<span class="number">18</span>, <span class="string">&#x27;toFixed&#x27;</span>)  <span class="comment">// [Function: toFixed]</span></span><br><span class="line"><span class="title function_">getProp</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="number">1</span>)   <span class="comment">// b</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;object&#x27;</span>[<span class="number">1</span>]) <span class="comment">// Output: b</span></span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><ul><li>添加类型变量 <code>&lt;T&gt;</code>，接口中所有其他成员可以使用 <code>T</code></li><li>使用时需要显式指定</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IArray</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">push</span>(<span class="attr">item</span>: T): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">pop</span>(): T | <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">IArray</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: T[] = []</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">item: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(): T | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>())  <span class="comment">// Output: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>())  <span class="comment">// Output: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>())  <span class="comment">// Output: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>())  <span class="comment">// Output: undefined</span></span><br></pre></td></tr></table></figure><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: T</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getData</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> box = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="title function_">getData</span>())  <span class="comment">// Output: hello</span></span><br></pre></td></tr></table></figure><h3 id="工具类型"><a href="#工具类型" class="headerlink" title="工具类型"></a>工具类型</h3><ul><li><code>Partial&lt;T&gt;</code> 所有属性可选</li><li><code>Readonly&lt;T&gt;</code> 所有属性只读</li><li><code>Required&lt;T&gt;</code> 所有属性必填</li><li><code>Pick&lt;T, K&gt;</code> 选择属性 <code>K</code></li><li><code>Omit&lt;T, K&gt;</code> 排除属性 <code>K</code></li><li><code>Record&lt;K, T&gt;</code> 创建一个对象，其键为 <code>K</code>，值为 <code>T</code></li><li><code>Exclude&lt;T, U&gt;</code> 从 <code>T</code> 中排除 <code>U</code></li><li><code>Extract&lt;T, U&gt;</code> 提取 <code>T</code> 中存在于 <code>U</code> 的类型</li><li><code>NonNullable&lt;T&gt;</code> 排除 <code>null</code> 和 <code>undefined</code></li><li><code>Parameters&lt;T&gt;</code> 获取函数参数类型</li><li><code>ConstructorParameters&lt;T&gt;</code> 获取构造函数参数类型</li><li><code>ReturnType&lt;T&gt;</code> 获取函数返回值类型</li><li><code>InstanceType&lt;T&gt;</code> 获取构造函数返回值类型</li><li><code>ThisType&lt;T&gt;</code> 用于 <code>this</code> 类型推断</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Omit</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U? <span class="built_in">never</span> : T</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NonNullable</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? <span class="built_in">never</span> : T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Parameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: infer P) =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConstructorParameters</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: infer P) =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">never</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">InstanceType</span>&lt;T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ThisType</span>&lt;T&gt; = T <span class="keyword">extends</span> infer R ? <span class="title class_">ThisType</span>&lt;R&gt; : T</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>es6新增</p><ul><li>数据类型：Symbol</li><li>两种数据结构：Set、Map</li></ul><p>symbol是为了标识唯一性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h2&gt;&lt;p&gt;JavaScript 的超集，&lt;strong&gt;面向对象&lt;/strong&gt;、类型检测等&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="web前端" scheme="https://alexiangyu.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Web原生</title>
    <link href="https://alexiangyu.github.io/2024/08/23/Web%E5%8E%9F%E7%94%9F/"/>
    <id>https://alexiangyu.github.io/2024/08/23/Web%E5%8E%9F%E7%94%9F/</id>
    <published>2024-08-23T06:47:41.000Z</published>
    <updated>2025-01-05T11:41:13.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h2><p>从原生层面实现组件化</p><ul><li>HTML template（HTML 模板）：HTML 片段 标签 <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 加入自定义多次重用</li><li>Custom element（自定义元素）：一组 JavaScript API，允许定义 custom elements 及其行为，</li><li>Shadow DOM（影子 DOM）：将封装的“影子”DOM树附加到元素（与主文档 DOM 分开呈现）。保持元素的 js、css 私有</li></ul><p>demo如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-component</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-component</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>This is a slot content<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;/<span class="name">hello-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello-component</span> <span class="attr">name</span>=<span class="string">&quot;world&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;hello-app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">15px</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: fit-content;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.sl</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            Hello, this is a web component instance. <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sl&quot;</span>&gt;</span>default content<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">HelloComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;      <span class="comment">// 组件定义</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#hello-app&#x27;</span>);    <span class="comment">// 获取模板</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);     <span class="comment">// 创建shadow dom       元素可以从 js 外部访问根节点</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                shadowRoot.<span class="title function_">appendChild</span>(template.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));    <span class="comment">// 克隆模板内容到shadow dom</span></span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> cName = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>);    <span class="comment">// 获取name属性</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (cName) </span></span><br><span class="line"><span class="language-javascript">                    shadowRoot.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">textContent</span> = <span class="string">`Hello, <span class="subst">$&#123; cName &#125;</span>!`</span>;    <span class="comment">// 获取name属性并设置div内容</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> button = <span class="variable language_">this</span>.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;Hello, web components!&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;    <span class="comment">// 组件连接到dom</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloComponent connected&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">disconnnectedCallback</span>(<span class="params"></span>) &#123;    <span class="comment">// 组件从dom断开连接</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloComponent disconnected&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">adoptedCallback</span>(<span class="params"></span>) &#123;    <span class="comment">// 组件被adopted时触发</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;HelloComponent adopted&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>) &#123;    <span class="comment">// 属性变化时触发</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Attribute <span class="subst">$&#123;name&#125;</span> changed from <span class="subst">$&#123;oldValue&#125;</span> to <span class="subst">$&#123;newValue&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        customElements.<span class="title function_">define</span>(<span class="string">&#x27;hello-component&#x27;</span>, <span class="title class_">HelloComponent</span>)     <span class="comment">// 发布自定义元素</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><p>添加属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello-component</span> <span class="attr">id</span>=<span class="string">&quot;comp1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello-component</span> <span class="attr">id</span>=<span class="string">&quot;comp2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comp1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#comp1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comp2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#comp2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    comp1.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    comp2.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;web components&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello-component</span> <span class="attr">id</span>=<span class="string">&quot;comp1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hello-component</span> <span class="attr">id</span>=<span class="string">&quot;comp2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comp1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#comp1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comp2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#comp2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    comp1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello from <span class="subst">$&#123;event.target.getAttribute(<span class="string">&#x27;name&#x27;</span>)&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    comp2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello from <span class="subst">$&#123;event.target.getAttribute(<span class="string">&#x27;name&#x27;</span>)&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    comp1.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;hello&#x27;</span>, &#123; <span class="attr">detail</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;world&#x27;</span> &#125; &#125;));</span></span><br><span class="line"><span class="language-javascript">    comp2.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;hello&#x27;</span>, &#123; <span class="attr">detail</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;web components&#x27;</span> &#125; &#125;));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>钩子&#x2F;回调函数：</p><ul><li>connectedCallback()：组件被插入文档时调用</li><li>disconnectedCallback()：组件被移除文档时调用</li><li>adoptedCallback()：组件被移动到新文档时调用</li><li>attributeChangedCallback(name, oldValue, newValue)：组件属性变化时调用</li></ul><h4 id="实现自定义元素"><a href="#实现自定义元素" class="headerlink" title="实现自定义元素"></a>实现自定义元素</h4><ul><li>自定义元素名称以小写字母开头，必须包含连字符（a-z、A-Z、-）<ul><li>未定义元素DOM不作解析，属于 <code>HTMLUnknownElement</code> 对象</li><li>而符合标准的自定义元素为 <code>HTMLElement</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-element</span> <span class="attr">content</span>=<span class="string">&quot;Custom Element&quot;</span>&gt;</span></span><br><span class="line">  Hello</span><br><span class="line"><span class="tag">&lt;/<span class="name">my-element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">MyElement</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;   <span class="comment">// 通过类定义自定义元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">get</span> <span class="title function_">content</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">set</span> <span class="title function_">content</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;content&#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-element&#x27;</span>, <span class="title class_">MyElement</span>); <span class="comment">// 注册自定义元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 处理脚本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">myElementHandler</span>(<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        element.<span class="property">textContent</span> = element.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">content</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;my-element&#x27;</span>)).<span class="title function_">forEach</span>(myElementHandler);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>呈现结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-element</span> <span class="attr">content</span>=<span class="string">&quot;Custom Element&quot;</span>&gt;</span></span><br><span class="line">  Custom Element</span><br><span class="line"><span class="tag">&lt;/<span class="name">my-element</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components">mozilla: Web Components</a></li><li><a href="https://www.webcomponents.org/">webcore: Custom Elements</a></li><li><a href="https://juejin.cn/column/7140105636720836622">Web Components 从入门到 「放弃」</a></li></ul><h2 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h2><p>WebAssembly（wasm）是一种低级虚拟机指令集，它是一种可移植、体积小、加载快、安全的二进制指令集，可以用来运行在现代 web 浏览器和其他环境中。</p><p>主要用于浏览器内的客户端应用提升性能</p><p>由以下三个部分组成：</p><ul><li>二进制指令集：WebAssembly 定义了一种基于堆栈的指令集，类似于汇编语言。</li><li>编译器：将高级编程语言编译成 WebAssembly 代码。</li><li>运行时：负责解释和执行 WebAssembly 代码。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wasmCode = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;example.wasm&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">arrayBuffer</span>());</span><br><span class="line"><span class="keyword">const</span> wasmModule = <span class="keyword">await</span> <span class="title class_">WebAssembly</span>.<span class="title function_">compile</span>(wasmCode);</span><br><span class="line"><span class="keyword">const</span> wasmInstance = <span class="keyword">await</span> <span class="title class_">WebAssembly</span>.<span class="title function_">instantiate</span>(wasmModule);</span><br><span class="line"><span class="keyword">const</span> result = wasmInstance.<span class="property">exports</span>.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Web-Components&quot;&gt;&lt;a href=&quot;#Web-Components&quot; class=&quot;headerlink&quot; title=&quot;Web Components&quot;&gt;&lt;/a&gt;Web Components&lt;/h2&gt;&lt;p&gt;从原生层面实现组件化&lt;/p&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="web前端" scheme="https://alexiangyu.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>React 笔记</title>
    <link href="https://alexiangyu.github.io/2024/08/21/React%E7%AC%94%E8%AE%B0/"/>
    <id>https://alexiangyu.github.io/2024/08/21/React%E7%AC%94%E8%AE%B0/</id>
    <published>2024-08-21T14:43:01.000Z</published>
    <updated>2025-01-05T11:41:50.873Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Thinking in React</strong></p><p>声明式+组件化+跨平台</p><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>语法扩展：js代码中编写HTML模板。可以被编译成JavaScript函数。</p><ul><li><code>&#123; &#125;</code> 表达式插值</li><li>外层仅识别一对标签: 引入<code>Fragment</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> list = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;apple&quot;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;banana&quot;</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;orange&quot;</span>, <span class="attr">price</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;list.id&#125;</span>&gt;</span> &#123; list.map((item, index) =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item.name&#125; - &#123;item.price&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>) &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Babel 转译</strong>： React.createElement() 函数调用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 得到的 React元素</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   type: &#x27;h1&#x27;,</span></span><br><span class="line"><span class="comment">//   props: &#123;</span></span><br><span class="line"><span class="comment">//     className: &#x27;greeting&#x27;,</span></span><br><span class="line"><span class="comment">//     children: &#x27;Hello, world!&#x27;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></figure><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>命名：<code>on</code> + 事件类型，如 <code>onClick</code> </p><p>可以传递参数、事件对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">e, name</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clicked&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> handleClick(e, &quot;apple&quot;)&#125;&gt;Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>class类名控制：<code>className</code> 需导入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import &#x27;./foo.css&#x27;;</span></span><br><span class="line">&lt;span className=<span class="string">&quot;foo&quot;</span>&gt;<span class="title class_">This</span> is a span&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>支持 CSS Modules 语法：<code>import styles from &#39;./foo.module.css&#39;;</code></p><p>CSS in JS：<code>style=&#123;&#123; backgroundColor: 'red' &#125;&#125;</code></p><h4 id="获取DOM节点"><a href="#获取DOM节点" class="headerlink" title="获取DOM节点"></a>获取DOM节点</h4><ul><li><code>useRef()</code>：获取ref的引用</li><li><code>ref</code> 属性：组件实例的 DOM 节点</li><li><code>inputRef.current</code>：在js中DOM节点的引用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Focus<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p>hook函数：<code>useState()</code></p><p>为组件添加状态：<code>const [count, setCount] = useState(0);</code> </p><ul><li><code>count</code> 只读的状态变量</li><li><code>setCount</code> 更新状态的函数</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleIncrement</span> = (<span class="params"></span>) =&gt; &#123; <span class="title function_">setCount</span>(count + <span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleDecrement</span> = (<span class="params"></span>) =&gt; &#123; <span class="title function_">setCount</span>(count - <span class="number">1</span>) &#125;;</span><br><span class="line">  <span class="comment">// 计数器组件</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象类型状态修改：展开+赋值</p><p>表单双向绑定：<code>value</code> + <code>onChange</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setValue(e.target.value)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>使用函数的定义，首字母大写</p><p>返回一个 JSX 元素 （最终渲染的结果）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">name</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">name</span>=<span class="string">&quot;React&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类组件：</p><ul><li><code>constructor(props)</code>：构造函数，接收 props</li><li><code>render()</code>：返回 JSX 元素</li></ul><p>属性</p><ul><li><code>props</code>：父组件传递给子组件的属性</li><li><code>state</code>：组件自身的状态，可通过 <code>this.setState()</code> 更新</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeting</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: props.<span class="property">name</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.state.name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">name</span>=<span class="string">&quot;World&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Greeting</span> <span class="attr">name</span>=<span class="string">&quot;React&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><ul><li><code>props</code>：父组件 -&gt; 子组件<ul><li><code>props.children</code>: 接收插槽内容: jsx</li></ul></li><li>回调函数：子组件 -&gt; 父组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MsgContext</span> = <span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setName</span>(<span class="string">&quot;Mike&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>From Parent<span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">&#123; name, onClick, children &#125;</span>) &#123;   <span class="comment">// 解构接收 props</span></span><br><span class="line">  <span class="keyword">const</span> msg = <span class="title function_">useContext</span>(<span class="title class_">MsgContext</span>)     <span class="comment">// 接收 context 上下文内容</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Change name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">MsgContext.Provider</span> <span class="attr">value</span>=<span class="string">&quot;YzxNmsl&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">Parent</span>/&gt;</span> <span class="tag">&lt;/<span class="name">MsgContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="context机制"><a href="#context机制" class="headerlink" title="context机制"></a>context机制</h4><p>共享状态，向后代传递数据，通过 <code>context</code> 接收。</p><p>多级穿透</p><ul><li><code>const Ctx = createContext()</code>：创建上下文对象</li><li><code>&lt;Ctx.Provider value=&quot;xxx&quot;&gt; &lt;/Ctx.Provider&gt;</code>：祖代 提供上下文</li><li><code>const msg = useContext(Ctx)</code>: 后代 获取上下文</li></ul><p><strong>向子组件批量添加属性</strong></p><p>通过 <code>React.cloneElement</code> 方法复制该子组件，添加共享属性并返回</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">SizeWrapper</span> = (<span class="params">&#123; commonProps &#125;</span>) =&gt; &#123;  </span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">      &#123;  </span></span><br><span class="line"><span class="language-xml">        React.Children.map(children, (child) =&gt; &#123;  </span></span><br><span class="line"><span class="language-xml">          if (child &amp;&amp; child.props) &#123;  </span></span><br><span class="line"><span class="language-xml">            return React.cloneElement(child, commonProps);  </span></span><br><span class="line"><span class="language-xml">          &#125;  </span></span><br><span class="line"><span class="language-xml">          return child;  </span></span><br><span class="line"><span class="language-xml">        &#125;)  </span></span><br><span class="line"><span class="language-xml">      &#125;  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于所有子组件都添加了 <code>size=&#123;props.size&#125;</code> 属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">SizeWrapper</span> size=&#123;props.<span class="property">size</span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">value</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">InputTag</span> <span class="attr">value</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">input-tag</span>&#x27;]&#125; /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">InputNumber</span> <span class="attr">value</span>=<span class="string">&#123;100&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">SizeWrapper</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="ref转发"><a href="#ref转发" class="headerlink" title="ref转发"></a>ref转发</h4><p>通过 <code>forwardRef</code> 转发ref，让外部组件能够访问 <code>FormComponent</code> 中的方法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FormComponentWithRef</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;     <span class="comment">// 转发 ref  </span></span><br><span class="line">    <span class="keyword">const</span> [formInstance] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>();    <span class="comment">// Antd Form</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 ref 添加 change, clear 方法</span></span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;  </span><br><span class="line">        <span class="attr">change</span>: <span class="function">() =&gt;</span> formInstance.<span class="title function_">setFieldsValue</span>(newValue),  </span><br><span class="line">        <span class="attr">clear</span>: <span class="function">() =&gt;</span> formInstance.<span class="title function_">clearFields</span>([<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>]),  </span><br><span class="line">    &#125;));  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (  </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">form</span>=<span class="string">&#123;formInstance&#125;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">field</span>=<span class="string">&quot;username&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;please enter your username...&quot;</span> /&gt;</span>  </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">label</span>=<span class="string">&quot;Email&quot;</span> <span class="attr">field</span>=<span class="string">&quot;email&quot;</span>&gt;</span>  </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;please enter your email...&quot;</span> /&gt;</span>  </span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span>  </span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>外层组件中可调用 <code>change</code>, <code>clear</code> 方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">FormWrapper</span> = (<span class="params"></span>) =&gt; &#123;  </span><br><span class="line">    <span class="keyword">const</span> formRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">b</span>&gt;</span>Wrapper Operations:<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> formRef.current?.change()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    Change</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> formRef.current?.clear()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    Clear</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">FormComponentWithRef</span> <span class="attr">ref</span>=<span class="string">&#123;formRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于组件挂载位置</strong></p><p>如果传入 <code>container</code>，则渲染到指定容器中，否则渲染到组件树中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPortal &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CustomButton</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; container, color &#125; = props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">DemoButton</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span>&gt;</span>&#123;color&#125; - 按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> containerElem = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> container?.()</span><br><span class="line">    &#125;, [container])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (containerElem) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">createPortal</span>(<span class="title class_">DemoButton</span>, containerElem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">DemoButton</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React-DOM 提供了 <code>createPortal</code> 方法，可以将子组件渲染到指定 DOM 节点中。</p><p>portal 内触发的事件，会冒泡到 React 组件树的祖先，而不是实际 DOM 树上。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><ul><li><code>componentDidMount()</code>：组件挂载后执行</li><li><code>componentWillUnmount()</code>：组件卸载前执行</li><li><code>componentDidUpdate(prevProps, prevState)</code>：组件更新后执行</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentDidMount&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentWillUnmount&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentDidUpdate&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleDecrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> - <span class="number">1</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><ul><li><code>useState()</code>：状态钩子</li><li><code>useEffect()</code>：副作用钩子</li><li><code>useContext()</code>：上下文钩子</li><li><code>useReducer()</code>：自定义 reducer 钩子</li><li><code>useCallback()</code>：回调钩子</li><li><code>useMemo()</code>：缓存钩子</li><li><code>useRef()</code>：ref 钩子</li><li><code>useImperativeHandle()</code>：自定义暴露钩子</li><li><code>useLayoutEffect()</code>：布局钩子</li></ul><p>仅保存，不需要重渲染的数据可用 <code>useRef()</code></p><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p>副作用钩子，仅在特定条件下执行：</p><ol><li>接收一个函数，创建副作用操作，函数中可以有异步操作（发送AJAX请求，更改DOM等），可以返回一个清除副作用的函数。</li><li>传入依赖项指定执行时机：</li></ol><table><thead><tr><th><strong>依赖项</strong></th><th><strong>副作用功函数的执行时机</strong></th></tr></thead><tbody><tr><td>没有依赖项</td><td>组件初始渲染 + 组件更新时执行</td></tr><tr><td><code>[]</code></td><td>只在初始渲染时执行一次</td></tr><tr><td><code>[prop1, prop2]</code></td><td>组件初始渲染 + 当 <code>prop1</code> 或 <code>prop2</code> 变化时执行</td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect&quot;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleIncrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleDecrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count - <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><ul><li>自定义 reducer 钩子</li><li>接收 reducer 函数和初始状态</li><li>返回当前状态和 dispatch 方法</li><li>可以通过 dispatch 方法触发 reducer 函数，更新状态</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;update&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> action.<span class="property">payload</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> <span class="attr">-</span>&gt;</span> dispatch(&#123; type: &quot;increment&quot; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> <span class="attr">-</span>&gt;</span> dispatch(&#123; type: &quot;decrement&quot; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> <span class="attr">-</span>&gt;</span> dispatch(&#123; type: &quot;set&quot;, payload: 10 &#125;)&#125;&gt;update to 10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义Hook</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useToggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [isToggled, setIsToggled] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsToggled</span>(<span class="function"><span class="params">prev</span> =&gt;</span>!prev)</span><br><span class="line">    <span class="keyword">return</span> [isToggled, toggle]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [isToggled, toggle] = <span class="title function_">useToggle</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;isToggled ? &quot;ON&quot; : &quot;OFF&quot;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggle&#125;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>集中状态管理工具</p><ol><li>定义 <code>reducer</code> 函数，接收 <code>state</code> 和 <code>action</code> 对象，返回新的 <code>state</code> 变化规则</li><li>创建 <code>store</code> 对象：使用 <code>createStore()</code>，传入 <code>reducer</code> 函数</li><li>使用 <code>store.subscribe()</code> 订阅 <code>state</code> 数据：变化时得到通知</li><li>使用 <code>store.dispatch()</code> 提交 <code>action</code> 对象，触发 <code>reducer</code> 函数更新 <code>state</code></li><li>使用 <code>store.getState()</code> 获取 <code>state</code></li></ol><p>使用 <code>React Toolkit</code>：<code>react-redux</code></p><ul><li><code>xxStore</code> 模块：<ol><li><code>createSlice()</code> 传入<code>name</code>, <code>initialState</code>, <code>reducers</code> 参数，创建 <code>xxStore</code> 对象</li><li>异步操作：导出单独封装的函数，返回相应异步操作，即 <code>action</code></li><li>导出 从 <code>xxStore.actions</code> 解构出来的actionCreater函数</li><li>默认导出 reducer <code>xxStore.reducer</code></li></ol></li><li>store的 <code>index</code> 入口文件：<ol><li><code>configureStore</code> 将所有模块的 <code>reducer</code> 合并成根<code>store</code>，统一导出</li></ol></li><li>在项目 <code>index.js</code> 中，将<code>store</code>注入React：<ol><li>导入 <code>Provider</code>, <code>store</code></li><li><code>&lt;Provider store=&#123;store&#125;&gt; &lt;App /&gt; &lt;/Provider&gt;</code>：为所有组件提供 <code>Redux store</code></li></ol></li><li>组件中使用<ol><li><code>useSelector()</code> ：从 <code>store</code> 中获取 <code>state</code></li><li><code>useDispatch()</code> ：获取 <code>dispatch</code> 函数，用于提交 <code>action</code></li></ol></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = initialState, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;increment&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;decrement&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useStore</span>(store);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleIncrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;increment&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleDecrement</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;decrement&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleIncrement&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleDecrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span>      </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reducer 为纯函数 -&gt; 处理 action 副作用</p><p>中间件，使用 thunk 实现异步操作</p><h2 id="ReactRouter"><a href="#ReactRouter" class="headerlink" title="ReactRouter"></a>ReactRouter</h2><blockquote><p><code>react-router</code>: 核心库，适用于多种环境，自定义路由的基础功能。而<br><code>react-router-dom</code> 是扩展库，专为浏览器环境设计，提供了许多网址导航功能，适合 Web 应用程序使用。</p></blockquote><ul><li>声明式导航：<code>&lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</code> 组件</li><li>编程式导航：<code>const navigate = useNavigate()</code> 钩子，得到导航方法</li></ul><h4 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h4><ul><li><code>BrowserRouter</code>：浏览器历史记录模式</li><li><code>HashRouter</code>：hash 路由模式</li></ul><table><thead><tr><th>路由模式</th><th>url表现</th><th>底层原理</th><th>创建函数</th><th>是否需要后端支持</th><th>使用场景</th></tr></thead><tbody><tr><td>history</td><td>url&#x2F;login</td><td>HTML的History接口，关于会话历史记录</td><td><code>createBrowserHistory()</code></td><td>需要</td><td>现代 SPA 应用</td></tr><tr><td>hash</td><td>url&#x2F;#&#x2F;login</td><td>监听hashChange事件</td><td><code>createHashHistory()</code></td><td>不需要</td><td>静态页面如 GitHub Pages</td></tr></tbody></table><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><ol><li>使用 <code>children</code> 属性配置路由嵌套关系  </li><li>二级路由渲染位置: <code>&lt;Outlet/&gt;</code> 组件</li></ol><p>微前端？</p><h2 id="架构解析"><a href="#架构解析" class="headerlink" title="架构解析"></a>架构解析</h2><h3 id="Fiber"><a href="#Fiber" class="headerlink" title="Fiber"></a>Fiber</h3><p>React 16版本对虚拟DOM的升级，解决DOM树更新效率问题。</p><p>拆分渲染任务，将渲染任务分解成更小的任务，并将任务存储在一个队列中，React可以根据优先级和时间分配资源，最大限度地提高渲染效率。</p><p>每个Fiber都代表了一个工作单元，React可以在处理任何Fiber之前判断是否有足够的时间完成该工作，并在必要时中断和恢复工作。</p><h4 id="工作单元"><a href="#工作单元" class="headerlink" title="工作单元"></a>工作单元</h4><ul><li>任务：渲染一个组件</li><li>工作单元：包含一个任务，包括组件类型、props、状态、子节点等信息</li><li>工作单元队列：包含多个工作单元，React会按顺序执行每个工作单元</li></ul><h3 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h3><ul><li>Scheduler：调度器，维护时间切片，管理工作单元队列，根据优先级和时间分配资源</li><li>Reconciler：协调器，负责对比新旧虚拟DOM树，计算出最小更新范围，并根据更新范围更新DOM树</li><li>Renderer：渲染器，负责将虚拟DOM渲染成真实DOM树</li></ul><p>比较 <code>current Tree</code> 和 <code>workInProgres Tree</code>：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Thinking in React&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;声明式+组件化+跨平台&lt;/p&gt;
&lt;h2 id=&quot;JSX&quot;&gt;&lt;a href=&quot;#JSX&quot; class=&quot;headerlink&quot; title=&quot;JSX&quot;&gt;&lt;/a&gt;JSX&lt;/h2&gt;&lt;p&gt;语法扩展：</summary>
      
    
    
    
    <category term="web前端" scheme="https://alexiangyu.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js相关知识</title>
    <link href="https://alexiangyu.github.io/2024/07/28/Node-js%E7%9B%B8%E5%85%B3/"/>
    <id>https://alexiangyu.github.io/2024/07/28/Node-js%E7%9B%B8%E5%85%B3/</id>
    <published>2024-07-28T12:33:26.000Z</published>
    <updated>2025-01-05T11:42:06.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>早期JS: 全局污染和依赖管理混乱</p><h3 id="Commonjs标准"><a href="#Commonjs标准" class="headerlink" title="Commonjs标准"></a>Commonjs标准</h3><p>主要在Node.js中实现模块化，在浏览器中需要用webpack编译打包处理（或Browserify实现）</p><ul><li>每一个 <code>.js</code> 文件都是一个单独的模块</li><li>核心变量: module、exports、require</li><li>对代码用函数包装</li><li>运行时同步加载</li></ul><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>为<code>module.exports</code>赋值，可以只导出一个类或函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">sayName</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入形参exports，添加属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = <span class="string">`《Node.js实践》`</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">author</span> = <span class="string">&#x27;AlexYu&#x27;</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">666</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// exports是传入到当前模块内的一个对象，不能直接赋值</span></span><br></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>require 加载文件：dfs，缓存避免重复加载、循环引用</p><p>顺序：当前目录node_modules -&gt; 上级目录的node_modules -&gt; index.js ，index.json ，index.node</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayName = <span class="built_in">require</span>(<span class="string">&#x27;./hello.js&#x27;</span>)</span><br><span class="line"><span class="title function_">sayName</span>()</span><br></pre></td></tr></table></figure><h3 id="ES6标准"><a href="#ES6标准" class="headerlink" title="ES6标准"></a>ES6标准</h3><ul><li>静态模块化，提前在编译时加载</li><li>命令 <code>export</code> 用于暴露接口， <code>import</code> 用于引入模块</li><li>运行时异步加载</li><li>代码中直接导入导出模块</li></ul><h4 id="命名导出-导入"><a href="#命名导出-导入" class="headerlink" title="命名导出&#x2F;导入"></a>命名导出&#x2F;导入</h4><ul><li>import { } 内部的变量名称，要与 export { } 完全匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sayName</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Node.js实践&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; a, b &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sayName, a, b &#125; <span class="keyword">from</span> <span class="string">&#x27;./hello.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">sayName</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="number">1</span>, b);</span><br></pre></td></tr></table></figure><h4 id="默认导出-导入"><a href="#默认导出-导入" class="headerlink" title="默认导出&#x2F;导入"></a>默认导出&#x2F;导入</h4><ul><li>export default 导出模块的默认接口，import 导入时可以省略接口名称</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&#x27;./exp_defualt.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)    <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27;, fn: [Function: fn] &#125;</span></span><br><span class="line">obj.<span class="title function_">fn</span>()           <span class="comment">// Hello John</span></span><br></pre></td></tr></table></figure><h4 id="混合导出-导入"><a href="#混合导出-导入" class="headerlink" title="混合导出&#x2F;导入"></a>混合导出&#x2F;导入</h4><ul><li>同时使用 export default 和 export 导入多个属性</li><li>重命名导入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;c, d&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> obj, &#123;c, d&#125; <span class="keyword">from</span> <span class="string">&#x27;./exp_defualt.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)    <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27;, fn: [Function: fn] &#125;</span></span><br><span class="line">obj.<span class="title function_">fn</span>()           <span class="comment">// Hello John</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c, d)   <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// as 重命名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> O <span class="keyword">from</span> <span class="string">&#x27;./exp_defualt.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(O) <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27;, fn: [Function: fn], c: 110, d: 120 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h4><p>语法：<code>import(module)</code></p><ul><li>运行时动态导入模块，避免打包体积过大</li><li>返回 Promise 对象，可以使用 then() 方法获取模块的接口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&#x27;./hello.js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Accepting the updated module!&#x27;</span>);</span><br><span class="line">    <span class="comment">// 重新导入模块</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The updated module:&#x27;</span>, <span class="variable language_">module</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thunk-是什么"><a href="#Thunk-是什么" class="headerlink" title="Thunk 是什么"></a>Thunk 是什么</h2><p>Thunk函数，它接受一个函数作为参数，返回一个函数，这个函数可以接受另一个参数，并返回一个值。主要用于延迟执行，可以将一些计算推迟到运行时执行，比如读取文件、网络请求等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filename, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(err);</span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;hello.txt&#x27;</span>)(<span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在redux中，Thunk用来处理异步任务，它可以让 action 处理函数返回一个函数。</p><p>Thunk middleware自动将返回的函数包裹在 dispatch 函数中，这样就可以在 action 处理函数中执行异步操作。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回的这个异步函数是一个 Thunk, 或者叫 ThunkAction</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (&#123; dispatch &#125;) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 额外的异步API调用</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> api.<span class="title function_">getUser</span>(id);</span><br><span class="line">    <span class="comment">// 此时才真正dispatch action</span></span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;UPDATE_USER&#x27;</span>, <span class="attr">payload</span>: user &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h2&gt;&lt;p&gt;早期JS: 全局污染和依赖管理混乱&lt;/p&gt;
&lt;h3 id=&quot;Commonjs标准&quot;&gt;&lt;a href=&quot;#Commonjs标准&quot; cl</summary>
      
    
    
    
    <category term="web前端" scheme="https://alexiangyu.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue用法</title>
    <link href="https://alexiangyu.github.io/2024/07/25/Vue%E7%94%A8%E6%B3%95/"/>
    <id>https://alexiangyu.github.io/2024/07/25/Vue%E7%94%A8%E6%B3%95/</id>
    <published>2024-07-25T02:47:32.000Z</published>
    <updated>2025-01-05T11:39:54.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h1><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h4><ul><li>父 -&gt; 子: props</li><li>子 -&gt; 父: $emit</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">APP组件</span><br><span class="line"><span class="comment">&lt;!-- 向子组件添加属性来传值，监听自定义事件接收 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">update:msg</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&#x27;Hello, parent!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;<span class="comment">// 回调的方法，形参为传回的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeMsg</span>(<span class="params">newMsg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">msg</span> = newMsg</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span> <span class="comment">&lt;!-- 可直接使用props --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>更新父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!-- 触发父组件的事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;child&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;<span class="comment">// 通过props接收</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="string">&#x27;Hello, child!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeMsg</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:msg&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>)<span class="comment">// $emit + 事件名，传回的数据</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="eventBus-任意组件传值"><a href="#eventBus-任意组件传值" class="headerlink" title="eventBus: 任意组件传值"></a>eventBus: 任意组件传值</h4><ul><li>通过<code>this.$bus.$on</code>接收</li><li>通过<code>this.$bus.$emit</code>发送</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意组件发送</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;update:msg&#x27;</span>, <span class="string">&#x27;Hello, any component!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;update:msg&#x27;</span>, <span class="function">(<span class="params">newMsg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">msg</span> = newMsg</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="一个祖先对任意后代注入"><a href="#一个祖先对任意后代注入" class="headerlink" title="一个祖先对任意后代注入"></a>一个祖先对任意后代注入</h4><ul><li>provide: 向后代提供数据</li><li>inject: 接收数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">ancestor组件</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;./child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">city</span>: <span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">progeny组件</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; city &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 直接使用inject的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;child&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inject</span>: [<span class="string">&#x27;city&#x27;</span>],<span class="comment">// 注入provide的数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">city</span>)<span class="comment">// 打印provide的数据</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vuex-全局状态管理"><a href="#Vuex-全局状态管理" class="headerlink" title="Vuex: 全局状态管理"></a>Vuex: 全局状态管理</h3><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h4 id="V-model封装原理"><a href="#V-model封装原理" class="headerlink" title="V-model封装原理"></a>V-model封装原理</h4><p><code>:value</code> 与 <code>@input</code> 实现绑定属性+监听事件的语法糖。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg = $event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>子组件中数据在props中，不能直接用 <code>v-model</code>。但父组件中可 <code>v-model</code> 绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">BaseSelect</span> <span class="attr">v-model</span>=<span class="string">&quot;selectId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">BaseSelect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">BaseSelect</span> <span class="keyword">from</span> <span class="string">&#x27;./components/BaseSelect.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">selectId</span>: <span class="string">&#x27;102&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">BaseSelect</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">:value</span>=<span class="string">&quot;selectId&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;selectCity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;102&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;103&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;104&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;105&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">selectId</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">selectCity</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changeCity&#x27;</span>, e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a><code>.sync</code> 修饰符</h4><p>父组件中使用<code>.sync</code>修饰符，实现双向绑定。</p><p>事件名为<code>update:xxx</code>。props值不必为<code>value</code>时使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- isShow.sync  =&gt; :isShow=&quot;isShow&quot; @update:isShow=&quot;isShow=$event&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseDialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">BaseDialog</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">inputChangeComp</span>(<span class="params">e</span>) &#123;  <span class="comment">// 子组件中</span></span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:visible&#x27;</span>, e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>父组件中使用<code>&lt;slot&gt;</code>标签，子组件中使用<code>slot</code>属性，将内容插入到插槽位置。</p><p><strong>组件内使用ref获取元素&#x2F;组件实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// $refs只会在当前组件查找盒子，而querySelector 会查找项目中所有的元素</span></span><br><span class="line">    <span class="comment">// 等价于 var myChart = echarts.init(document.querySelector(&#x27;.base-chart-box&#x27;))</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">baseChartBox</span>)</span><br><span class="line">    myChart.<span class="title function_">setOption</span>(&#123;    <span class="comment">// 绘制图表</span></span><br><span class="line">      <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div class=&quot;base-chart-box&quot; ref=&quot;baseChartBox&quot;&gt;子组件&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>$nextTick</strong></p><p>需要等到dom更新后，才能获取元素的引用，使用<code>$nextTick</code>方法，在下一个事件循环开始时执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;  <span class="comment">// 等待dom更新后，获取输入框的引用</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>();</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// setTimeout(()=&gt; &#123;        效果相同</span></span><br><span class="line"><span class="comment">//   this.$refs.inp.focus();</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><p>自定义指令</p><ul><li>全局注册：<code>Vue.directive(&#39;xxx&#39;, &#123;&#125;)</code></li><li>局部注册：<code>directives: &#123;&#125;</code></li></ul><p>传递指令的值：<code>binding.value</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: &#123;</span><br><span class="line">      inserted (el, binding) &#123;</span><br><span class="line">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div v-color=&quot;&#x27;</span>red<span class="string">&#x27;&quot;&gt;tex&lt;/div&gt;&#x27;</span>  <span class="comment">// 指令的值为字符串格式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><p><strong>setup选项</strong></p><p><code>&lt;script setup&gt;</code> 初始化</p><blockquote><p><code>setup()</code> 返回暴露对象，需要 <code>return</code> </p></blockquote><h3 id="响应式API"><a href="#响应式API" class="headerlink" title="响应式API"></a>响应式API</h3><ul><li><code>ref()</code>：接收简单类型或者对象类型的数据，返回响应式对象。</li><li><code>computed()</code>: 计算属性，返回计算结果。</li><li><code>watch()</code>: 观察数据变化，执行回调函数。<ul><li>immediate: 创建时立即执行回调函数。</li><li>deep: 深度监听。ref复杂类型用。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setCount</span> = (<span class="params"></span>) =&gt; &#123; count.<span class="property">value</span>++ &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性：依赖于响应式数据</span></span><br><span class="line"><span class="keyword">const</span> computedCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> onsole.<span class="title function_">log</span>(newValue, oldValue))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精确监听</span></span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> userInfo.<span class="property">value</span>.<span class="property">age</span>, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue))</span><br></pre></td></tr></table></figure><p><strong>父子组件通信</strong></p><ul><li><code>defineProps(&#123;name: String&#125;)</code>: 定义子组件接收的数据</li><li><code>defineEmits([&#39;event1&#39;, &#39;event2&#39;])</code>: 生成 <code>emit</code> 方法。</li></ul><p><strong>模板引用</strong></p><p>可以获取dom，也可以获取组件</p><ol><li><code>const testRef = ref(null)</code>: 生成一个ref对象</li><li><code>&lt;TestCom ref=&quot;testRef&quot;&gt;&lt;/TestCom&gt;</code>: 通过ref标识绑定</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import TestCom from &#x27;@/components/test-com.vue&#x27;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const testRef = ref(null)</span><br><span class="line">const getCom = () =&gt; &#123;</span><br><span class="line">  // 通过ref对象.value即可访问到绑定的元素(必须渲染完成后，才能拿到)</span><br><span class="line">  console.log(testRef.value.count)</span><br><span class="line">  testRef.value.sayHi()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;TestCom ref=&quot;testRef&quot;&gt;&lt;/TestCom&gt;</span><br><span class="line">  &lt;button @click=&quot;getCom&quot;&gt;获取组件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><code>defineExpose(&#123;name&#125;)</code>: 子组件向上暴露可引用的数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="number">999</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sayHi</span> = (<span class="params"></span>) =&gt; &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打招呼&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123; count, sayHi &#125;)</span><br></pre></td></tr></table></figure><p><strong>跨层组件通信</strong></p><p>provide和inject: 祖先组件向子孙后代提供数据&#x2F;方法。</p><ul><li><code>provide(&#39;key&#39;, obj)</code>: 顶层组传递</li><li><code>const count = inject(&#39;key&#39;)</code>: 接收数据</li></ul><p><strong>其他</strong></p><p><code>defineOptions(&#123;name: String&#125;)</code>: 定义 Options API 的选项。<code>props</code>, <code>emits</code>, <code>expose</code>, <code>slot</code> 除外。</p><blockquote><p>在自定义组件上使用v-model, 相当于传递一个modelValue属性，同时触发 update:modelVal</p></blockquote><p>使用 <code>defineModel()</code> 获得的 <code>modelValue</code> 可直接需改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineModel &#125; from &#x27;vue&#x27;</span><br><span class="line">const modelValue = defineModel()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;input </span><br><span class="line">    type=&quot;text&quot; </span><br><span class="line">    :value=&quot;modelValue&quot; </span><br><span class="line">    @input=&quot;e =&gt; modelValue = e.target.value&quot;</span><br><span class="line">  &gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h3><p>状态管理库，无 <code>mutation</code>，独立 <code>store</code>。</p><ul><li><code>defineStore(id, ()=&gt;&#123; &#125;)</code>: 创建一个 Pinia 仓库。</li><li>组合式函数：定义了一些响应式属性和方法，返回要暴露的内容。</li><li><code>storeToRefs()</code>: 解构出响应式对象。</li><li>action可直接解构。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; count, doubleCount, increment &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/store/counter&#x27;</span><br><span class="line">const counterStore = useCounterStore()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    x2倍count - &#123;&#123; counterStore.doubleCount &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;counterStore.increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>持久化：<code>pinia-plugin-persistedstate</code> 模块store中配置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2&quot;&gt;&lt;a href=&quot;#Vue2&quot; class=&quot;headerlink&quot; title=&quot;Vue2&quot;&gt;&lt;/a&gt;Vue2&lt;/h1&gt;&lt;h3 id=&quot;组件通信&quot;&gt;&lt;a href=&quot;#组件通信&quot; class=&quot;headerlink&quot; title=&quot;组件通信&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="web前端" scheme="https://alexiangyu.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>基础-网络相关</title>
    <link href="https://alexiangyu.github.io/2024/06/04/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
    <id>https://alexiangyu.github.io/2024/06/04/%E5%9F%BA%E7%A1%80-%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</id>
    <published>2024-06-04T10:31:01.000Z</published>
    <updated>2024-11-02T17:04:44.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>1xx (Informational) 信息性状态码</strong></p><ul><li><strong>100 Continue</strong>: 客户端应该继续发送请求。</li><li><strong>101 Switching Protocols</strong>: 服务器已切换协议。</li></ul><p><strong>2xx (Successful) 成功状态码</strong></p><ul><li><strong>200 OK</strong>: 请求已成功完成。</li><li><strong>201 Created</strong>: 新资源已创建。</li><li><strong>202 Accepted</strong>: 请求已接受，但尚未处理。</li><li><strong>204 No Content</strong>: 服务器成功处理了请求，但没有返回任何内容。</li><li><strong>206 Partial Content</strong>: 服务器已成功处理了部分请求。</li></ul><p><strong>3xx (Redirection) 重定向状态码</strong></p><ul><li><strong>301 Moved Permanently</strong>: 资源已永久移动到新位置。</li><li><strong>302 Found</strong>: 资源临时移动到新位置。</li><li><strong>304 Not Modified</strong>: 资源未修改，可以使用缓存中的版本。</li><li><strong>307 Temporary Redirect</strong>: 资源临时移动到新位置，使用 GET 或 HEAD 请求。</li><li><strong>308 Permanent Redirect</strong>: 资源永久移动到新位置，可以使用 GET 或 HEAD 请求。</li></ul><p><strong>4xx (Client Error) 客户端错误状态码</strong></p><ul><li><strong>400 Bad Request</strong>: 请求有语法错误。</li><li><strong>401 Unauthorized</strong>: 客户端未经授权。</li><li><strong>403 Forbidden</strong>: 服务器拒绝访问资源。</li><li><strong>404 Not Found</strong>: 服务器无法找到请求的资源。</li><li><strong>405 Method Not Allowed</strong>: 请求方法不被允许。</li><li><strong>408 Request Timeout</strong>: 请求超时。</li><li><strong>409 Conflict</strong>: 请求无法完成，因为与现有资源冲突。</li><li><strong>410 Gone</strong>: 资源已永久删除。</li><li><strong>411 Length Required</strong>: 必须提供内容长度。</li><li><strong>412 Precondition Failed</strong>: 请求条件不满足。</li><li><strong>413 Request Entity Too Large</strong>: 请求体过大。</li><li><strong>414 Request-URI Too Long</strong>: 请求 URI 过长。</li><li><strong>415 Unsupported Media Type</strong>: 服务器不支持请求的媒体类型。</li><li><strong>416 Requested Range Not Satisfiable</strong>: 请求的范围无法满足。</li><li><strong>417 Expectation Failed</strong>: 服务器无法满足“Expect”报头的期望。</li><li><strong>422 Unprocessable Entity</strong>: 请求无法处理。</li><li><strong>429 Too Many Requests</strong>: 客户端请求过多。</li></ul><p><strong>5xx (Server Error) 服务器错误状态码</strong></p><ul><li><strong>500 Internal Server Error</strong>: 服务器遇到错误，无法完成请求。</li><li><strong>501 Not Implemented</strong>: 服务器不支持请求功能。</li><li><strong>502 Bad Gateway</strong>: 服务器作为网关或代理时，从上游服务器接收到无效的响应。</li><li><strong>503 Service Unavailable</strong>: 服务器暂时无法处理请求。</li><li><strong>504 Gateway Timeout</strong>: 服务器作为网关或代理时，从上游服务器等待响应超时。</li><li><strong>505 HTTP Version Not Supported</strong>: 服务器不支持请求的 HTTP 版本。</li></ul><p><strong>示例：</strong></p><ul><li>网站无法找到你请求的页面， <strong>404 Not Found</strong> 错误。</li><li>需要登录的网站，但没有登录 <strong>401 Unauthorized</strong> 错误。</li><li>上传一个文件，但文件太大 <strong>413 Request Entity Too Large</strong> 错误。</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h4 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h4><p>一次请求&#x2F;响应完成后，一方主动关闭连接，客户端再次请求时，需要重新建立连接。</p><p>长连接：建立一次连接后，保持连接状态，可以发送多个请求，直到客户端主动关闭连接。多个HTTP请求可以复用同一个TCP连接</p><p>多用于操作频繁，点对点的通讯，而且连接数不能太多情况。对于服务端来说，长连接会耗费服务端的资源，如果有几十万，上百万的连接，服务端的压力会非常大，甚至会崩溃。所以对于并发量大，请求频率低的，建议使用短连接。</p><p>数据库、远程服务调用、消息队列、等场景适合使用长连接。</p><p>实现：<strong>心跳机制</strong> 服务器 KeepAlive 功能</p><p>存在队头堵塞？</p><h4 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h4><p>将多个 HTTP 请求整批提交的技术，</p><h4 id="QUIC"><a href="#QUIC" class="headerlink" title="QUIC"></a>QUIC</h4><p>Google 开发的的传输层协议，基于UDP（用户数据报协议），并集成了TLS（传输层安全协议），从而实现较低的延迟和快速的数据传输。</p><p>建立连接只需一次往返延迟（RTT）允许在一个连接中同时传输多个数据流，消除了队头阻塞的影响。适合移动设备</p><h4 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP&#x2F;2"></a>HTTP&#x2F;2</h4><p>HTTP&#x2F;2 采用二进制格式，支持多路复用，头部压缩，服务器推送等特性，可以更有效地利用网络资源，提高传输速度。</p><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>WebSocket 是 HTML5 开始提供的一种协议，它实现了浏览器与服务器的全双工通信，允许服务端主动向客户端推送数据。</p><p>WebSocket 协议的优点：</p><ul><li>建立连接更快，延迟更低</li><li>通信双方可以主动发送消息，而无需等待对方回应</li><li>支持双向通信，实时性更好</li></ul><p>缺点：</p><ul><li>兼容性问题，部分浏览器不支持</li><li>安全性问题，WebSocket 容易受到中间人攻击</li><li>协议复杂，实现起来比较复杂</li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>HTTPS（Hypertext Transfer Protocol Secure）是 HTTP 的安全版本，使用 SSL&#x2F;TLS 加密传输数据，可以防止数据被窃听、篡改、伪造。</p><p>PKI (Public Key Infrastructure)，身份验证。</p><p>到 CA（Certificate Authority）申请证书，证书里面包含公钥和域名信息，验证网站真实性。</p><h4 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h4><ul><li>对称加密：加密和解密使用同一个密钥，如 AES、DES、3DES</li><li>非对称加密：加密和解密使用不同的密钥，如 RSA、ECC</li><li>哈希算法：对数据进行摘要计算，防止数据被篡改，如 MD5、SHA-1、SHA-256</li><li>数字签名：对数据进行签名，防止数据被伪造，如 RSA 签名、ECDSA 签名</li></ul><h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><p>证书包含公钥、域名信息、有效期、颁发机构等信息，用于验证网站真实性。</p><ul><li>自签名证书：自己制作证书，不受 CA 认证，适用于测试环境</li><li>第三方证书：购买证书，由 CA 认证，适用于生产环境</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1xx (Informational) 信息性状态码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;stro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 笔记</title>
    <link href="https://alexiangyu.github.io/2024/05/30/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>https://alexiangyu.github.io/2024/05/30/JavaScript%E7%AC%94%E8%AE%B0/</id>
    <published>2024-05-30T09:22:51.000Z</published>
    <updated>2025-01-05T11:37:54.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一种脚本语言，可用于HTML和Web，更可广泛用于服务器等领域。</p><p>组成：</p><p><strong>ECMAScript</strong> 核心语法</p><p><strong>Web APIs</strong> DOM（文档对象模型）+BOM</p><h3 id="书写位置"><a href="#书写位置" class="headerlink" title="书写位置"></a>书写位置</h3><ul><li>内部JS：<code>&lt;script&gt;</code>写在<code>&lt;body&gt;</code>最后  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- body content here --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;Hello, JS!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>外部JS：单独引入<code>.js</code>文件  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- body content here --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>内联JS：标签内部  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World!&#x27;)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&#x2F;输出"></a>输入&#x2F;输出</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;写入文档&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印日志&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;弹出提示框&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&quot;输入框&quot;</span>, <span class="string">&quot;默认值&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;p&gt;你输入的内容是：&quot;</span> + a + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>; </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;p&gt;我的年龄是<span class="subst">$&#123;age&#125;</span>岁&lt;/p&gt;`</span>);   <span class="comment">//模板字符串</span></span><br></pre></td></tr></table></figure><h3 id="let，var，-const区别"><a href="#let，var，-const区别" class="headerlink" title="let，var， const区别"></a>let，var， const区别</h3><ol><li>作用域：</li></ol><ul><li>var：函数作用域，在声明它的函数内部有效。</li><li>let：块级作用域，即在声明它的<code>&#123; &#125;</code>块（如 if 语句块、for 循环块等）内有效。</li></ul><ol start="2"><li>变量提升：</li></ol><ul><li>var：会发生变量提升，即在变量声明之前就可以访问到变量（但值为 undefined）</li><li>let：没有变量提升，在声明之前访问会报错。</li></ul><p>var可重复声明</p><p>常量const：必须赋值，不可修改</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>添加</strong><ol><li>push(el1, el2)：添加元素到尾部，返回<strong>新的长度</strong></li><li>unshift(el)：添加到头部</li></ol></li><li><strong>删除</strong><ol><li>pop()：删除最后一个元素，返回<strong>该元素</strong></li><li>shift()：删除第一个元素</li><li>splice(start, count&#x3D;1, …, (el1)…)：指定开始位置，移除个数，替换元素</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span> ,<span class="string">&#x27;Alex&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="string">&#x27;Dave&#x27;</span>, <span class="string">&#x27;Eve&#x27;</span>))    <span class="comment">// 7</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [0, 1, 2, &#x27;Alex&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;Dave&#x27;, &#x27;Eve&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>())   <span class="comment">// remove the first element</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;Jane&#x27;</span>)    <span class="comment">// replace &#x27;Alex&#x27; with &#x27;Jane&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)    <span class="comment">// [0, 1, &#x27;Jane&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, &#x27;Dave&#x27;, &#x27;Eve&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li><code>map(func)</code>：映射，返回新数组</li><li><code>filter(func)</code>：过滤，返回新数组</li><li><code>reduce((prev, curr) =&gt; &#123;... &#125;, initial)</code>：聚合，返回单个值</li><li><code>sort(func)</code>：排序，返回新数组</li><li><code>reverse()</code>：反转，返回新数组</li><li><code>slice(start, end)</code>：切片，返回新数组</li><li><code>concat(arr1, arr2,...)</code>：合并，返回新数组</li><li><code>join</code>：连结成字符串</li></ul><p>展开运算符： 数组变成多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)); <span class="comment">// Output: 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);   <span class="comment">// [3, 4, 5] 返回true的元素才会被保留</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>)); <span class="comment">// Output: 15</span></span><br></pre></td></tr></table></figure><p><strong>遍历</strong></p><ul><li><code>forEach(func)</code>：遍历数组，不返回新数组</li><li><code>for...of</code>：遍历数组，返回新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [un, deux, trois, quatre, cinq] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(un, deux, trois, quatre, cinq); <span class="comment">// Output: 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>弱数据类型：在程序运行时才确定</p><ul><li><strong>基本数据类型：</strong> 存储的值本身<ol><li>Number</li><li>String  <code>.trim()</code> 去掉前后空格</li><li>Boolean</li><li>null</li><li>undefined</li><li>Symbol</li></ol></li><li><strong>引用数据类型：</strong> 可变<ol><li>Object</li><li>Array</li><li>Function</li><li>Date</li><li>RegExp 正则表达式</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="comment">// Object</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]; <span class="comment">// Array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123; <span class="comment">// Function</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// Date</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/hello/i</span>; <span class="comment">// RegExp</span></span><br></pre></td></tr></table></figure><p><strong>类型判断</strong></p><p>typeof 运算符&#x2F;函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);  <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);  <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);   <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p><strong>关于null与undefined</strong></p><p>null是已赋值空类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>+<span class="number">1</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>+<span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>+<span class="literal">null</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>类型转换</strong></p><ol><li>隐式转换: 运算，拼接</li><li><strong>显示转换</strong>：手动</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">let</span> ans1 = <span class="title class_">Number</span>(str) + <span class="number">1</span> <span class="comment">// 124</span></span><br><span class="line"><span class="keyword">let</span> ans2 = +str + <span class="number">1</span> <span class="comment">// 124 隐式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age = +<span class="title function_">prompt</span>(<span class="string">&quot;请输入你的年龄：&quot;</span>); <span class="comment">// number</span></span><br></pre></td></tr></table></figure><ul><li>parseInt()：只保留整数</li><li>parseFloat()：保留小数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;89.65px&quot;</span>))    <span class="comment">// 89</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;12.98px&quot;</span>))  <span class="comment">// 12.98</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li><code>==</code> 值相等</li><li><code>===</code> 值、类型都相等</li><li><code>!==</code> 不全等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> == <span class="string">&quot;2&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> === <span class="string">&quot;2&quot;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> === <span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === <span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> == <span class="literal">false</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> === <span class="literal">false</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="literal">true</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="literal">true</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="string">&quot;true&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="string">&quot;true&quot;</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> == <span class="string">&quot;&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === <span class="string">&quot;&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>建议用 <code>===</code> 判断</p><p>NaN不等于任何值</p><p><strong>三元运算符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">10</span>, num2 = <span class="number">20</span>;</span><br><span class="line">num1&gt;num2 ? <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;num1&#125;</span>大于<span class="subst">$&#123;num2&#125;</span>`</span>) : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;num1&#125;</span>不大于<span class="subst">$&#123;num2&#125;</span>`</span>);     <span class="comment">// 10不大于20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">prompt</span>(<span class="string">&quot;Enter a:&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>( a&lt;<span class="number">10</span> ?  <span class="number">0</span>+a : a)    <span class="comment">//if a is less than 10, add 0 before it</span></span><br></pre></td></tr></table></figure><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><p>表示唯一（即使它们具有相同的描述）且不可变的值。它可以用作对象属性的键（key），从而避免属性名称的冲突。</p><blockquote><p>通过 <code>Symbol()</code> 函数创建新的 <code>Symbol</code> 值，传入的字符串参数是该 <code>Symbol</code> 的描述，主要用于调试时的说明，并不会影响其唯一性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="title class_">Symbol</span>(<span class="string">&#x27;hidden&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>) === <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,  </span><br><span class="line">    [mySymbol]: <span class="string">&#x27;secret value&#x27;</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// 输出: Alice  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[mySymbol]); <span class="comment">// 输出: secret value  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)); <span class="comment">// 输出: [&quot;name&quot;]  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj)); <span class="comment">// 输出: [&quot;name&quot;]  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)); <span class="comment">// 输出: [&quot;name&quot;, Symbol(hidden)]</span></span><br></pre></td></tr></table></figure><ul><li>隐私性： <code>Symbol</code> 属性不会出现在常规的对象枚举中。仅可通过 <code>Object.getOwnPropertySymbols()</code> 方法获取。</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>声明：<code>function f(param = default) &#123; return val &#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addTwo</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">addTwo</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// Output: 5</span></span><br></pre></td></tr></table></figure><p><code>this</code> 指向调用它的对象，严格模式下无调用者：undefined</p><p><strong>回调函数</strong>：作为参数被传递的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(call, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);   <span class="comment">// 仅一次性执行</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p><code>let fn = function(param) &#123; body &#125;</code></p><p><strong>立即执行</strong></p><p><code>(function()&#123; &#125;)()</code> 或 <code>(function()&#123; &#125;())</code></p><p>需要分号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y) &#125;(<span class="number">2</span>, <span class="number">7</span>)); <span class="comment">// Output: 9</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><code>let fn = (param) =&gt; &#123; body &#125;</code></p><p>仅有一个参数&#x2F;语句，可省略括号&#x2F;return</p><p>无this：指向父级作用域（全局window）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = x =&gt; x+<span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>))  <span class="comment">// Output: 3</span></span><br></pre></td></tr></table></figure><p>用于返回对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = uname =&gt; (&#123; <span class="attr">name</span>: uname, <span class="attr">age</span>: <span class="number">25</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">fn</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);    <span class="comment">// Output: &#123; name: &quot;John&quot;, age: 25 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h4><p>用<code>...args</code>表示，放在最后…不写就是arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// Output: 9</span></span><br></pre></td></tr></table></figure><p><strong>参数解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, y) <span class="comment">// Output: 1 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = &#123;<span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age) <span class="comment">// Output: Alex 25</span></span><br></pre></td></tr></table></figure><h3 id="动态指向函数"><a href="#动态指向函数" class="headerlink" title="动态指向函数"></a>动态指向函数</h3><p>手动指定函数中的 this</p><ul><li>call() 与 apply() 类似，但第一个参数为调用者对象 <code>func.call(thisArg, args...)</code></li><li>apply() 形参为数组 <code>func.apply(thisArg, [argsArray])</code></li><li>bind() 返回一个新的函数，可以指定参数 <code>const boundFunc = func.bind(thisArg, args...)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">call</span>(person1)); <span class="comment">// 输出: Hello, Alice</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">call</span>(person2)); <span class="comment">// 输出: Hello, Bob</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr), <span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)); <span class="comment">// Output: 5 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greetPerson = greeting.<span class="title function_">bind</span>(person1); <span class="comment">// 绑定 person1 的 this 到 greeting 函数上</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greetPerson</span>()); <span class="comment">// Output: Hello, Alice</span></span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li><code>throw</code> 手动抛出异常，终止程序执行；要配合ERROR对象使用</li><li><code>try...catch</code> 捕获异常（由浏览器或其他代码抛出）拦截但不中断程序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Cannot divide by zero&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">divide</span>(<span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;    <span class="comment">// 无论是否有异常都会执行</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Finally block&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>debugger</code> 断点调试，在浏览器中运行</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>无序的数据集合</p><ul><li><strong>属性</strong>：属性名+值 成对出现 用<code>,</code>分隔</li><li><strong>方法</strong>：函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">  <span class="attr">u_name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">u_name</span> + <span class="string">&quot; and I am &quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">stu.<span class="title function_">greet</span>(); <span class="comment">// Output: Hello, my name is John and I am 25 years old.</span></span><br><span class="line"></span><br><span class="line">stu.<span class="property">address</span> = <span class="string">&quot;123 Main St&quot;</span>;</span><br><span class="line"><span class="keyword">delete</span> stu.<span class="property">age</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu); <span class="comment">// Output: &#123;name: &quot;John&quot;, address: &quot;123 Main St&quot;&#125;</span></span><br></pre></td></tr></table></figure><ol><li>增加新属性&#x2F;修改属性：<code>obj.attr = val</code></li><li>删除：<code>delete obj.attr</code></li></ol><p>查询可用 <code>obj[&#39;attr&#39;]</code> 属性名为字符串 attr为变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;o-name&#x27;</span>: <span class="string">&#x27;Object 1&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;o-name&#x27;</span>]); <span class="comment">// Output: Object 1</span></span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>创建多个对象，相同属性 <strong>没有Class…</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name = <span class="string">&quot;John&quot;</span>, age</span>) &#123;      <span class="comment">// Constructor function：Capitalize first letter of each word </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property">numberOfPeople</span>++;        <span class="comment">// count number of instances created</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">numberOfPeople</span> = <span class="number">0</span>;       <span class="comment">// Static property: Number of instances created</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">reportNumberOfPeople</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Total number of people: <span class="subst">$&#123;Person.numberOfPeople&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="literal">undefined</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// Output: John</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">reportNumberOfPeople</span>(); <span class="comment">// Output: Total number of people: 1</span></span><br></pre></td></tr></table></figure><p><strong>静态成员&#x2F;方法</strong></p><p>写在构造函数外面，所有实例共享</p><p>常用静态方法：</p><ul><li><code>Object.assign(target, ...sources)</code>：将所有可枚举的自有属性从一个或多个源对象复制到目标对象。</li><li><code>Object.keys(obj)</code>：返回一个包含对象自身可枚举属性名称的数组。</li><li><code>Object.values(obj)</code>：返回一个包含对象自身可枚举属性值的数组。</li><li><code>Object.entries(obj)</code>：返回一个包含对象自身可枚举属性 [key, value] 对的数组。</li><li><code>Object.freeze(obj)</code>：冻结对象，禁止修改其现有属性或添加新属性。</li><li><code>Object.seal(obj)</code>：密封对象，禁止添加新属性，但允许运营商修改现有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Mary&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj2)); <span class="comment">// Output: [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj2)); <span class="comment">// Output: [&quot;Mary&quot;, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, &#123; <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span> &#125;);   <span class="comment">// Copy all properties from one object to obj2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); <span class="comment">// Output: &#123; name: &#x27;Mary&#x27;, age: 25, gender: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h4><p>构造函数的属性 指向实例：<br>所有实例共享，所有实例都可以访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Sta</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Sta</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;     <span class="comment">// prototype defines method for all instances</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span> + <span class="number">3</span>;      <span class="comment">// this refers to the instance 实例对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yzx = <span class="keyword">new</span> <span class="title class_">Sta</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yzx.<span class="title function_">sum</span>()); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><strong>constructor属性：</strong> 反过来指向构造函数</p><p><strong>原型链:</strong> 基于构造函数原型的继承链；调用方法时，逐级再往上找</p><ul><li><p><code>yzx.__proto__ === Sta.prototype</code></p></li><li><p><code>Sta.prototype.constructor === Sta</code></p></li><li><p><code>Sta.prototype.__proto__ === Object.prototype</code></p></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>通过原型继承的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ears</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mouth</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;&#125; <span class="comment">// Woman.prototype inherits from Person.prototype</span></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span>;</span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">baby</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Have a baby&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w); <span class="comment">// Woman &#123;eyes: 2, ears: 2, mouth: 1&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">__proto__</span>); <span class="comment">// Person &#123;constructor: ƒ&#125;</span></span><br></pre></td></tr></table></figure><p><code>instanceof</code> 运算符：检测对象是否在某个构造函数的原型链上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yzx <span class="keyword">instanceof</span> <span class="title class_">Sta</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Sta</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p><code>for (let key in obj)</code> 语法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> stu) &#123;  <span class="comment">// Iterate over the object&#x27;s properties</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;: &quot;</span> + stu[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// name: John</span></span><br><span class="line"><span class="comment">// age: 25</span></span><br><span class="line"><span class="comment">// address: 123 Main St </span></span><br></pre></td></tr></table></figure><h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><p>同名变量赋值 <code>旧变量名：新变量名</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: user, age&#125; = &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user, age); <span class="comment">// Output: John 25</span></span><br></pre></td></tr></table></figure><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><ul><li>浅拷贝：仅复制一层，不包含后代元素</li><li>深拷贝：复制所有后代元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">obj</span>) &#123;            <span class="comment">// 递归实现</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj === <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj)</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key))</span><br><span class="line">            res[key] = <span class="title function_">copy</span>(obj[key]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res.<span class="property">key</span> = obj[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = _.<span class="title function_">cloneDeep</span>(obj1);    <span class="comment">// lodash.js库实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1));   <span class="comment">// JSON 实现深拷贝</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h4><blockquote><p>反射是在程序运行中获取和动态操作自身内容的一项技术。</p></blockquote><p>用于操作对象属性和行为，提供与Object相同的方法，但其方法是静态的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = &#123; <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj, newObj); <span class="comment">// obj: &#123;a: 1, b: 2, c: 3, d: 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj))   <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj, <span class="string">&#x27;a&#x27;</span>))  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(obj, <span class="string">&#x27;e&#x27;</span>, <span class="number">5</span>)    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj, <span class="string">&#x27;a&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(obj, <span class="string">&#x27;a&#x27;</span>); <span class="comment">// obj: &#123;b: 2, c: 3, d: 4, e: 5&#125;</span></span><br></pre></td></tr></table></figure><p><code>ownKeys()</code> 方法：返回对象的所有属性名（包括不可枚举的 <code>Symbol</code> 属性）</p><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><p>创建对象代理的机制。允许你定义一个对象作为原始对象的代理，以拦截和定制基本操作（例如属性访问、赋值、枚举等）。</p><blockquote><p>通过Proxy，可以在原有对象上添加额外的功能，比如验证、日志记录、属性访问拦截、计算值等。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;  </span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;Hello, world!&#x27;</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;  </span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey, receiver</span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Getting property: <span class="subst">$&#123;propKey&#125;</span>`</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver); <span class="comment">// 调用原始对象的属性  </span></span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, propKey, value</span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Setting property: <span class="subst">$&#123;propKey&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);  </span><br><span class="line">    target[propKey] = value; <span class="comment">// 设置原始对象的属性  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 表示设置成功  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">message</span>); <span class="comment">// 输出: Getting property: message \n Hello, world!  </span></span><br><span class="line">proxy.<span class="property">message</span> = <span class="string">&#x27;Hello, Proxy!&#x27;</span>; <span class="comment">// 输出: Setting property: message to Hello, Proxy!  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">message</span>); <span class="comment">// 输出: Getting property: message \n Hello, Proxy!</span></span><br></pre></td></tr></table></figure><p>常用的拦截器：</p><ul><li><code>get</code>: 拦截对象属性的读取操作。</li><li><code>set</code>: 拦截对象属性的写入操作。</li><li><code>has</code>: 拦截 in 运算符的操作。</li><li><code>deleteProperty</code>: 拦截删除属性的操作。</li><li><code>apply</code>: 拦截函数调用。</li><li><code>construct</code>: 拦截构造函数调用。</li><li><code>ownKeys</code>: 拦截获取对象自身属性的操作。</li><li><code>getOwnPropertyDescriptor</code>: 拦截获取对象属性描述符的操作。</li><li><code>defineProperty</code>: 拦截设置对象属性描述符的操作。</li></ul><p><strong>日期对象</strong></p><p>获取 <code>let date = new Date()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2021-01-01 12:00:00 AM UTC +00:00&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleDateString</span>()); <span class="comment">// &quot;1/1/2021&quot;</span></span><br></pre></td></tr></table></figure><p>时间戳：毫秒，since 1970-01-01</p><h2 id="WebAPIs"><a href="#WebAPIs" class="headerlink" title="WebAPIs"></a>WebAPIs</h2><p>用<code>const</code>声明变量（对象）</p><ol><li>DOM树：树结构表达 HTML 文档<ul><li>根节点为document对象</li></ul></li><li>DOM对象：包含所有属性、事件等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(div)</span><br></pre></td></tr></table></figure><h3 id="获取DOM元素"><a href="#获取DOM元素" class="headerlink" title="获取DOM元素"></a>获取DOM元素</h3><p>返回匹配指定CSS选择器的第一个元素：<code>querySelector(&#39;nav&#39;)</code></p><p>返回伪数组，可以遍历；<code>document.querySelectorAll()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>)  <span class="comment">// get element by id</span></span><br><span class="line"><span class="keyword">const</span> n2 = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;#&#x27;</span>)  <span class="comment">// get all elements by class name</span></span><br><span class="line"><span class="keyword">const</span> n3 = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;n&#x27;</span>)  <span class="comment">// get all elements by tag name</span></span><br></pre></td></tr></table></figure><h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><ul><li><code>innerHTML</code>：会解析HTML标签</li><li><code>innerText</code>：仅文本字符串</li><li><code>className</code>：更改CSS类</li><li><code>classLis</code>：<strong>追加&#x2F;删</strong>CSS类</li></ul><p>H5自定义属性 <code>data-xxx</code> DOM 中dateset对象</p><pre><code>&lt;p id=&quot;nav&quot; data-id=&quot;77&quot;&gt;Navigation&lt;/p&gt;const nav = document.getElementById(&#39;nav&#39;)console.log(nav.dataset.id)   // 77 get data-id attribute value</code></pre><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>添加方法 <code>addEventListener(event, func)</code></p><p>另一种写法 <code>.onclick</code> 无捕获</p><p><strong>事件类型</strong></p><ol><li>鼠标<ul><li><code>click</code> 点击</li><li><code>mouseenter</code> 经过</li><li><code>mouseleave</code> 离开</li><li><code>mouseover</code> 和 <code>mouseout</code> 有冒泡效果（不推荐）</li></ul></li><li>焦点<ul><li><code>focus</code> 获得</li><li><code>blur</code> 失去</li></ul></li><li>键盘<ul><li><code>keydown</code> 按下</li><li><code>keyup</code> 弹起</li></ul></li><li>文本<ul><li><code>text</code> 文本输入</li></ul></li></ol><p><strong>事件对象</strong>：事件触发的信息，func第一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b3.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)   <span class="comment">// event object</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Enter&#x27;</span>)    <span class="comment">//按回车</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>属性</p><ul><li>type: 事件类型</li><li>key: 按下的键</li></ul><p><strong>环境对象</strong>：this 变量 指向调用它的元素&#x2F;对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b3.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)    <span class="comment">// button element &lt;button id=&quot;b3&quot;&gt;Click me&lt;/button&gt;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>阶段：捕获+<strong>冒泡</strong>（默认）</p><p>捕获顺序：Document -&gt; Super_box -&gt; Sub-content 从外到内</p><p>不加 <code>true</code> 则冒泡，顺序相反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;super&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sub-content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> superBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.super&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sub = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.sub&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Document clicked&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">superBox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Super-box clicked&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">sub.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Sub-content clicked&#x27;</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><strong>阻止冒泡</strong>：避免影响父级元素</p><p>修改子类 <code>.stopPropagation</code> 后，仅有Sub-content事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sub.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Sub-content clicked&#x27;</span>)</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>()   <span class="comment">// stop event bubbling</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>.preventDefault()</code> 阻止默认行为</p><p><strong>解除绑定</strong></p><ul><li><code>on-click = null</code> </li><li><code>removeEventListener(event, func)</code> 不能是匿名函数</li></ul><p><strong>委托</strong></p><p>冒泡到父元素，减少注册次数</p><p>真正的触发元素：<code>e.target</code> 事件对象</p><p><strong>页面事件</strong></p><p>页面动作，执行回调函数</p><ul><li><code>load</code>：页面加载</li><li><code>scroll</code>：滚动</li><li><code>resize</code>：窗口尺寸变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Page loaded&#x27;</span>)          <span class="comment">// window load event</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM content loaded&#x27;</span>)   <span class="comment">// DOM fully loaded</span></span><br><span class="line">&#125;)                              <span class="comment">//faster than window.onload</span></span><br><span class="line"></span><br><span class="line">img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Image loaded&#x27;</span>)        <span class="comment">// 等待图片加载完成</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Window scrollX <span class="subst">$&#123;<span class="variable language_">window</span>.scrollX&#125;</span> scrollY <span class="subst">$&#123;<span class="variable language_">window</span>.scrollY&#125;</span>`</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Document scrollX <span class="subst">$&#123;<span class="variable language_">document</span>.documentElement.scrollLeft&#125;</span> scrollY <span class="subst">$&#123;<span class="variable language_">document</span>.documentElement.scrollTop&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取元素尺寸</p><ul><li><code>clientWidth</code> 和 <code>clientHeight</code>：border之内的宽高 可更改</li><li><code>offsetHeight</code> 包括border 只读</li></ul><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><p>节点：&lt;元素&gt;</p><p><strong>基于关系查找节点</strong></p><ul><li>父节点：<code>.parentNode</code></li><li>子节点：<code>.children</code> 包含所有节点的伪数组</li><li>姐妹节点<ul><li><code>.previousElementSibling</code> 上一个</li><li><code>.nextElementSibling</code>下一个</li></ul></li></ul><p><strong>创建、追加节点</strong> <code>createElement()</code></p><pre><code>const dd = document.createElement(&#39;div&#39;);dd.innerHTML = &#39;dd&#39;;superDiv.appendChild(dd);      //到最后的子元素superDiv.insertBefore(dd, superDiv.children[1]);</code></pre><p><strong>克隆节点</strong> <code>.cloneNode(true)</code> 深&#x2F;浅克隆（是否包含后代元素）</p><p><strong>删除节点</strong> 经过父元素</p><pre><code>superDiv.removeChild(superDiv.children[0]); // remove first child</code></pre><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><code>location</code>：URL地址<ul><li><code>search</code> 参数，<code>?</code>后面部分</li><li><code>hash</code> 哈希，<code>#</code>后面部分</li><li><code>reload()</code> 刷新</li></ul></li><li><code>navigator</code>：浏览器平台信息</li><li><code>history</code>：历史操作<ul><li><code>back()</code>：后退</li><li><code>forward()</code>：前进</li><li><code>go(n)</code>：进&#x2F;退n步</li></ul></li></ul><p><strong>localStorage</strong>本地存储</p><p>键值对；仅字符串</p><p>对象转换成JSON：<code>JSON.stringify(obj)</code></p><ul><li><code>setItem()</code>：增&#x2F;改</li><li><code>removeItem()</code>：删</li><li><code>log()</code>：查</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>); <span class="comment">// https://www.example.com/path/to/page.html</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// value</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// remove ite</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, my name is &#x27;</span>+ <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="keyword">const</span> person = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// Alex</span></span><br></pre></td></tr></table></figure><h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>Asynchronous JavaScript and XML 局部更新</p><ul><li><code>fetch()</code>：异步请求，返回Promise对象</li><li><code>XMLHttpRequest</code>：同步&#x2F;异步请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>);</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Request failed.  Returned status of&#x27;</span>+ xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>基于Promise的HTTP客户端，支持浏览器和Node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">   .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">   .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>异步操作的完成状态，不可变</p><ul><li>待定：（初始状态）<code>pending</code></li><li>成功：<code>resolve(value)</code></li><li>失败：<code>reject(error)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;    <span class="comment">// promise对象</span></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/* success */</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// failure</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><p><code>.then()</code> 返回一个新的Promise对象，串联下一环任务，避免嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简洁的Promise异步：<code>async</code> 关键字，可以用 <code>await</code> 等待结果：会阻塞后面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure><h4 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h4><ul><li><code>Promise.all()</code>：等待所有Promise都成功</li><li><code>Promise.race()</code>：等待第一个Promise成功</li><li><code>Promise.resolve()</code>：将现有值转换为Promise</li><li><code>Promise.reject()</code>：创建失败的Promise</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>阻止频繁触发函数，禁用一段时间，延迟执行</p><p>loDash库实现：<code>_.debounce(func, wait, [options])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(func , wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>单位时间执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeout;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">500</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;一种脚本语言，可用于HTML和Web，更可广泛用于服务器等领域。&lt;/p&gt;
&lt;p&gt;组成：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ECMAScript&lt;</summary>
      
    
    
    
    <category term="web前端" scheme="https://alexiangyu.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="https://alexiangyu.github.io/2024/05/18/Python%E7%AC%94%E8%AE%B0/"/>
    <id>https://alexiangyu.github.io/2024/05/18/Python%E7%AC%94%E8%AE%B0/</id>
    <published>2024-05-18T12:29:55.000Z</published>
    <updated>2025-01-06T06:52:23.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>解释器</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;hello, python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li>int</li><li>float</li><li>string</li></ul><p>查看类型：<code>type(8963) = int_type</code></p><p><code>round(x, n)</code> 方法返回浮点数x保留<code>n</code>位小数的四舍五入值</p><p><strong>注解</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">b: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>] = <span class="number">1.2</span></span><br></pre></td></tr></table></figure><p>联合类型注解：int 或 float</p><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>命名只能出现：</p><ol><li>英文</li><li>中文（不推荐）</li><li>数字（不位于开头）</li><li>下划线</li></ol><ul><li>不能是关键字</li><li><strong>大小写敏感</strong></li></ul><p>规范：<br>下划线_小写英文</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>&#x2F;&#x2F; ：整除 <code>11/2 == 5</code></li><li>** ：指数 <code>2**3 == 8</code></li><li>可使用<code>a+=b</code>简写</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>定义方式： 单引号，双引号，三引号（支持换行）</p><p><strong>转义字符：</strong> <code>\&quot;</code> 引号解除引用</p><p>拼接：<code>+</code> 号</p><p><strong>格式化</strong> <code>%s</code> 占位符</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">114514</span></span><br><span class="line">name = <span class="string">&quot;Tim&quot;</span></span><br><span class="line">message = <span class="string">&quot;Today I am %d years elder than %s&quot;</span> %(age, name)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>快速写法 <code>f&quot;内容&#123;变量&#125;&quot;</code>：不限数据类型，不控制精度<br> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Alex&quot;</span></span><br><span class="line">year = <span class="number">1789</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我是<span class="subst">&#123;name&#125;</span>, 出生于<span class="subst">&#123;year&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></p><ul><li><code>ord()</code> 字符转数字</li><li><code>chr()</code> 数字转字符</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">chr</span>(<span class="number">97</span>)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p><code>re</code> 模块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;pytpyppyyyppy&quot;</span></span><br><span class="line">res = re.findall(<span class="string">&quot;py&quot;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(res, <span class="built_in">len</span>(res))         <span class="comment"># [&#x27;py&#x27;, &#x27;py&#x27;, &#x27;py&#x27;, &#x27;py&#x27;] 4</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">&quot;py&quot;</span>, s))     <span class="comment"># &lt;re.Match object; span=(0, 2), match=&#x27;py&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">r = <span class="string">&#x27;^[0-9a-zA-Z]&#123;6,10&#125;$&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;12345666&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(r, s))      <span class="comment"># [&#x27;123456&#x27;]</span></span><br><span class="line"></span><br><span class="line">r_mail = <span class="string">r&#x27;(^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$)&#x27;</span>    <span class="comment"># 匹配邮箱</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r_mail, <span class="string">&#x27;xxx@sb.com&#x27;</span>))     <span class="comment"># &lt;re.Match object; span=(0, 10), match=&#x27;xxx@sb.com&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r_mail, <span class="string">&#x27;abc@com&#x27;</span>))        <span class="comment"># None</span></span><br></pre></td></tr></table></figure><ul><li><code>re.match(pattern, string)</code> 匹配开头，成功返回匹配对象，否则返回None</li><li><code>re.search(pattern, string)</code> 匹配第一个</li><li><code>re.findall(pattern, string)</code> 匹配所有，返回列表</li><li><code>re.split(pattern, string)</code> 按pattern分割，返回列表</li><li><code>re.sub(pattern, repl, string)</code> 替换</li></ul><h2 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入&#x2F;输出"></a>输入&#x2F;输出</h2><p>中断，从键盘输入： <code>name = input(&quot;Enter your name:&quot;)</code></p><h4 id="精度控制"><a href="#精度控制" class="headerlink" title="精度控制"></a>精度控制</h4><p><code>%m.nf</code> m：控制宽度；n控制小数精度，<strong>四舍五入</strong>。</p><h2 id="条件-循环"><a href="#条件-循环" class="headerlink" title="条件&#x2F;循环"></a>条件&#x2F;循环</h2><p>bool数据类型：True&#x2F;False</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b1 = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b1))     <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>比较运算符：&#x3D;&#x3D;, !&#x3D;, &lt;, &gt;&#x3D;</p><p>逻辑否定: <code>if not A:</code></p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>格式（缩进）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a1 = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter your age&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> a1 &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Adult only:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(a1-<span class="number">18</span>)</span><br><span class="line"><span class="keyword">elif</span> a1 &gt; <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your are too old&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your are too young&quot;</span>)</span><br></pre></td></tr></table></figure><p>多个组合：<code>elif</code></p><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slogan = <span class="string">&quot;Free China&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> slogan:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>range语句：</p><ul><li><code>range(num)</code>: 序列, 从0到num-1的整数</li><li><code>range(num1, num2, step)</code>: 该序列从num1开始，到num2结束（不包括num2），步长为step．</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 13</span></span><br></pre></td></tr></table></figure><p><strong>临时变量作用域</strong>: 循环外部也可以用, 有warning</p><h4 id="跳过-中断"><a href="#跳过-中断" class="headerlink" title="跳过&#x2F;中断"></a>跳过&#x2F;中断</h4><ul><li><code>continue</code> 中断, 进入下一次循环</li><li><code>break</code> 结束循环</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h4 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">x, y</span>):</span><br><span class="line">    body</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">one = function(a, b)</span><br></pre></td></tr></table></figure><p>默认返回值: None, 类型: <code>&lt;class &#39;NoneType&#39;&gt;</code> <strong>假</strong></p><p>例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_len</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    求字符串长度的函数</span></span><br><span class="line"><span class="string">    :param data: 传入参数字符串</span></span><br><span class="line"><span class="string">    :return: 返回结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;We have <span class="subst">&#123;n&#125;</span> letter(s) in <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_len(<span class="string">&quot;eraser&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_len(<span class="string">&quot;administration&quot;</span>)))</span><br></pre></td></tr></table></figure><p>说明文档 <strong>docstrings</strong>: 多行注释,自动生成: <code>:param data:</code> <code>:return: </code></p><p>函数内全局变量赋值: 用<code>globa</code>关键字</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(): </span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num = <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>多返回值</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_test())</span><br><span class="line"><span class="comment"># (1, 2)</span></span><br></pre></td></tr></table></figure><p>类型： <code>&lt;class &#39;tuple&#39;&gt;</code></p><h2 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h2><ul><li>位置参数：根据定义的参数个数、位置一致</li><li>关键字参数：key&#x3D;value 无顺序 *args</li><li>参数缺省：定义默认值，<strong>位置在最后</strong></li><li>不定长参数：<ul><li><code>*args</code>  一个元组</li><li><code>**kwarg</code> 键值对 参数组成字典</li></ul></li><li>调用时：<ul><li><code>*容器</code> unpack成位置参数</li><li><code>**容器</code> 字典 -&gt; 关键字参数</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_test2</span>(<span class="params">name, num, isTrue=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>, the num is <span class="subst">&#123;num&#125;</span> and it&#x27;s <span class="subst">&#123;isTrue&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func_test2(<span class="string">&quot;Tom&quot;</span>, isTrue=<span class="literal">False</span>, num=<span class="number">114154</span>)</span><br><span class="line"></span><br><span class="line">func_test2(<span class="string">&quot;Jey&quot;</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_test3</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The args is <span class="subst">&#123;args&#125;</span>, the K-W args is <span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func_test3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, stu_name=<span class="string">&quot;Alex&quot;</span>, age=<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Aniki</span>(<span class="params">a, *b, **c</span>):</span><br><span class="line">    z = [a, b, c]</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"><span class="comment"># a:一个位置参数 b:元组 c:所有键值对</span></span><br><span class="line"></span><br><span class="line">Aniki(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;b&quot;</span>, x=<span class="string">&quot;123&quot;</span>, y=<span class="string">&quot;456&quot;</span>)</span><br><span class="line"><span class="comment"># [1, (2, &#x27;b&#x27;), &#123;&#x27;x&#x27;: &#x27;123&#x27;, &#x27;y&#x27;: &#x27;456&#x27;&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="强制位参数"><a href="#强制位参数" class="headerlink" title="强制位参数"></a>强制位参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, b, /, c, d, *, e, f</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c, d, e, f)</span><br></pre></td></tr></table></figure><p>形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>关键字 lambda <strong>临时使用一次</strong></p><p><code>引用 = lambda 参数列表:表达式</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x*x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br><span class="line"><span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在一个函数内部定义另外一个函数，并且把这个函数对象作为返回值</p><p><strong>需要使用外层函数的变量（包括参数）</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">increment</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x:x+n</span><br><span class="line"></span><br><span class="line">f=increment(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">10</span>))    <span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p><code>nonlocal</code> 外部变量</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>给函数增加新功能，不改变原函数</p><p>目标函数前 <code>@outer_decorator</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):    <span class="comment"># 装饰器函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):    <span class="comment"># 装饰器包裹函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)    <span class="comment"># 调用被装饰函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator    </span><span class="comment"># 装饰器调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="string">&quot;Tom&quot;</span>)    <span class="comment"># 输出 Before function call Hello Tom After function call</span></span><br></pre></td></tr></table></figure><p><strong>多个装饰器</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Before function call 2&quot;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;After function call 2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="meta">@my_decorator2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="string">&quot;Tom&quot;</span>)    <span class="comment"># 输出 Before function call 2 Before function call Hello Tom After function call 2 After function call 2</span></span><br></pre></td></tr></table></figure><h2 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h2><p>各种数据结构</p><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h4><p><code>my_list = [&#39;Alex&#39;, &#39;Bob&#39;, True, [1, 2, 3]]</code></p><ul><li>元素可以<strong>异类型</strong>, 支持嵌套, <strong>可重复</strong></li><li><strong>有序</strong>: 下标索引 0, 1, 2, 3……</li><li>下标索引(反向) ……-3, -2, -1</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(my_list[<span class="number">1</span>], my_list[-<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line"><span class="comment"># Bob 1</span></span><br></pre></td></tr></table></figure><p><strong>方法</strong></p><ol><li><strong>查询下标</strong>: 返回索引, 不存在则报错</li><li><strong>修改元素</strong>: 指定下标</li><li><strong>插入元素</strong>: 指定下标, 指定元素</li><li><strong>追加</strong>: 元素(容器)放到尾部 extend([29, 11])</li><li><strong>删除</strong>: <ul><li>del</li><li>pop() 默认最后一个元素</li><li>remove(a) 从前到后, 仅删一个</li></ul></li><li><strong>统计</strong>: count(元素)</li><li><strong>统计总数</strong>: len(my_list)</li><li><strong>清空</strong>: clear()</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">index = my_list.index(<span class="string">&quot;Alex&quot;</span>)     <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">my_list[<span class="number">0</span>] = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"></span><br><span class="line">my_list.insert(<span class="number">2</span>, <span class="string">&quot;Charlie&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_list.append(<span class="string">&#x27;final&#x27;</span>)</span><br><span class="line">my_list.extend(list2)</span><br><span class="line"><span class="comment"># [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, 2022, True, [1, 2, 3], &#x27;final&#x27;, 1949, 1989, 2019]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> list2[<span class="number">2</span>]    <span class="comment"># [1949, 1989]</span></span><br><span class="line"></span><br><span class="line">elem = my_list.pop(<span class="number">3</span>)    <span class="comment"># 2022</span></span><br><span class="line"></span><br><span class="line">my_list.remove(<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;, [1, 2, 3], &#x27;final&#x27;, 1949, 1989, 2019]</span></span><br><span class="line"></span><br><span class="line">list2.insert(<span class="number">1</span>, <span class="number">1989</span>)</span><br><span class="line">dup = list2.count(<span class="number">1989</span>)    <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">len</span>(my_list)    <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">my_list.clear()</span><br><span class="line"><span class="comment"># my_list == []</span></span><br></pre></td></tr></table></figure><p><strong>迭代</strong></p><p>while循环:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(my_list):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;my_list[i]&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>for循环(依次序): </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> my_list:</span><br><span class="line">    <span class="built_in">print</span>(ele)</span><br></pre></td></tr></table></figure><h4 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h4><p><strong>不可修改</strong>的list</p><p><code>my_tuple = (1, &quot;Hello&quot;, True)</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1 = <span class="built_in">tuple</span>()</span><br><span class="line">t2 = ((), )</span><br></pre></td></tr></table></figure><ul><li>但其中有list可以对内容赋值</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t3 = (<span class="number">1</span>, <span class="string">&quot;NM$L&quot;</span>, [<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Bob&quot;</span>])</span><br><span class="line">t3[-<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t3)</span><br><span class="line"><span class="comment"># (1, &#x27;NM$L&#x27;, [&#x27;Alice&#x27;, &#x27;Bob&#x27;])</span></span><br></pre></td></tr></table></figure><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h4><p>任意数量的字符 <strong>不可修改</strong></p><p><code>my_str = &quot;fight for freedom&quot; </code></p><ol><li><strong>替换</strong>: replace(“s0”, “s1”)   s0替换为s1，得到新字符串</li><li><strong>分隔</strong>: split(“s2”) 以s2为间隔切分，装入list中</li><li><strong>规整</strong>: strip(“ “) 去除首尾空格&#x2F;指定字符串</li><li>查找子串出现次数</li><li>获取长度</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my_str = <span class="string">&quot;fight for freedom&quot;</span></span><br><span class="line"></span><br><span class="line">new_slogan = my_str.replace(<span class="string">&quot;for&quot;</span>, <span class="string">&quot;with&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_slogan)</span><br><span class="line"><span class="comment"># fight with freedom 替换内容</span></span><br><span class="line"></span><br><span class="line">str_list = my_str.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_list)</span><br><span class="line"><span class="comment"># [&#x27;fight&#x27;, &#x27;for&#x27;, &#x27;freedom&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_str.strip(<span class="string">&#x27;dom&#x27;</span>))</span><br><span class="line"><span class="comment"># fight with free</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="序列-切片"><a href="#序列-切片" class="headerlink" title="序列-切片"></a>序列-切片</h4><p>取出子序列：<code>序列[起始下标:结束下标:步长]</code></p><p>步长为负：反向取</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str9 = <span class="string">&quot;cdefgab&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str9[::<span class="number">2</span>])</span><br><span class="line"><span class="comment"># cegb</span></span><br></pre></td></tr></table></figure><h4 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h4><p>多个数据：无序 <strong>去重</strong> 可修改</p><p><code>my_set = &#123;&quot;Alex&quot;, &quot;Bob&quot;, &quot;Alex&quot;&#125;</code></p><ol><li><strong>添加元素</strong> add(el)</li><li><strong>移除</strong> remove(el)</li><li><strong>随机取出</strong> pop()</li><li><strong>清空</strong> clear()</li><li><strong>取差集</strong> set1.difference(set2) 得到新集合，为set1有 set2没有的</li><li><strong>交集</strong> set1.union(set2)</li><li>元素数量 len(my_set)</li><li>for 遍历</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_set = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Alex&quot;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;</span><br><span class="line">my_set.add(<span class="number">564</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># element = my_set.pop()</span></span><br><span class="line"><span class="comment"># print(element)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_set.difference(set2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># my_set.difference_update(set2)</span></span><br><span class="line"><span class="comment"># print(my_set)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_set.union(set2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_set.clear()</span><br></pre></td></tr></table></figure><h4 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h4><p>key-value <strong>键值对</strong> </p><p>原生：通过key值找value <strong>key唯一</strong> </p><p><code>my_dict = &#123;&quot;Alex&quot;: 564, &quot;Bob&quot;: 8963, &quot;Charlie&quot;: 1918&#125;</code></p><p>value可嵌套</p><ol><li><strong>新增&#x2F;更新</strong> dict[‘A’] &#x3D; 123</li><li><strong>删除</strong> pop(‘B’)</li><li><strong>清空</strong> clear()</li><li><strong>取全部key</strong> keys() 是list</li><li><strong>遍历</strong> for</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&quot;Alex&quot;</span>: <span class="number">564</span>, <span class="string">&quot;Bob&quot;</span>: <span class="number">8963</span>, <span class="string">&quot;Charlie&quot;</span>: <span class="number">1918</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&quot;Alex&quot;</span>])</span><br><span class="line"><span class="comment"># 564</span></span><br><span class="line"></span><br><span class="line">stu_dict = &#123;<span class="string">&quot;Alex&quot;</span>: &#123;<span class="string">&quot;ch&quot;</span>: <span class="number">99</span>, <span class="string">&quot;Math&quot;</span>: <span class="number">101</span>, <span class="string">&quot;English&quot;</span>: <span class="number">120</span>&#125;, <span class="string">&quot;Bob&quot;</span>: &#123;<span class="string">&quot;ch&quot;</span>: <span class="number">101</span>, <span class="string">&quot;Math&quot;</span>: <span class="number">111</span>, <span class="string">&quot;English&quot;</span>: <span class="number">121</span>&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(stu_dict[<span class="string">&quot;Alex&quot;</span>][<span class="string">&quot;ch&quot;</span>])</span><br><span class="line"><span class="comment"># 99</span></span><br><span class="line"></span><br><span class="line">my_dict[<span class="string">&quot;Daniel&quot;</span>] = <span class="number">116</span></span><br><span class="line"><span class="built_in">print</span>(my_dict)</span><br><span class="line"><span class="built_in">print</span>(my_dict.pop(<span class="string">&quot;Alex&quot;</span>))</span><br><span class="line"><span class="comment"># 564</span></span><br><span class="line"></span><br><span class="line">keys = <span class="built_in">list</span>(my_dict.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="built_in">print</span>(keys)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> my_dict:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>: <span class="subst">&#123;my_dict[k]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="容器通用操作"><a href="#容器通用操作" class="headerlink" title="容器通用操作"></a>容器通用操作</h4><ul><li><strong>元素个数</strong> len(my_list)</li><li><strong>最大&#x2F;小元素</strong> max(my_dict)</li><li><strong>类型转换</strong> 不能转换成字典 list(my_set)</li><li><strong>排序</strong> sorted(my_list, [顺序])<ul><li>返回list</li><li>降序 <code>reverse=True</code></li></ul></li></ul><p><strong>zip() 函数</strong></p><p>将可迭代的对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表，长度与最短的对象相同。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(a, b, c):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># (1, 4, 7)</span></span><br><span class="line"><span class="comment"># (2, 5, 8)</span></span><br><span class="line"><span class="comment"># (3, 6, 9)</span></span><br></pre></td></tr></table></figure><p><strong>二分查找</strong></p><ul><li><code>bisect.bisect()</code> </li><li><code>bisect.bisect_right()</code> 返回大于x的第一个下标(相当于C++中的 <code>upper_bound</code>)</li><li><code>bisect.bisect_left()</code> 返回大于等于x的第一个下标(相当于C++中的 <code>lower_bound</code>)</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect  </span><br><span class="line"></span><br><span class="line">sorted_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>]</span><br><span class="line"><span class="built_in">print</span>(bisect.bisect(sorted_list, <span class="number">9</span>))    <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(bisect.bisect_right(sorted_list, <span class="number">9</span>))  <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(bisect.bisect_left(sorted_list, <span class="number">9</span>))   <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>open函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;file_test&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参数mode:</p><ul><li>‘r’: 只读，指针在文件开头</li><li>‘w’: （创建）并写入，若文件不存在则覆盖</li><li>‘a’: 追加，文件不存则创建</li></ul><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = f.read(<span class="number">10</span>)</span><br><span class="line">content = f.readlines() <span class="comment"># 读取全部内容；一个列表，元素为每行内容</span></span><br></pre></td></tr></table></figure><p>read()参数：</p><ul><li>数据长度（字节）</li><li>缺省为全部读取</li></ul><p>readlines()：</p><ol><li>读取全部内容</li><li>一个列表，元素为每行内容</li></ol><p>readline()</p><ul><li>一次仅读一行</li></ul><p><strong>for 循环读取</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;./file_test&#x27;</span>, <span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>临时变量 <code>l</code></p><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><p>flush 刷新缓冲区：主存-&gt;磁盘</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f = open(&#x27;./file_test&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># for i in range(10):</span></span><br><span class="line"><span class="comment">#     f.write(f&#x27;hello world &#123; i &#125;\n&#x27;)</span></span><br><span class="line"><span class="comment"># f.flush()</span></span><br><span class="line"><span class="comment"># f.close()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./file_test&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        f.write(<span class="string">f&#x27;hello world <span class="subst">&#123;i&#125;</span>\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>解除占用</p><p><code>f.close()</code></p><p><strong>with open 语法</strong></p><p>执行完自动关闭</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./file_test&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.readlines()</span><br></pre></td></tr></table></figure><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>try&#x2F;except 语句</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;执行的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;处理异常的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常&quot;</span>)</span><br></pre></td></tr></table></figure><p>多个&#x2F;特定异常：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;执行的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;处理异常的代码&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finished, goodbye&quot;</span>)</span><br></pre></td></tr></table></figure><p>顶级异常: <strong>Exception</strong></p><p>从内向外传递，每层都可捕获</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p> <code>import</code> 模块名</p><p>模块的名称：<code>__name__</code>内置变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>限制可被 import * 的内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&quot;mun&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br></pre></td></tr></table></figure><p>package.module</p><p>具有__init__.py 的文件</p><h4 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h4><p><a href="https://docs.python.org/zh-cn/3/library/collections.html#module-collections">文档</a></p><ul><li>Counter 计数器</li><li>defaultdict 默认字典</li><li>deque 双端队列</li><li>OrderedDict 有序字典</li></ul><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><ul><li>成员变量</li><li>成员方法 (self, )</li></ul><p><strong>私有成员</strong>：<code>__private_method</code> 两个下划线开头</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>内置的方法：魔术方法</p><p>赋值：自动执行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, </span>):</span><br><span class="line">    self.data = []</span><br><span class="line">    self.name = name</span><br></pre></td></tr></table></figure><p>重写str：一个对象成为<code>print()</code>函数参数输出的内容</p><p>print 输出的默认是内存地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="keyword">return</span> <span class="string">f&quot;This is a xxx object!&quot;</span></span><br></pre></td></tr></table></figure><p>重写对象之比较大小</p><ul><li><code>__lt__</code>：&lt;</li><li><code>__le__</code>：&lt;&#x3D;</li><li><code>__eq__</code>：&#x3D;&#x3D;</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>可多继承</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>(BaseClass1, BaseClass2):</span><br><span class="line"><span class="comment"># 父类方法名：左边最优先</span></span><br></pre></td></tr></table></figure><p><code>pass</code> 补全 空的代码块</p><p>可在子类中复写</p><p>调用父类成员：<code>super().method()</code> 或 <code>BaseClass.method(self)</code></p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>父类引用子类对象，调用子类方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;解释器&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="代码基础" scheme="https://alexiangyu.github.io/categories/%E4%BB%A3%E7%A0%81%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="https://alexiangyu.github.io/2024/05/14/My-New-Post/"/>
    <id>https://alexiangyu.github.io/2024/05/14/My-New-Post/</id>
    <published>2024-05-14T04:24:07.000Z</published>
    <updated>2024-05-14T06:56:58.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="This-is-my-new-post"><a href="#This-is-my-new-post" class="headerlink" title="This is my new post"></a>This is my new post</h3><p>This is the content of my new post.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;This-is-my-new-post&quot;&gt;&lt;a href=&quot;#This-is-my-new-post&quot; class=&quot;headerlink&quot; title=&quot;This is my new post&quot;&gt;&lt;/a&gt;This is my new post&lt;/h3&gt;&lt;p&gt;Th</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://alexiangyu.github.io/2024/05/12/hello-world/"/>
    <id>https://alexiangyu.github.io/2024/05/12/hello-world/</id>
    <published>2024-05-12T04:58:31.517Z</published>
    <updated>2024-05-12T04:58:31.517Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>闲笔</title>
    <link href="https://alexiangyu.github.io/2014/12/27/%E9%97%B2%E7%AC%94/"/>
    <id>https://alexiangyu.github.io/2014/12/27/%E9%97%B2%E7%AC%94/</id>
    <published>2014-12-26T18:38:40.000Z</published>
    <updated>2024-11-12T16:02:55.410Z</updated>
    
    <content type="html"><![CDATA[<p>删</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;删&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
